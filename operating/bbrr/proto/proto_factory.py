# THIS FILE IS AUTOMATIC GENERATED BY REFLECT TOOL
# DO NOT CHECK THIS FILE INTO SOURCE CONTORL
# OR MODIFY THIS FILE MANUALLY

import guard_proto_pb2
from string_hash import StringHash

def create_pb(hash):
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_NAME_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_ACCOUNT_BY_NAME_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_NAME_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_ACCOUNT_BY_NAME_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_UID_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_ACCOUNT_BY_UID_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_UID_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_ACCOUNT_BY_UID_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_WORLD_INFO_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_WORLD_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PLAYER_WORLD_INFO'):
        return getattr(guard_proto_pb2, 'PLAYER_WORLD_INFO')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_WORLD_INFO_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_WORLD_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BASE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_BASE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('HERO_EMBLEM_INFO'):
        return getattr(guard_proto_pb2, 'HERO_EMBLEM_INFO')()
    
    if hash == StringHash.calculate_hash('HERO_BASE_INFO'):
        return getattr(guard_proto_pb2, 'HERO_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BASE_INFO_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_BASE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_LIST_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_RANK_LIST_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_LIST_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_RANK_LIST_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_POS_BY_UID_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_RANK_POS_BY_UID_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_POS_BY_UID_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_RANK_POS_BY_UID_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_PVE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_PVE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('GM_PLAYER_PVE_INFO'):
        return getattr(guard_proto_pb2, 'GM_PLAYER_PVE_INFO')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_PVE_INFO_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_PVE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BUILDING_AND_PACKAGE_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BUILDING_AND_PACKAGE_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_TOTAL_RECHARGE_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_TOTAL_RECHARGE_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_TOTAL_RECHARGE_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_TOTAL_RECHARGE_RES')()
    
    if hash == StringHash.calculate_hash('GM_LOCK_PLAYER_REQ'):
        return getattr(guard_proto_pb2, 'GM_LOCK_PLAYER_REQ')()
    
    if hash == StringHash.calculate_hash('GM_LOCK_PLAYER_RES'):
        return getattr(guard_proto_pb2, 'GM_LOCK_PLAYER_RES')()
    
    if hash == StringHash.calculate_hash('GM_BAN_PLAYER_CHAT_REQ'):
        return getattr(guard_proto_pb2, 'GM_BAN_PLAYER_CHAT_REQ')()
    
    if hash == StringHash.calculate_hash('GM_BAN_PLAYER_CHAT_RES'):
        return getattr(guard_proto_pb2, 'GM_BAN_PLAYER_CHAT_RES')()
    
    if hash == StringHash.calculate_hash('GM_KICK_PLAYER_REQ'):
        return getattr(guard_proto_pb2, 'GM_KICK_PLAYER_REQ')()
    
    if hash == StringHash.calculate_hash('GM_KICK_PLAYER_RES'):
        return getattr(guard_proto_pb2, 'GM_KICK_PLAYER_RES')()
    
    if hash == StringHash.calculate_hash('GM_MAIL_ACC'):
        return getattr(guard_proto_pb2, 'GM_MAIL_ACC')()
    
    if hash == StringHash.calculate_hash('GM_MAIL_INFO'):
        return getattr(guard_proto_pb2, 'GM_MAIL_INFO')()
    
    if hash == StringHash.calculate_hash('GM_SEND_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'GM_SEND_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('GM_SEND_MAIL_RES'):
        return getattr(guard_proto_pb2, 'GM_SEND_MAIL_RES')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_ATTR_REQ'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_ATTR_REQ')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_ATTR_RES'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_ATTR_RES')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_HERO_LEVEL_REQ'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_HERO_LEVEL_REQ')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_HERO_LEVEL_RES'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_HERO_LEVEL_RES')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_VIP_LEVEL_REQ'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_VIP_LEVEL_REQ')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_VIP_LEVEL_RES'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_VIP_LEVEL_RES')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_UNLOCK_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_UNLOCK_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_UNLOCK_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_UNLOCK_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('GUARD_MSG_GAME_SVR'):
        return getattr(guard_proto_pb2, 'GUARD_MSG_GAME_SVR')()
    
    if hash == StringHash.calculate_hash('ResServerLocalization'):
        return getattr(guard_proto_pb2, 'ResServerLocalization')()
    
    if hash == StringHash.calculate_hash('ResDropIndexEx'):
        return getattr(guard_proto_pb2, 'ResDropIndexEx')()
    
    if hash == StringHash.calculate_hash('ResResourceInfo'):
        return getattr(guard_proto_pb2, 'ResResourceInfo')()
    
    if hash == StringHash.calculate_hash('ResPreRole'):
        return getattr(guard_proto_pb2, 'ResPreRole')()
    
    if hash == StringHash.calculate_hash('ResInitSkill'):
        return getattr(guard_proto_pb2, 'ResInitSkill')()
    
    if hash == StringHash.calculate_hash('ResNewRoleBuf'):
        return getattr(guard_proto_pb2, 'ResNewRoleBuf')()
    
    if hash == StringHash.calculate_hash('ResCost'):
        return getattr(guard_proto_pb2, 'ResCost')()
    
    if hash == StringHash.calculate_hash('ResRoleGL'):
        return getattr(guard_proto_pb2, 'ResRoleGL')()
    
    if hash == StringHash.calculate_hash('ResChat'):
        return getattr(guard_proto_pb2, 'ResChat')()
    
    if hash == StringHash.calculate_hash('ResRoleRelationAddition'):
        return getattr(guard_proto_pb2, 'ResRoleRelationAddition')()
    
    if hash == StringHash.calculate_hash('ResRoleRelationSubtraction'):
        return getattr(guard_proto_pb2, 'ResRoleRelationSubtraction')()
    
    if hash == StringHash.calculate_hash('ResChipNumInfo'):
        return getattr(guard_proto_pb2, 'ResChipNumInfo')()
    
    if hash == StringHash.calculate_hash('ResEmblemSingleRequest'):
        return getattr(guard_proto_pb2, 'ResEmblemSingleRequest')()
    
    if hash == StringHash.calculate_hash('ResEmblem'):
        return getattr(guard_proto_pb2, 'ResEmblem')()
    
    if hash == StringHash.calculate_hash('ResStringArrayInfo'):
        return getattr(guard_proto_pb2, 'ResStringArrayInfo')()
    
    if hash == StringHash.calculate_hash('ResMonsterGL'):
        return getattr(guard_proto_pb2, 'ResMonsterGL')()
    
    if hash == StringHash.calculate_hash('ResPreMonster'):
        return getattr(guard_proto_pb2, 'ResPreMonster')()
    
    if hash == StringHash.calculate_hash('ResGroupMonster'):
        return getattr(guard_proto_pb2, 'ResGroupMonster')()
    
    if hash == StringHash.calculate_hash('ResMonsterLevel'):
        return getattr(guard_proto_pb2, 'ResMonsterLevel')()
    
    if hash == StringHash.calculate_hash('ResMonsterGroupLevel'):
        return getattr(guard_proto_pb2, 'ResMonsterGroupLevel')()
    
    if hash == StringHash.calculate_hash('ResGainSkill'):
        return getattr(guard_proto_pb2, 'ResGainSkill')()
    
    if hash == StringHash.calculate_hash('ResRoleLevelGrowUpAttr'):
        return getattr(guard_proto_pb2, 'ResRoleLevelGrowUpAttr')()
    
    if hash == StringHash.calculate_hash('ResRoleLevel'):
        return getattr(guard_proto_pb2, 'ResRoleLevel')()
    
    if hash == StringHash.calculate_hash('ResBuildingGL'):
        return getattr(guard_proto_pb2, 'ResBuildingGL')()
    
    if hash == StringHash.calculate_hash('ResLevelCost'):
        return getattr(guard_proto_pb2, 'ResLevelCost')()
    
    if hash == StringHash.calculate_hash('ResUnlockBuilding'):
        return getattr(guard_proto_pb2, 'ResUnlockBuilding')()
    
    if hash == StringHash.calculate_hash('ResBuildingLevel'):
        return getattr(guard_proto_pb2, 'ResBuildingLevel')()
    
    if hash == StringHash.calculate_hash('ResHeroTowerLevel'):
        return getattr(guard_proto_pb2, 'ResHeroTowerLevel')()
    
    if hash == StringHash.calculate_hash('ResIslandProduct'):
        return getattr(guard_proto_pb2, 'ResIslandProduct')()
    
    if hash == StringHash.calculate_hash('ResIslandLevel'):
        return getattr(guard_proto_pb2, 'ResIslandLevel')()
    
    if hash == StringHash.calculate_hash('ResResourceStoreLevel'):
        return getattr(guard_proto_pb2, 'ResResourceStoreLevel')()
    
    if hash == StringHash.calculate_hash('ResLevelArr'):
        return getattr(guard_proto_pb2, 'ResLevelArr')()
    
    if hash == StringHash.calculate_hash('ResInitHero'):
        return getattr(guard_proto_pb2, 'ResInitHero')()
    
    if hash == StringHash.calculate_hash('ResInitSlot'):
        return getattr(guard_proto_pb2, 'ResInitSlot')()
    
    if hash == StringHash.calculate_hash('ResOverHitProduction'):
        return getattr(guard_proto_pb2, 'ResOverHitProduction')()
    
    if hash == StringHash.calculate_hash('ResInitMonster'):
        return getattr(guard_proto_pb2, 'ResInitMonster')()
    
    if hash == StringHash.calculate_hash('ResInitUnlockDun'):
        return getattr(guard_proto_pb2, 'ResInitUnlockDun')()
    
    if hash == StringHash.calculate_hash('ResUnlockTrainSlot'):
        return getattr(guard_proto_pb2, 'ResUnlockTrainSlot')()
    
    if hash == StringHash.calculate_hash('ResInitBuildingInfo'):
        return getattr(guard_proto_pb2, 'ResInitBuildingInfo')()
    
    if hash == StringHash.calculate_hash('ResBuyWipeoutItemInfo'):
        return getattr(guard_proto_pb2, 'ResBuyWipeoutItemInfo')()
    
    if hash == StringHash.calculate_hash('ResPveUnlockInfo'):
        return getattr(guard_proto_pb2, 'ResPveUnlockInfo')()
    
    if hash == StringHash.calculate_hash('ResEndlessMonsterScore'):
        return getattr(guard_proto_pb2, 'ResEndlessMonsterScore')()
    
    if hash == StringHash.calculate_hash('ResGamePlayModeDamageRate'):
        return getattr(guard_proto_pb2, 'ResGamePlayModeDamageRate')()
    
    if hash == StringHash.calculate_hash('ResReward'):
        return getattr(guard_proto_pb2, 'ResReward')()
    
    if hash == StringHash.calculate_hash('ResMiscInfo'):
        return getattr(guard_proto_pb2, 'ResMiscInfo')()
    
    if hash == StringHash.calculate_hash('ResHeroEvaluate'):
        return getattr(guard_proto_pb2, 'ResHeroEvaluate')()
    
    if hash == StringHash.calculate_hash('ResGangMiscInfo'):
        return getattr(guard_proto_pb2, 'ResGangMiscInfo')()
    
    if hash == StringHash.calculate_hash('ResGangLevelInfo'):
        return getattr(guard_proto_pb2, 'ResGangLevelInfo')()
    
    if hash == StringHash.calculate_hash('ResGangBattleTime'):
        return getattr(guard_proto_pb2, 'ResGangBattleTime')()
    
    if hash == StringHash.calculate_hash('ResGangBattleReward'):
        return getattr(guard_proto_pb2, 'ResGangBattleReward')()
    
    if hash == StringHash.calculate_hash('ResRobotBuild'):
        return getattr(guard_proto_pb2, 'ResRobotBuild')()
    
    if hash == StringHash.calculate_hash('ResPvpRobot'):
        return getattr(guard_proto_pb2, 'ResPvpRobot')()
    
    if hash == StringHash.calculate_hash('ResPvpSerchInfo'):
        return getattr(guard_proto_pb2, 'ResPvpSerchInfo')()
    
    if hash == StringHash.calculate_hash('ResPvpMisc'):
        return getattr(guard_proto_pb2, 'ResPvpMisc')()
    
    if hash == StringHash.calculate_hash('ResPvpSearchSect'):
        return getattr(guard_proto_pb2, 'ResPvpSearchSect')()
    
    if hash == StringHash.calculate_hash('ResStealBattlePrizeDraw'):
        return getattr(guard_proto_pb2, 'ResStealBattlePrizeDraw')()
    
    if hash == StringHash.calculate_hash('ResDunLimit'):
        return getattr(guard_proto_pb2, 'ResDunLimit')()
    
    if hash == StringHash.calculate_hash('ResDunEvaluate'):
        return getattr(guard_proto_pb2, 'ResDunEvaluate')()
    
    if hash == StringHash.calculate_hash('ResReliveCost'):
        return getattr(guard_proto_pb2, 'ResReliveCost')()
    
    if hash == StringHash.calculate_hash('ResPosInfo'):
        return getattr(guard_proto_pb2, 'ResPosInfo')()
    
    if hash == StringHash.calculate_hash('ResDropIndex'):
        return getattr(guard_proto_pb2, 'ResDropIndex')()
    
    if hash == StringHash.calculate_hash('ResDungeonNeedItem'):
        return getattr(guard_proto_pb2, 'ResDungeonNeedItem')()
    
    if hash == StringHash.calculate_hash('ResEvaluate'):
        return getattr(guard_proto_pb2, 'ResEvaluate')()
    
    if hash == StringHash.calculate_hash('ResDungeonInfo'):
        return getattr(guard_proto_pb2, 'ResDungeonInfo')()
    
    if hash == StringHash.calculate_hash('ResDungeonReward'):
        return getattr(guard_proto_pb2, 'ResDungeonReward')()
    
    if hash == StringHash.calculate_hash('ResDungeonCity'):
        return getattr(guard_proto_pb2, 'ResDungeonCity')()
    
    if hash == StringHash.calculate_hash('ResCityReward'):
        return getattr(guard_proto_pb2, 'ResCityReward')()
    
    if hash == StringHash.calculate_hash('ResPracticeLimit'):
        return getattr(guard_proto_pb2, 'ResPracticeLimit')()
    
    if hash == StringHash.calculate_hash('ResPracticeTarget'):
        return getattr(guard_proto_pb2, 'ResPracticeTarget')()
    
    if hash == StringHash.calculate_hash('ResPracticeDun'):
        return getattr(guard_proto_pb2, 'ResPracticeDun')()
    
    if hash == StringHash.calculate_hash('ResTargetInfo'):
        return getattr(guard_proto_pb2, 'ResTargetInfo')()
    
    if hash == StringHash.calculate_hash('ResAchievement'):
        return getattr(guard_proto_pb2, 'ResAchievement')()
    
    if hash == StringHash.calculate_hash('ResDailyTask'):
        return getattr(guard_proto_pb2, 'ResDailyTask')()
    
    if hash == StringHash.calculate_hash('ResMainTask'):
        return getattr(guard_proto_pb2, 'ResMainTask')()
    
    if hash == StringHash.calculate_hash('ResColorMatchingParam'):
        return getattr(guard_proto_pb2, 'ResColorMatchingParam')()
    
    if hash == StringHash.calculate_hash('ResColorMatching'):
        return getattr(guard_proto_pb2, 'ResColorMatching')()
    
    if hash == StringHash.calculate_hash('ResOfflineBattleTitle'):
        return getattr(guard_proto_pb2, 'ResOfflineBattleTitle')()
    
    if hash == StringHash.calculate_hash('ResSceneInfo'):
        return getattr(guard_proto_pb2, 'ResSceneInfo')()
    
    if hash == StringHash.calculate_hash('ResDungeonMonster'):
        return getattr(guard_proto_pb2, 'ResDungeonMonster')()
    
    if hash == StringHash.calculate_hash('ResDungeonRoom'):
        return getattr(guard_proto_pb2, 'ResDungeonRoom')()
    
    if hash == StringHash.calculate_hash('ResConLoginReward'):
        return getattr(guard_proto_pb2, 'ResConLoginReward')()
    
    if hash == StringHash.calculate_hash('ResHeroDropInfo'):
        return getattr(guard_proto_pb2, 'ResHeroDropInfo')()
    
    if hash == StringHash.calculate_hash('ResScoreToResource'):
        return getattr(guard_proto_pb2, 'ResScoreToResource')()
    
    if hash == StringHash.calculate_hash('ResTimeToMoney'):
        return getattr(guard_proto_pb2, 'ResTimeToMoney')()
    
    if hash == StringHash.calculate_hash('ResSkillData'):
        return getattr(guard_proto_pb2, 'ResSkillData')()
    
    if hash == StringHash.calculate_hash('ResSkillTree'):
        return getattr(guard_proto_pb2, 'ResSkillTree')()
    
    if hash == StringHash.calculate_hash('ResRankValInfo'):
        return getattr(guard_proto_pb2, 'ResRankValInfo')()
    
    if hash == StringHash.calculate_hash('ResRankInfo'):
        return getattr(guard_proto_pb2, 'ResRankInfo')()
    
    if hash == StringHash.calculate_hash('ResRankBattleSectInfo'):
        return getattr(guard_proto_pb2, 'ResRankBattleSectInfo')()
    
    if hash == StringHash.calculate_hash('ResRankBattleInfo'):
        return getattr(guard_proto_pb2, 'ResRankBattleInfo')()
    
    if hash == StringHash.calculate_hash('ResRankBattleSect'):
        return getattr(guard_proto_pb2, 'ResRankBattleSect')()
    
    if hash == StringHash.calculate_hash('ST_REWARD_RES'):
        return getattr(guard_proto_pb2, 'ST_REWARD_RES')()
    
    if hash == StringHash.calculate_hash('ResRankBattleReward'):
        return getattr(guard_proto_pb2, 'ResRankBattleReward')()
    
    if hash == StringHash.calculate_hash('ResRankBattleRobotHeroInfo'):
        return getattr(guard_proto_pb2, 'ResRankBattleRobotHeroInfo')()
    
    if hash == StringHash.calculate_hash('ResRankBattleRobot'):
        return getattr(guard_proto_pb2, 'ResRankBattleRobot')()
    
    if hash == StringHash.calculate_hash('ResOnlineBattleRobotHeroInfo'):
        return getattr(guard_proto_pb2, 'ResOnlineBattleRobotHeroInfo')()
    
    if hash == StringHash.calculate_hash('ResOnlineBattleRobot'):
        return getattr(guard_proto_pb2, 'ResOnlineBattleRobot')()
    
    if hash == StringHash.calculate_hash('ResOnlineBattleShopBox'):
        return getattr(guard_proto_pb2, 'ResOnlineBattleShopBox')()
    
    if hash == StringHash.calculate_hash('ResGrowUpCondition'):
        return getattr(guard_proto_pb2, 'ResGrowUpCondition')()
    
    if hash == StringHash.calculate_hash('ResGrowUp'):
        return getattr(guard_proto_pb2, 'ResGrowUp')()
    
    if hash == StringHash.calculate_hash('ResPurchase'):
        return getattr(guard_proto_pb2, 'ResPurchase')()
    
    if hash == StringHash.calculate_hash('ResMonthCard'):
        return getattr(guard_proto_pb2, 'ResMonthCard')()
    
    if hash == StringHash.calculate_hash('ResBusinessRefresh'):
        return getattr(guard_proto_pb2, 'ResBusinessRefresh')()
    
    if hash == StringHash.calculate_hash('ResGroupBuy'):
        return getattr(guard_proto_pb2, 'ResGroupBuy')()
    
    if hash == StringHash.calculate_hash('ResGrowthFundReward'):
        return getattr(guard_proto_pb2, 'ResGrowthFundReward')()
    
    if hash == StringHash.calculate_hash('ResCumulateRecharge'):
        return getattr(guard_proto_pb2, 'ResCumulateRecharge')()
    
    if hash == StringHash.calculate_hash('ResSlotInfo'):
        return getattr(guard_proto_pb2, 'ResSlotInfo')()
    
    if hash == StringHash.calculate_hash('ResParamInfo'):
        return getattr(guard_proto_pb2, 'ResParamInfo')()
    
    if hash == StringHash.calculate_hash('ResGift'):
        return getattr(guard_proto_pb2, 'ResGift')()
    
    if hash == StringHash.calculate_hash('ResItem'):
        return getattr(guard_proto_pb2, 'ResItem')()
    
    if hash == StringHash.calculate_hash('ResEquipAttrRatio'):
        return getattr(guard_proto_pb2, 'ResEquipAttrRatio')()
    
    if hash == StringHash.calculate_hash('HeroAttr'):
        return getattr(guard_proto_pb2, 'HeroAttr')()
    
    if hash == StringHash.calculate_hash('ResEquipAttr'):
        return getattr(guard_proto_pb2, 'ResEquipAttr')()
    
    if hash == StringHash.calculate_hash('ResEquip'):
        return getattr(guard_proto_pb2, 'ResEquip')()
    
    if hash == StringHash.calculate_hash('ResMaterial'):
        return getattr(guard_proto_pb2, 'ResMaterial')()
    
    if hash == StringHash.calculate_hash('ResEquipGrowup'):
        return getattr(guard_proto_pb2, 'ResEquipGrowup')()
    
    if hash == StringHash.calculate_hash('ResEquipWakeupCondition'):
        return getattr(guard_proto_pb2, 'ResEquipWakeupCondition')()
    
    if hash == StringHash.calculate_hash('ResEquipGrowupCondition'):
        return getattr(guard_proto_pb2, 'ResEquipGrowupCondition')()
    
    if hash == StringHash.calculate_hash('ResEquipColor'):
        return getattr(guard_proto_pb2, 'ResEquipColor')()
    
    if hash == StringHash.calculate_hash('ResEquipColorLevelup'):
        return getattr(guard_proto_pb2, 'ResEquipColorLevelup')()
    
    if hash == StringHash.calculate_hash('ResEquipColorLevelAttr'):
        return getattr(guard_proto_pb2, 'ResEquipColorLevelAttr')()
    
    if hash == StringHash.calculate_hash('CSDT_EQUIPED_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_EQUIPED_INFO')()
    
    if hash == StringHash.calculate_hash('ResEquipRecommend'):
        return getattr(guard_proto_pb2, 'ResEquipRecommend')()
    
    if hash == StringHash.calculate_hash('ResDropElem'):
        return getattr(guard_proto_pb2, 'ResDropElem')()
    
    if hash == StringHash.calculate_hash('ResBaseDrop'):
        return getattr(guard_proto_pb2, 'ResBaseDrop')()
    
    if hash == StringHash.calculate_hash('ResRetrieveInfo'):
        return getattr(guard_proto_pb2, 'ResRetrieveInfo')()
    
    if hash == StringHash.calculate_hash('ResParam'):
        return getattr(guard_proto_pb2, 'ResParam')()
    
    if hash == StringHash.calculate_hash('ResUserTipData'):
        return getattr(guard_proto_pb2, 'ResUserTipData')()
    
    if hash == StringHash.calculate_hash('ResMailContent'):
        return getattr(guard_proto_pb2, 'ResMailContent')()
    
    if hash == StringHash.calculate_hash('ResPrizeDraw'):
        return getattr(guard_proto_pb2, 'ResPrizeDraw')()
    
    if hash == StringHash.calculate_hash('ResShopRefresh'):
        return getattr(guard_proto_pb2, 'ResShopRefresh')()
    
    if hash == StringHash.calculate_hash('ResBuyRate'):
        return getattr(guard_proto_pb2, 'ResBuyRate')()
    
    if hash == StringHash.calculate_hash('ResRefreshPrice'):
        return getattr(guard_proto_pb2, 'ResRefreshPrice')()
    
    if hash == StringHash.calculate_hash('ResShopGoods'):
        return getattr(guard_proto_pb2, 'ResShopGoods')()
    
    if hash == StringHash.calculate_hash('ResShopRandomGoodsInfo'):
        return getattr(guard_proto_pb2, 'ResShopRandomGoodsInfo')()
    
    if hash == StringHash.calculate_hash('ResShopRandom'):
        return getattr(guard_proto_pb2, 'ResShopRandom')()
    
    if hash == StringHash.calculate_hash('ResTutorialRule'):
        return getattr(guard_proto_pb2, 'ResTutorialRule')()
    
    if hash == StringHash.calculate_hash('ResBible'):
        return getattr(guard_proto_pb2, 'ResBible')()
    
    if hash == StringHash.calculate_hash('ResFriendRecommendInfo'):
        return getattr(guard_proto_pb2, 'ResFriendRecommendInfo')()
    
    if hash == StringHash.calculate_hash('ResFriendRecommendSect'):
        return getattr(guard_proto_pb2, 'ResFriendRecommendSect')()
    
    if hash == StringHash.calculate_hash('ResTutorialInfo'):
        return getattr(guard_proto_pb2, 'ResTutorialInfo')()
    
    if hash == StringHash.calculate_hash('ST_ACTION_DESC'):
        return getattr(guard_proto_pb2, 'ST_ACTION_DESC')()
    
    if hash == StringHash.calculate_hash('ST_SHOP_GOODS_INFO'):
        return getattr(guard_proto_pb2, 'ST_SHOP_GOODS_INFO')()
    
    if hash == StringHash.calculate_hash('ST_SHOP_GOODS'):
        return getattr(guard_proto_pb2, 'ST_SHOP_GOODS')()
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_STRONG_POINT_HERO_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_CITY_STRONG_POINT_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_STRONG_POINT'):
        return getattr(guard_proto_pb2, 'ST_GANG_CITY_STRONG_POINT')()
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_CITY_INFO')()
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY'):
        return getattr(guard_proto_pb2, 'ST_GANG_CITY')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_MEM_INFO')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_LIST'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_MEM_LIST')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_ATTACK_POINT_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_ATTACK_POINT_INFO')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_ATTACK_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_MEM_ATTACK_INFO')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_ATTACK_LIST'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_MEM_ATTACK_LIST')()
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_EMBLEM_INFO'):
        return getattr(guard_proto_pb2, 'ST_HERO_BATTLE_EMBLEM_INFO')()
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_EQUIP_INFO'):
        return getattr(guard_proto_pb2, 'ST_HERO_BATTLE_EQUIP_INFO')()
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'ST_HERO_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('ST_BATTLE_ROBOT_INFO'):
        return getattr(guard_proto_pb2, 'ST_BATTLE_ROBOT_INFO')()
    
    if hash == StringHash.calculate_hash('ST_BATTLE_HERO_ATTR_INFO'):
        return getattr(guard_proto_pb2, 'ST_BATTLE_HERO_ATTR_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_NOTIFY_MSG'):
        return getattr(guard_proto_pb2, 'SSDT_NOTIFY_MSG')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_ONLINE'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_ONLINE')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_QUEST'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_QUEST')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_PACKAGE'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_PACKAGE')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_SKILL'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_SKILL')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DUNGEON_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_DUNGEON_DATA')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_MISC_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_MISC_DATA')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_HERO'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_DATASET_HERO')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_BUILDING'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_DATASET_BUILDING')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_DUNDATA'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_DATASET_DUNDATA')()
    
    if hash == StringHash.calculate_hash('SSDT_NOTIFY_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_NOTIFY_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ATTR_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ATTR_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ITEM_EXTRA_INFO_RECOVER'):
        return getattr(guard_proto_pb2, 'DBBLOB_ITEM_EXTRA_INFO_RECOVER')()
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTPURCHASE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_FIRSTPURCHASE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MONTHCARD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_MONTHCARD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTPURCHASE_LIST'):
        return getattr(guard_proto_pb2, 'DBBLOB_FIRSTPURCHASE_LIST')()
    
    if hash == StringHash.calculate_hash('DBBLOB_EQUIP_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_EQUIP_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_EQUIP_TAB'):
        return getattr(guard_proto_pb2, 'DBBLOB_EQUIP_TAB')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_OBJ'):
        return getattr(guard_proto_pb2, 'DBBLOB_PACKAGE_OBJ')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_TAB'):
        return getattr(guard_proto_pb2, 'DBBLOB_PACKAGE_TAB')()
    
    if hash == StringHash.calculate_hash('DBBLOBHERO_EQUIPED_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOBHERO_EQUIPED_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PACKAGE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_TIME_VALUE'):
        return getattr(guard_proto_pb2, 'DBBLOB_TIME_VALUE')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PRACTICEDUN_QUEST'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_PRACTICEDUN_QUEST')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_ACHIEVEMENT'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_ACHIEVEMENT')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_FIRSTPURCHAE'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_FIRSTPURCHAE')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_DAILYTASK_ITEM'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_DAILYTASK_ITEM')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_DAILYTASK'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_DAILYTASK')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MAIN_TASK_ITEM'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_MAIN_TASK_ITEM')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MAIN_TASK'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_MAIN_TASK')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_SHOP'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_SHOP')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PRIZE_DRAW'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_PRIZE_DRAW')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_QUEST'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_QUEST')()
    
    if hash == StringHash.calculate_hash('DBBLOB_GIFT_ACCEPT_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_GIFT_ACCEPT_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_OFFLINE_BATTLE_DEFEATED_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_OFFLINE_BATTLE_DEFEATED_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_OFFLINE_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_OFFLINE_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ONLINE_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ONLINE_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DAILYQUEST_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DAILYQUEST_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_CHALLENGE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUNGEON_CHALLENGE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_UNLOCK_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUNGEON_UNLOCK_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_COUNT_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUNGEON_COUNT_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_DATA_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUNGEON_DATA_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_STAT_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_HERO_STAT_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_SKILL_INFO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_SKILL_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_EMBLEMINFO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_EMBLEMINFO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_INFO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_HERO_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_TRAININGSLOT_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_HERO_TRAININGSLOT_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_CHIP_INFO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_CHIP_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_HERO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_HERO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_HERO_GANGBATTLE_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_HERO_GANGBATTLE_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_RANK_BATTLE_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_RANK_BATTLE_DATA')()
    
    if hash == StringHash.calculate_hash('RANK_BATTLE_DEFENSE_DATA'):
        return getattr(guard_proto_pb2, 'RANK_BATTLE_DEFENSE_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MONSTER_STAT_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_MONSTER_STAT_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MONSTER_INFO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_MONSTER_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MONSTER_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_MONSTER_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUN_UNLOCK_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUN_UNLOCK_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVE_CHALLENGE_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVE_CHALLENGE_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_HERO'):
        return getattr(guard_proto_pb2, 'DBBLOB_TOWER_HERO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_TOWER_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_CHALLENGE_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_TOWER_CHALLENGE_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_SELFDUN_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_SELFDUN_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_SELF_DUN_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_SELF_DUN_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVPDUN_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVPDUN_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PVPDUN_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_PVPDUN_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ENDLESS_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ENDLESS_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ENDLESS_HERO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_ENDLESS_HERO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_DATASET'):
        return getattr(guard_proto_pb2, 'DBBLOB_HERO_DATASET')()
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_BASE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_BUILDING_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_RES_STORE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_RES_STORE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_DEFEND_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ISLAND_DEFEND_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_BORNINFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ISLAND_BORNINFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_GAININFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ISLAND_GAININFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_BUILDING_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVP_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_ISLAND_DEFEND_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVP_ISLAND_DEFEND_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVP_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_BUILD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVP_BUILD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_DATASET'):
        return getattr(guard_proto_pb2, 'DBBLOB_BUILDING_DATASET')()
    
    if hash == StringHash.calculate_hash('DBBLOB_CITY_REWARD'):
        return getattr(guard_proto_pb2, 'DBBLOB_CITY_REWARD')()
    
    if hash == StringHash.calculate_hash('DBBLOB_CITY_REWARD_SET'):
        return getattr(guard_proto_pb2, 'DBBLOB_CITY_REWARD_SET')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUN_DATASET'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUN_DATASET')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_BEHAVIOUR'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_BEHAVIOUR')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MONTH_CARD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_MONTH_CARD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_CONTINUE_LOGIN_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_CONTINUE_LOGIN_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_GROWTH_FUND_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_GROWTH_FUND_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_CUMULATE_RECHARGE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_CUMULATE_RECHARGE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_GROUP_BUY_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_GROUP_BUY_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTREWARD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_FIRSTREWARD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_BUSINESS_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_BUSINESS_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MISC_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_MISC_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_NOTIFY_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_NOTIFY_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_RANK_VALINFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_RANK_VALINFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_RANK_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_RANK_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOG_RANK_STAT_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOG_RANK_STAT_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DIRHERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DIRHERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_WORLD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DIR_WORLD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DIR_WORLD_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_WHOLE_GAMEOBJ'):
        return getattr(guard_proto_pb2, 'SSDT_WHOLE_GAMEOBJ')()
    
    if hash == StringHash.calculate_hash('ERR_RESPONSE'):
        return getattr(guard_proto_pb2, 'ERR_RESPONSE')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_BRIEF'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_BRIEF')()
    
    if hash == StringHash.calculate_hash('SUCC_ROLE_LIST_RES'):
        return getattr(guard_proto_pb2, 'SUCC_ROLE_LIST_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_WHOLE_ACCOUNT'):
        return getattr(guard_proto_pb2, 'SSDT_WHOLE_ACCOUNT')()
    
    if hash == StringHash.calculate_hash('SSPKG_SHUTDOWN_ZONESVR'):
        return getattr(guard_proto_pb2, 'SSPKG_SHUTDOWN_ZONESVR')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_SELFDUN_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_SELFDUN_DATA')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_PVEDUN_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_PVEDUN_DATA')()
    
    if hash == StringHash.calculate_hash('SSDT_ENDLESS_HERO_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_ENDLESS_HERO_DATA')()
    
    if hash == StringHash.calculate_hash('SSDT_PVPPLAYER_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PVPPLAYER_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_LOGIN_PVPINFO'):
        return getattr(guard_proto_pb2, 'SSDT_PLAYER_LOGIN_PVPINFO')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGIN_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_LOGIN_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGIN_RES'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_LOGIN_RES')()
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_VIEW_PLAYER_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_GANG_SVR'):
        return getattr(guard_proto_pb2, 'PKG_VIEW_PLAYER_INFO_RSP_FROM_GANG_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_BATTLE_SVR'):
        return getattr(guard_proto_pb2, 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_BATTLE_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_SVR'):
        return getattr(guard_proto_pb2, 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_ROLE_SVR'):
        return getattr(guard_proto_pb2, 'PKG_VIEW_PLAYER_INFO_RSP_FROM_ROLE_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGOUT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_LOGOUT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_REQ_PLAYER_LOGIN'):
        return getattr(guard_proto_pb2, 'PKG_REQ_PLAYER_LOGIN')()
    
    if hash == StringHash.calculate_hash('PKG_RES_PLAYER_LOGIN'):
        return getattr(guard_proto_pb2, 'PKG_RES_PLAYER_LOGIN')()
    
    if hash == StringHash.calculate_hash('PKG_REQ_PLAYER_LOGOUT'):
        return getattr(guard_proto_pb2, 'PKG_REQ_PLAYER_LOGOUT')()
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGIN_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ACCOUNT_LOGIN_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGIN_RES'):
        return getattr(guard_proto_pb2, 'PKG_ACCOUNT_LOGIN_RES')()
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGOUT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ACCOUNT_LOGOUT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_NAME'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_NAME')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_NAME_RES'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_NAME_RES')()
    
    if hash == StringHash.calculate_hash('PKG_VERIFY_NAME'):
        return getattr(guard_proto_pb2, 'PKG_VERIFY_NAME')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_WORLDROLE'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_WORLDROLE')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_PLATACCOUNT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_BIND_PLATACCOUNT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_PLATACCOUNT_RES'):
        return getattr(guard_proto_pb2, 'PKG_BIND_PLATACCOUNT_RES')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_CLUSTER_PLATACCOUNT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_BIND_CLUSTER_PLATACCOUNT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_CLUSTER_PLATACCOUNT_RES'):
        return getattr(guard_proto_pb2, 'PKG_BIND_CLUSTER_PLATACCOUNT_RES')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_ROLE_PLATACCOUNT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_BIND_ROLE_PLATACCOUNT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_ROLE_PLATACCOUNT_RES'):
        return getattr(guard_proto_pb2, 'PKG_BIND_ROLE_PLATACCOUNT_RES')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_ACCOUNTSVR_REQ'):
        return getattr(guard_proto_pb2, 'PKG_BIND_ACCOUNTSVR_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_ACCOUNTSVR_RES'):
        return getattr(guard_proto_pb2, 'PKG_BIND_ACCOUNTSVR_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GAMEOBJ_UPDATE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GAMEOBJ_UPDATE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GAMEOBJ_UPDATE_RSP'):
        return getattr(guard_proto_pb2, 'PKG_GAMEOBJ_UPDATE_RSP')()
    
    if hash == StringHash.calculate_hash('SSDT_CMD_PLAYER_SELFDUNINFO'):
        return getattr(guard_proto_pb2, 'SSDT_CMD_PLAYER_SELFDUNINFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ROOMMONSTER_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ROOMMONSTER_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ROOM_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ROOM_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_DUNGEON_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_DUNGEON_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_ENTERDUN_RES'):
        return getattr(guard_proto_pb2, 'SSDT_PLAYER_ENTERDUN_RES')()
    
    if hash == StringHash.calculate_hash('PKG_SELFDUN_ENTER_REQ'):
        return getattr(guard_proto_pb2, 'PKG_SELFDUN_ENTER_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SELFDUN_ENTER_RSP'):
        return getattr(guard_proto_pb2, 'PKG_SELFDUN_ENTER_RSP')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_ROLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_DEL_ROLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_ROLE_RES'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_DEL_ROLE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_KICK_PLAYER'):
        return getattr(guard_proto_pb2, 'PKG_KICK_PLAYER')()
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_INFO_RES'):
        return getattr(guard_proto_pb2, 'PKG_ACCOUNT_INFO_RES')()
    
    if hash == StringHash.calculate_hash('PKG_NEW_ROLE_CLUSTER'):
        return getattr(guard_proto_pb2, 'PKG_NEW_ROLE_CLUSTER')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_NAME'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_DEL_NAME')()
    
    if hash == StringHash.calculate_hash('PKG_DISP_PACKAGE'):
        return getattr(guard_proto_pb2, 'PKG_DISP_PACKAGE')()
    
    if hash == StringHash.calculate_hash('SSDT_PVP_ISLAND_DEFENSE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PVP_ISLAND_DEFENSE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PVP_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PVP_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PVP_STEAL_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PVP_STEAL_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_ROLE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ONLINE_BATTLE_ROOM_ROLE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ONLINE_BATTLE_ROOM_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME'):
        return getattr(guard_proto_pb2, 'SSDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME')()
    
    if hash == StringHash.calculate_hash('SSPKG_CREATE_ONLINE_BATTLE_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_CREATE_ONLINE_BATTLE_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_QUIT_ONLINE_BATTLE_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_QUIT_ONLINE_BATTLE_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_LIST_ONLINE_BATTLE_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_LIST_ONLINE_BATTLE_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_LIST_ONLINE_BATTLE_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_LIST_ONLINE_BATTLE_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_JOIN_ONLINE_BATTLE_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_JOIN_ONLINE_BATTLE_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_QUICK_MATCH_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_ONLINE_BATTLE_ROOM_QUICK_MATCH_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_KICK_GUEST_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_ONLINE_BATTLE_ROOM_KICK_GUEST_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_HEART_BEAT_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_ONLINE_BATTLE_ROOM_HEART_BEAT_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_BEGIN'):
        return getattr(guard_proto_pb2, 'SSPKG_ONLINE_BATTLE_BEGIN')()
    
    if hash == StringHash.calculate_hash('PKG_SEARCH_PVP_PLAYER_REQ'):
        return getattr(guard_proto_pb2, 'PKG_SEARCH_PVP_PLAYER_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SEARCH_PVP_PLAYER_RES'):
        return getattr(guard_proto_pb2, 'PKG_SEARCH_PVP_PLAYER_RES')()
    
    if hash == StringHash.calculate_hash('PKG_BALANCE_STEAL_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_BALANCE_STEAL_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BALANCE_STEAL_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'PKG_BALANCE_STEAL_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_STEAL_BATTLE_RESULT_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_STEAL_BATTLE_RESULT_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_SYSTEM_ACC'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_SYSTEM_ACC')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_SYSTEM_ACC_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_SYSTEM_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_REVENGE_ACC_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_REVENGE_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_ACC_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_BRIEF_MAIL_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_BRIEF_MAIL_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GET_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ROLELOGIN_GET_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GET_MAIL_RES'):
        return getattr(guard_proto_pb2, 'PKG_ROLELOGIN_GET_MAIL_RES')()
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGOUT_TO_MAILSVR'):
        return getattr(guard_proto_pb2, 'PKG_ROLELOGOUT_TO_MAILSVR')()
    
    if hash == StringHash.calculate_hash('PKG_SEND_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_SEND_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SEND_MAIL_RES'):
        return getattr(guard_proto_pb2, 'PKG_SEND_MAIL_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_CLR_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_CLR_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_OVERTIME_MAIL_CLR_REQ'):
        return getattr(guard_proto_pb2, 'PKG_OVERTIME_MAIL_CLR_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_OVERTIME_MAIL_CLR_RES'):
        return getattr(guard_proto_pb2, 'PKG_OVERTIME_MAIL_CLR_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_LIST_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_MAIL_LIST_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_LIST_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_MAIL_LIST_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_DETAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_MAIL_DETAIL_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_DETAIL_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_MAIL_DETAIL_RES')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_READ_REQ'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_READ_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_READ_RES'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_READ_RES')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_GET_ACC_REQ'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_GET_ACC_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_GET_ACC_RES'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_GET_ACC_RES')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_DELETE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_DELETE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_DELETE_RES'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_DELETE_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_GANGSIMPLE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANGSIMPLE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_SELF_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_SELF_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANGMEM_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANGMEM_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANGLIST_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANGLIST_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_APPLYLIST_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_APPLYLIST_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_APPLYLIST_DBINFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_APPLYLIST_DBINFO')()
    
    if hash == StringHash.calculate_hash('PKG_GANGLIST_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANGLIST_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANGLIST_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANGLIST_RES')()
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ROLELOGIN_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GANG_RES'):
        return getattr(guard_proto_pb2, 'PKG_ROLELOGIN_GANG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_NAME_RSP'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_GANG_NAME_RSP')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_RES'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_GANG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_UPDATE_BASIC_INFO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_UPDATE_BASIC_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_UPDATE_BASIC_INFO_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_UPDATE_BASIC_INFO_RES')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_RES'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_AUTOJOIN_RES'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_AUTOJOIN_RES')()
    
    if hash == StringHash.calculate_hash('PKG_QUIT_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_QUIT_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_QUIT_GANG_RES'):
        return getattr(guard_proto_pb2, 'PKG_QUIT_GANG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMLIST_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEMLIST_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMLIST_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEMLIST_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_DETAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_DETAIL_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_DETAIL_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_DETAIL_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_LIST_CHG_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEM_LIST_CHG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BASIC_INFO_CHG_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BASIC_INFO_CHG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_INFO_CHG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEM_INFO_CHG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMCHG_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEMCHG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPLYLIST_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_APPLYLIST_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPLYLIST_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_APPLYLIST_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_APPROVE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVE_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_APPROVE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVETOMEM_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_APPROVETOMEM_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_CHAT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_CHAT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_CHAT_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_CHAT_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_KICK_MEM_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_KICK_MEM_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_KICK_MEM_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_KICK_MEM_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_SET_ELDER_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_SET_ELDER_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_SET_ELDER_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_SET_ELDER_RES')()
    
    if hash == StringHash.calculate_hash('PKG_LOGOUT_UPDZONEID_REQ'):
        return getattr(guard_proto_pb2, 'PKG_LOGOUT_UPDZONEID_REQ')()
    
    if hash == StringHash.calculate_hash('MemZoneInfo'):
        return getattr(guard_proto_pb2, 'MemZoneInfo')()
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_PLAYER_HERO_CHG_TO_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_PLAYER_HERO_CHG_TO_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_CITY_STRONG_POINT_HERO_RES'):
        return getattr(guard_proto_pb2, 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_CITY_INFO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_CITY_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_CITY_INFO_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_CITY_INFO_RES')()
    
    if hash == StringHash.calculate_hash('PKG_BROAD_GANG_BATTTLE_STATE_TO_GANG_SVR'):
        return getattr(guard_proto_pb2, 'PKG_BROAD_GANG_BATTTLE_STATE_TO_GANG_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_REQ_TO_GANG_BATTLE'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_BATTLE_REQ_TO_GANG_BATTLE')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_RES_FROM_GANG_BATTLE'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_BATTLE_RES_FROM_GANG_BATTLE')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_STATE_BROAD'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BATTLE_STATE_BROAD')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_CITY_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_CITY_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_CITY_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_CITY_RES')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_ATTACK_MEM_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_ATTACK_MEM_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_TOTAL_BALANCE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BATTLE_TOTAL_BALANCE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BROAD_GANG_BATTTLE_POINT_CHG_TO_GANG_SVR'):
        return getattr(guard_proto_pb2, 'PKG_BROAD_GANG_BATTTLE_POINT_CHG_TO_GANG_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTTLE_POINT_BROAD'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BATTTLE_POINT_BROAD')()
    
    if hash == StringHash.calculate_hash('PKG_ENTER_GANG_BATTLE_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ENTER_GANG_BATTLE_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ENTER_GANG_BATTLE_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'PKG_ENTER_GANG_BATTLE_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_BALANCE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BATTLE_BALANCE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_BALANCE_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BATTLE_BALANCE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_STRONG_POINT_CHG_TO_GANGBATTLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_STRONG_POINT_CHG_TO_GANGBATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_CHG_TO_GANGBATTLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEM_CHG_TO_GANGBATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GANG_BROADCAST_DETAIL'):
        return getattr(guard_proto_pb2, 'GANG_BROADCAST_DETAIL')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BROADCAST'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BROADCAST')()
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_ATTACK_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DB_GANG_BATTLE_MEM_ATTACK_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_INFO'):
        return getattr(guard_proto_pb2, 'DB_GANG_BATTLE_MEM_INFO')()
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_LIST'):
        return getattr(guard_proto_pb2, 'DB_GANG_BATTLE_MEM_LIST')()
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_HISTORY_MEM_INFO'):
        return getattr(guard_proto_pb2, 'DB_GANG_BATTLE_HISTORY_MEM_INFO')()
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_HISTORY_MEM_LIST'):
        return getattr(guard_proto_pb2, 'DB_GANG_BATTLE_HISTORY_MEM_LIST')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_BATTLE_HISTORY_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_BATTLE_HISTORY_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_STATE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_STATE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_HISTORY_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_HISTORY_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_HISTORY_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_HISTORY_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_MEM_MAIL_USER_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_MEM_MAIL_USER_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_SEND_MEM_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_SEND_MEM_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_VAL'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_VAL')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_HERO_BRIEF'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_BATTLE_HERO_BRIEF')()
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_BASE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PLAYER_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_BASE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_DATA')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKLIST_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RANKLIST_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKLIST_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RANKLIST_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKPOS_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RANKPOS_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKPOS_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RANKPOS_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ACHIEVEMENT_SCORE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_ACHIEVEMENT_SCORE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_GANG_SCORE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_GANG_SCORE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_OFFLINE_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_OFFLINE_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_RANK_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_ONLINE_BATTLE_RANK_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_STEAL_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_STEAL_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ENDLESS_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_ENDLESS_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_ONE_UPDATE'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_ONE_UPDATE')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_UPDATE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_UPDATE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_UPDATE_INFO_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_UPDATE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANKDATA_REPORT_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANKDATA_REPORT_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GANG_RANKSTAT_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_GANG_RANKSTAT_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GANG_RANKSTAT_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_GANG_RANKSTAT_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ROLELOGIN_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_ROLELOGIN_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ROLELOGIN_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_ROLELOGIN_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_FIGHT_TARGET_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_BATTLE_FIGHT_TARGET_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ENTER_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_UNLOCK_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_UNLOCK_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_BALANCE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_BALANCE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_BALANCE_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_BALANCE_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_MAIL_USER_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_BATTLE_MAIL_USER_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_REWARD_EVERYDAY_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_REWARD_EVERYDAY_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_REWARD_PROMOTE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_REWARD_PROMOTE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_POS_DOWN_NOTIFY_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_POS_DOWN_NOTIFY_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_NOTIFY_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_NOTIFY_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_NOTIFY_DATA'):
        return getattr(guard_proto_pb2, 'PKG_NOTIFY_DATA')()
    
    if hash == StringHash.calculate_hash('PKG_NOTIFY_INFO'):
        return getattr(guard_proto_pb2, 'PKG_NOTIFY_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_GET_NOTIFY_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_NOTIFY_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_FINISH'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_FINISH')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_FINISH_DISP'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_FINISH_DISP')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQUEST_DELIVERY'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_REQUEST_DELIVERY')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_DONE'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_DONE')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_DISP_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_DISP_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_PURCHASEACTIVITY_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_PURCHASEACTIVITY_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_PURCHASEACTIVITY_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_PURCHASEACTIVITY_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RECORD_TRADE_SUCCESS'):
        return getattr(guard_proto_pb2, 'SSPKG_RECORD_TRADE_SUCCESS')()
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_CODE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GIFT_CODE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_UPDATE_ACCEPT_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GIFT_UPDATE_ACCEPT_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_CODE_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GIFT_CODE_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_LIST_RES'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_LIST_RES')()
    
    if hash == StringHash.calculate_hash('UINON_MAIL_ACC_INFO'):
        return getattr(guard_proto_pb2, 'UINON_MAIL_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BASEINFO'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_BASEINFO')()
    
    if hash == StringHash.calculate_hash('SSDT_RANKPOS_SEARCH_KEY'):
        return getattr(guard_proto_pb2, 'SSDT_RANKPOS_SEARCH_KEY')()
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_STAT_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_GAMESVR_STAT_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_ACC_LOGIN'):
        return getattr(guard_proto_pb2, 'SSPKG_GAMESVR_ACC_LOGIN')()
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_ACC_LOGOUT'):
        return getattr(guard_proto_pb2, 'SSPKG_GAMESVR_ACC_LOGOUT')()
    
    if hash == StringHash.calculate_hash('DB_PLAYER_SHOP_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DB_PLAYER_SHOP_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DB_PLAYER_SHOP_GOODS_INFO'):
        return getattr(guard_proto_pb2, 'DB_PLAYER_SHOP_GOODS_INFO')()
    
    if hash == StringHash.calculate_hash('DB_PlAYER_SHOP_INFO_BLOB'):
        return getattr(guard_proto_pb2, 'DB_PlAYER_SHOP_INFO_BLOB')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGIN_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_LOGIN_REQ')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGOUT_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_LOGOUT_REQ')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGIN_RES'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_LOGIN_RES')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_REFRESH_GOODS_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_REFRESH_GOODS_REQ')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_REFRESH_GOODS_RES'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_REFRESH_GOODS_RES')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_BUY_GOODS_CHECK_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_BUY_GOODS_CHECK_REQ')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PlAYER_BUY_GOODS_CHECK_RES'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PlAYER_BUY_GOODS_CHECK_RES')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_UPDATE_HERO_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_UPDATE_HERO_REQ')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_BUY_GOODS_FAILE_ROLLBACK_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_BUY_GOODS_FAILE_ROLLBACK_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_BASE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_FRIEND_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_APPLY_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_FRIEND_APPLY_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_RECOMMAND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_FRIEND_RECOMMAND_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PLAYER_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_OPT_FRIEND_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_OPT_FRIEND_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_OPT_FRIEND_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_OPT_FRIEND_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_LOGIN_FRIEND_SVR_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_LOGIN_FRIEND_SVR_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_LOGIN_FRIEND_SVR_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_LOGIN_FRIEND_SVR_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_INFO_CHG'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_INFO_CHG')()
    
    if hash == StringHash.calculate_hash('SSDT_RELATION_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_RELATION_INFO')()
    
    if hash == StringHash.calculate_hash('DB_FRIEND_BLOB'):
        return getattr(guard_proto_pb2, 'DB_FRIEND_BLOB')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_APPLYLIST_CHG'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_NOTIFY_APPLYLIST_CHG')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY')()
    
    if hash == StringHash.calculate_hash('PKG_FRIEND_DISP_INFO_CHG'):
        return getattr(guard_proto_pb2, 'PKG_FRIEND_DISP_INFO_CHG')()
    
    if hash == StringHash.calculate_hash('FRIEND_BROADCAST_DETAIL'):
        return getattr(guard_proto_pb2, 'FRIEND_BROADCAST_DETAIL')()
    
    if hash == StringHash.calculate_hash('PKG_FRIEND_BROADCAST'):
        return getattr(guard_proto_pb2, 'PKG_FRIEND_BROADCAST')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RECOMMAND_FRIEND_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RECOMMAND_FRIEND_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RECOMMAND_FRIEND_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RECOMMAND_FRIEND_RES')()
    
    return None

def get_pb_name(hash):
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_NAME_REQ'):
        return 'GM_GET_PLAYER_ACCOUNT_BY_NAME_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_NAME_RES'):
        return 'GM_GET_PLAYER_ACCOUNT_BY_NAME_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_UID_REQ'):
        return 'GM_GET_PLAYER_ACCOUNT_BY_UID_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_UID_RES'):
        return 'GM_GET_PLAYER_ACCOUNT_BY_UID_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_WORLD_INFO_REQ'):
        return 'GM_GET_PLAYER_WORLD_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PLAYER_WORLD_INFO'):
        return 'PLAYER_WORLD_INFO'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_WORLD_INFO_RES'):
        return 'GM_GET_PLAYER_WORLD_INFO_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BASE_INFO_REQ'):
        return 'GM_GET_PLAYER_BASE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('HERO_EMBLEM_INFO'):
        return 'HERO_EMBLEM_INFO'
    
    if hash == StringHash.calculate_hash('HERO_BASE_INFO'):
        return 'HERO_BASE_INFO'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BASE_INFO_RES'):
        return 'GM_GET_PLAYER_BASE_INFO_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_LIST_REQ'):
        return 'GM_GET_RANK_LIST_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_LIST_RES'):
        return 'GM_GET_RANK_LIST_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_POS_BY_UID_REQ'):
        return 'GM_GET_RANK_POS_BY_UID_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_POS_BY_UID_RES'):
        return 'GM_GET_RANK_POS_BY_UID_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_PVE_INFO_REQ'):
        return 'GM_GET_PLAYER_PVE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('GM_PLAYER_PVE_INFO'):
        return 'GM_PLAYER_PVE_INFO'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_PVE_INFO_RES'):
        return 'GM_GET_PLAYER_PVE_INFO_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BUILDING_AND_PACKAGE_REQ'):
        return 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BUILDING_AND_PACKAGE_RES'):
        return 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_TOTAL_RECHARGE_REQ'):
        return 'GM_GET_PLAYER_TOTAL_RECHARGE_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_TOTAL_RECHARGE_RES'):
        return 'GM_GET_PLAYER_TOTAL_RECHARGE_RES'
    
    if hash == StringHash.calculate_hash('GM_LOCK_PLAYER_REQ'):
        return 'GM_LOCK_PLAYER_REQ'
    
    if hash == StringHash.calculate_hash('GM_LOCK_PLAYER_RES'):
        return 'GM_LOCK_PLAYER_RES'
    
    if hash == StringHash.calculate_hash('GM_BAN_PLAYER_CHAT_REQ'):
        return 'GM_BAN_PLAYER_CHAT_REQ'
    
    if hash == StringHash.calculate_hash('GM_BAN_PLAYER_CHAT_RES'):
        return 'GM_BAN_PLAYER_CHAT_RES'
    
    if hash == StringHash.calculate_hash('GM_KICK_PLAYER_REQ'):
        return 'GM_KICK_PLAYER_REQ'
    
    if hash == StringHash.calculate_hash('GM_KICK_PLAYER_RES'):
        return 'GM_KICK_PLAYER_RES'
    
    if hash == StringHash.calculate_hash('GM_MAIL_ACC'):
        return 'GM_MAIL_ACC'
    
    if hash == StringHash.calculate_hash('GM_MAIL_INFO'):
        return 'GM_MAIL_INFO'
    
    if hash == StringHash.calculate_hash('GM_SEND_MAIL_REQ'):
        return 'GM_SEND_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('GM_SEND_MAIL_RES'):
        return 'GM_SEND_MAIL_RES'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_ATTR_REQ'):
        return 'GM_CHG_PLAYER_ATTR_REQ'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_ATTR_RES'):
        return 'GM_CHG_PLAYER_ATTR_RES'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_HERO_LEVEL_REQ'):
        return 'GM_CHG_PLAYER_HERO_LEVEL_REQ'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_HERO_LEVEL_RES'):
        return 'GM_CHG_PLAYER_HERO_LEVEL_RES'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_VIP_LEVEL_REQ'):
        return 'GM_CHG_PLAYER_VIP_LEVEL_REQ'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_VIP_LEVEL_RES'):
        return 'GM_CHG_PLAYER_VIP_LEVEL_RES'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_UNLOCK_DUNGEON_REQ'):
        return 'GM_CHG_PLAYER_UNLOCK_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_UNLOCK_DUNGEON_RES'):
        return 'GM_CHG_PLAYER_UNLOCK_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('GUARD_MSG_GAME_SVR'):
        return 'GUARD_MSG_GAME_SVR'
    
    if hash == StringHash.calculate_hash('ResServerLocalization'):
        return 'ResServerLocalization'
    
    if hash == StringHash.calculate_hash('ResDropIndexEx'):
        return 'ResDropIndexEx'
    
    if hash == StringHash.calculate_hash('ResResourceInfo'):
        return 'ResResourceInfo'
    
    if hash == StringHash.calculate_hash('ResPreRole'):
        return 'ResPreRole'
    
    if hash == StringHash.calculate_hash('ResInitSkill'):
        return 'ResInitSkill'
    
    if hash == StringHash.calculate_hash('ResNewRoleBuf'):
        return 'ResNewRoleBuf'
    
    if hash == StringHash.calculate_hash('ResCost'):
        return 'ResCost'
    
    if hash == StringHash.calculate_hash('ResRoleGL'):
        return 'ResRoleGL'
    
    if hash == StringHash.calculate_hash('ResChat'):
        return 'ResChat'
    
    if hash == StringHash.calculate_hash('ResRoleRelationAddition'):
        return 'ResRoleRelationAddition'
    
    if hash == StringHash.calculate_hash('ResRoleRelationSubtraction'):
        return 'ResRoleRelationSubtraction'
    
    if hash == StringHash.calculate_hash('ResChipNumInfo'):
        return 'ResChipNumInfo'
    
    if hash == StringHash.calculate_hash('ResEmblemSingleRequest'):
        return 'ResEmblemSingleRequest'
    
    if hash == StringHash.calculate_hash('ResEmblem'):
        return 'ResEmblem'
    
    if hash == StringHash.calculate_hash('ResStringArrayInfo'):
        return 'ResStringArrayInfo'
    
    if hash == StringHash.calculate_hash('ResMonsterGL'):
        return 'ResMonsterGL'
    
    if hash == StringHash.calculate_hash('ResPreMonster'):
        return 'ResPreMonster'
    
    if hash == StringHash.calculate_hash('ResGroupMonster'):
        return 'ResGroupMonster'
    
    if hash == StringHash.calculate_hash('ResMonsterLevel'):
        return 'ResMonsterLevel'
    
    if hash == StringHash.calculate_hash('ResMonsterGroupLevel'):
        return 'ResMonsterGroupLevel'
    
    if hash == StringHash.calculate_hash('ResGainSkill'):
        return 'ResGainSkill'
    
    if hash == StringHash.calculate_hash('ResRoleLevelGrowUpAttr'):
        return 'ResRoleLevelGrowUpAttr'
    
    if hash == StringHash.calculate_hash('ResRoleLevel'):
        return 'ResRoleLevel'
    
    if hash == StringHash.calculate_hash('ResBuildingGL'):
        return 'ResBuildingGL'
    
    if hash == StringHash.calculate_hash('ResLevelCost'):
        return 'ResLevelCost'
    
    if hash == StringHash.calculate_hash('ResUnlockBuilding'):
        return 'ResUnlockBuilding'
    
    if hash == StringHash.calculate_hash('ResBuildingLevel'):
        return 'ResBuildingLevel'
    
    if hash == StringHash.calculate_hash('ResHeroTowerLevel'):
        return 'ResHeroTowerLevel'
    
    if hash == StringHash.calculate_hash('ResIslandProduct'):
        return 'ResIslandProduct'
    
    if hash == StringHash.calculate_hash('ResIslandLevel'):
        return 'ResIslandLevel'
    
    if hash == StringHash.calculate_hash('ResResourceStoreLevel'):
        return 'ResResourceStoreLevel'
    
    if hash == StringHash.calculate_hash('ResLevelArr'):
        return 'ResLevelArr'
    
    if hash == StringHash.calculate_hash('ResInitHero'):
        return 'ResInitHero'
    
    if hash == StringHash.calculate_hash('ResInitSlot'):
        return 'ResInitSlot'
    
    if hash == StringHash.calculate_hash('ResOverHitProduction'):
        return 'ResOverHitProduction'
    
    if hash == StringHash.calculate_hash('ResInitMonster'):
        return 'ResInitMonster'
    
    if hash == StringHash.calculate_hash('ResInitUnlockDun'):
        return 'ResInitUnlockDun'
    
    if hash == StringHash.calculate_hash('ResUnlockTrainSlot'):
        return 'ResUnlockTrainSlot'
    
    if hash == StringHash.calculate_hash('ResInitBuildingInfo'):
        return 'ResInitBuildingInfo'
    
    if hash == StringHash.calculate_hash('ResBuyWipeoutItemInfo'):
        return 'ResBuyWipeoutItemInfo'
    
    if hash == StringHash.calculate_hash('ResPveUnlockInfo'):
        return 'ResPveUnlockInfo'
    
    if hash == StringHash.calculate_hash('ResEndlessMonsterScore'):
        return 'ResEndlessMonsterScore'
    
    if hash == StringHash.calculate_hash('ResGamePlayModeDamageRate'):
        return 'ResGamePlayModeDamageRate'
    
    if hash == StringHash.calculate_hash('ResReward'):
        return 'ResReward'
    
    if hash == StringHash.calculate_hash('ResMiscInfo'):
        return 'ResMiscInfo'
    
    if hash == StringHash.calculate_hash('ResHeroEvaluate'):
        return 'ResHeroEvaluate'
    
    if hash == StringHash.calculate_hash('ResGangMiscInfo'):
        return 'ResGangMiscInfo'
    
    if hash == StringHash.calculate_hash('ResGangLevelInfo'):
        return 'ResGangLevelInfo'
    
    if hash == StringHash.calculate_hash('ResGangBattleTime'):
        return 'ResGangBattleTime'
    
    if hash == StringHash.calculate_hash('ResGangBattleReward'):
        return 'ResGangBattleReward'
    
    if hash == StringHash.calculate_hash('ResRobotBuild'):
        return 'ResRobotBuild'
    
    if hash == StringHash.calculate_hash('ResPvpRobot'):
        return 'ResPvpRobot'
    
    if hash == StringHash.calculate_hash('ResPvpSerchInfo'):
        return 'ResPvpSerchInfo'
    
    if hash == StringHash.calculate_hash('ResPvpMisc'):
        return 'ResPvpMisc'
    
    if hash == StringHash.calculate_hash('ResPvpSearchSect'):
        return 'ResPvpSearchSect'
    
    if hash == StringHash.calculate_hash('ResStealBattlePrizeDraw'):
        return 'ResStealBattlePrizeDraw'
    
    if hash == StringHash.calculate_hash('ResDunLimit'):
        return 'ResDunLimit'
    
    if hash == StringHash.calculate_hash('ResDunEvaluate'):
        return 'ResDunEvaluate'
    
    if hash == StringHash.calculate_hash('ResReliveCost'):
        return 'ResReliveCost'
    
    if hash == StringHash.calculate_hash('ResPosInfo'):
        return 'ResPosInfo'
    
    if hash == StringHash.calculate_hash('ResDropIndex'):
        return 'ResDropIndex'
    
    if hash == StringHash.calculate_hash('ResDungeonNeedItem'):
        return 'ResDungeonNeedItem'
    
    if hash == StringHash.calculate_hash('ResEvaluate'):
        return 'ResEvaluate'
    
    if hash == StringHash.calculate_hash('ResDungeonInfo'):
        return 'ResDungeonInfo'
    
    if hash == StringHash.calculate_hash('ResDungeonReward'):
        return 'ResDungeonReward'
    
    if hash == StringHash.calculate_hash('ResDungeonCity'):
        return 'ResDungeonCity'
    
    if hash == StringHash.calculate_hash('ResCityReward'):
        return 'ResCityReward'
    
    if hash == StringHash.calculate_hash('ResPracticeLimit'):
        return 'ResPracticeLimit'
    
    if hash == StringHash.calculate_hash('ResPracticeTarget'):
        return 'ResPracticeTarget'
    
    if hash == StringHash.calculate_hash('ResPracticeDun'):
        return 'ResPracticeDun'
    
    if hash == StringHash.calculate_hash('ResTargetInfo'):
        return 'ResTargetInfo'
    
    if hash == StringHash.calculate_hash('ResAchievement'):
        return 'ResAchievement'
    
    if hash == StringHash.calculate_hash('ResDailyTask'):
        return 'ResDailyTask'
    
    if hash == StringHash.calculate_hash('ResMainTask'):
        return 'ResMainTask'
    
    if hash == StringHash.calculate_hash('ResColorMatchingParam'):
        return 'ResColorMatchingParam'
    
    if hash == StringHash.calculate_hash('ResColorMatching'):
        return 'ResColorMatching'
    
    if hash == StringHash.calculate_hash('ResOfflineBattleTitle'):
        return 'ResOfflineBattleTitle'
    
    if hash == StringHash.calculate_hash('ResSceneInfo'):
        return 'ResSceneInfo'
    
    if hash == StringHash.calculate_hash('ResDungeonMonster'):
        return 'ResDungeonMonster'
    
    if hash == StringHash.calculate_hash('ResDungeonRoom'):
        return 'ResDungeonRoom'
    
    if hash == StringHash.calculate_hash('ResConLoginReward'):
        return 'ResConLoginReward'
    
    if hash == StringHash.calculate_hash('ResHeroDropInfo'):
        return 'ResHeroDropInfo'
    
    if hash == StringHash.calculate_hash('ResScoreToResource'):
        return 'ResScoreToResource'
    
    if hash == StringHash.calculate_hash('ResTimeToMoney'):
        return 'ResTimeToMoney'
    
    if hash == StringHash.calculate_hash('ResSkillData'):
        return 'ResSkillData'
    
    if hash == StringHash.calculate_hash('ResSkillTree'):
        return 'ResSkillTree'
    
    if hash == StringHash.calculate_hash('ResRankValInfo'):
        return 'ResRankValInfo'
    
    if hash == StringHash.calculate_hash('ResRankInfo'):
        return 'ResRankInfo'
    
    if hash == StringHash.calculate_hash('ResRankBattleSectInfo'):
        return 'ResRankBattleSectInfo'
    
    if hash == StringHash.calculate_hash('ResRankBattleInfo'):
        return 'ResRankBattleInfo'
    
    if hash == StringHash.calculate_hash('ResRankBattleSect'):
        return 'ResRankBattleSect'
    
    if hash == StringHash.calculate_hash('ST_REWARD_RES'):
        return 'ST_REWARD_RES'
    
    if hash == StringHash.calculate_hash('ResRankBattleReward'):
        return 'ResRankBattleReward'
    
    if hash == StringHash.calculate_hash('ResRankBattleRobotHeroInfo'):
        return 'ResRankBattleRobotHeroInfo'
    
    if hash == StringHash.calculate_hash('ResRankBattleRobot'):
        return 'ResRankBattleRobot'
    
    if hash == StringHash.calculate_hash('ResOnlineBattleRobotHeroInfo'):
        return 'ResOnlineBattleRobotHeroInfo'
    
    if hash == StringHash.calculate_hash('ResOnlineBattleRobot'):
        return 'ResOnlineBattleRobot'
    
    if hash == StringHash.calculate_hash('ResOnlineBattleShopBox'):
        return 'ResOnlineBattleShopBox'
    
    if hash == StringHash.calculate_hash('ResGrowUpCondition'):
        return 'ResGrowUpCondition'
    
    if hash == StringHash.calculate_hash('ResGrowUp'):
        return 'ResGrowUp'
    
    if hash == StringHash.calculate_hash('ResPurchase'):
        return 'ResPurchase'
    
    if hash == StringHash.calculate_hash('ResMonthCard'):
        return 'ResMonthCard'
    
    if hash == StringHash.calculate_hash('ResBusinessRefresh'):
        return 'ResBusinessRefresh'
    
    if hash == StringHash.calculate_hash('ResGroupBuy'):
        return 'ResGroupBuy'
    
    if hash == StringHash.calculate_hash('ResGrowthFundReward'):
        return 'ResGrowthFundReward'
    
    if hash == StringHash.calculate_hash('ResCumulateRecharge'):
        return 'ResCumulateRecharge'
    
    if hash == StringHash.calculate_hash('ResSlotInfo'):
        return 'ResSlotInfo'
    
    if hash == StringHash.calculate_hash('ResParamInfo'):
        return 'ResParamInfo'
    
    if hash == StringHash.calculate_hash('ResGift'):
        return 'ResGift'
    
    if hash == StringHash.calculate_hash('ResItem'):
        return 'ResItem'
    
    if hash == StringHash.calculate_hash('ResEquipAttrRatio'):
        return 'ResEquipAttrRatio'
    
    if hash == StringHash.calculate_hash('HeroAttr'):
        return 'HeroAttr'
    
    if hash == StringHash.calculate_hash('ResEquipAttr'):
        return 'ResEquipAttr'
    
    if hash == StringHash.calculate_hash('ResEquip'):
        return 'ResEquip'
    
    if hash == StringHash.calculate_hash('ResMaterial'):
        return 'ResMaterial'
    
    if hash == StringHash.calculate_hash('ResEquipGrowup'):
        return 'ResEquipGrowup'
    
    if hash == StringHash.calculate_hash('ResEquipWakeupCondition'):
        return 'ResEquipWakeupCondition'
    
    if hash == StringHash.calculate_hash('ResEquipGrowupCondition'):
        return 'ResEquipGrowupCondition'
    
    if hash == StringHash.calculate_hash('ResEquipColor'):
        return 'ResEquipColor'
    
    if hash == StringHash.calculate_hash('ResEquipColorLevelup'):
        return 'ResEquipColorLevelup'
    
    if hash == StringHash.calculate_hash('ResEquipColorLevelAttr'):
        return 'ResEquipColorLevelAttr'
    
    if hash == StringHash.calculate_hash('CSDT_EQUIPED_INFO'):
        return 'CSDT_EQUIPED_INFO'
    
    if hash == StringHash.calculate_hash('ResEquipRecommend'):
        return 'ResEquipRecommend'
    
    if hash == StringHash.calculate_hash('ResDropElem'):
        return 'ResDropElem'
    
    if hash == StringHash.calculate_hash('ResBaseDrop'):
        return 'ResBaseDrop'
    
    if hash == StringHash.calculate_hash('ResRetrieveInfo'):
        return 'ResRetrieveInfo'
    
    if hash == StringHash.calculate_hash('ResParam'):
        return 'ResParam'
    
    if hash == StringHash.calculate_hash('ResUserTipData'):
        return 'ResUserTipData'
    
    if hash == StringHash.calculate_hash('ResMailContent'):
        return 'ResMailContent'
    
    if hash == StringHash.calculate_hash('ResPrizeDraw'):
        return 'ResPrizeDraw'
    
    if hash == StringHash.calculate_hash('ResShopRefresh'):
        return 'ResShopRefresh'
    
    if hash == StringHash.calculate_hash('ResBuyRate'):
        return 'ResBuyRate'
    
    if hash == StringHash.calculate_hash('ResRefreshPrice'):
        return 'ResRefreshPrice'
    
    if hash == StringHash.calculate_hash('ResShopGoods'):
        return 'ResShopGoods'
    
    if hash == StringHash.calculate_hash('ResShopRandomGoodsInfo'):
        return 'ResShopRandomGoodsInfo'
    
    if hash == StringHash.calculate_hash('ResShopRandom'):
        return 'ResShopRandom'
    
    if hash == StringHash.calculate_hash('ResTutorialRule'):
        return 'ResTutorialRule'
    
    if hash == StringHash.calculate_hash('ResBible'):
        return 'ResBible'
    
    if hash == StringHash.calculate_hash('ResFriendRecommendInfo'):
        return 'ResFriendRecommendInfo'
    
    if hash == StringHash.calculate_hash('ResFriendRecommendSect'):
        return 'ResFriendRecommendSect'
    
    if hash == StringHash.calculate_hash('ResTutorialInfo'):
        return 'ResTutorialInfo'
    
    if hash == StringHash.calculate_hash('ST_ACTION_DESC'):
        return 'ST_ACTION_DESC'
    
    if hash == StringHash.calculate_hash('ST_SHOP_GOODS_INFO'):
        return 'ST_SHOP_GOODS_INFO'
    
    if hash == StringHash.calculate_hash('ST_SHOP_GOODS'):
        return 'ST_SHOP_GOODS'
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_STRONG_POINT_HERO_INFO'):
        return 'ST_GANG_CITY_STRONG_POINT_HERO_INFO'
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_STRONG_POINT'):
        return 'ST_GANG_CITY_STRONG_POINT'
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_INFO'):
        return 'ST_GANG_CITY_INFO'
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY'):
        return 'ST_GANG_CITY'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_INFO'):
        return 'ST_GANG_BATTLE_MEM_INFO'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_LIST'):
        return 'ST_GANG_BATTLE_MEM_LIST'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_ATTACK_POINT_INFO'):
        return 'ST_GANG_BATTLE_ATTACK_POINT_INFO'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_ATTACK_INFO'):
        return 'ST_GANG_BATTLE_MEM_ATTACK_INFO'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_ATTACK_LIST'):
        return 'ST_GANG_BATTLE_MEM_ATTACK_LIST'
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_EMBLEM_INFO'):
        return 'ST_HERO_BATTLE_EMBLEM_INFO'
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_EQUIP_INFO'):
        return 'ST_HERO_BATTLE_EQUIP_INFO'
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_INFO'):
        return 'ST_HERO_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('ST_BATTLE_ROBOT_INFO'):
        return 'ST_BATTLE_ROBOT_INFO'
    
    if hash == StringHash.calculate_hash('ST_BATTLE_HERO_ATTR_INFO'):
        return 'ST_BATTLE_HERO_ATTR_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_NOTIFY_MSG'):
        return 'SSDT_NOTIFY_MSG'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_ONLINE'):
        return 'SSDT_ROLE_ONLINE'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_QUEST'):
        return 'SSDT_ROLE_QUEST'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_PACKAGE'):
        return 'SSDT_ROLE_PACKAGE'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_SKILL'):
        return 'SSDT_ROLE_SKILL'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DUNGEON_DATA'):
        return 'SSDT_ROLE_DUNGEON_DATA'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_MISC_DATA'):
        return 'SSDT_ROLE_MISC_DATA'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_HERO'):
        return 'SSDT_ROLE_DATASET_HERO'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_BUILDING'):
        return 'SSDT_ROLE_DATASET_BUILDING'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_DUNDATA'):
        return 'SSDT_ROLE_DATASET_DUNDATA'
    
    if hash == StringHash.calculate_hash('SSDT_NOTIFY_DATA'):
        return 'SSDT_NOTIFY_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_ATTR_INFO'):
        return 'DBBLOB_ATTR_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ITEM_EXTRA_INFO_RECOVER'):
        return 'DBBLOB_ITEM_EXTRA_INFO_RECOVER'
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTPURCHASE_INFO'):
        return 'DBBLOB_FIRSTPURCHASE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_MONTHCARD_INFO'):
        return 'DBBLOB_MONTHCARD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTPURCHASE_LIST'):
        return 'DBBLOB_FIRSTPURCHASE_LIST'
    
    if hash == StringHash.calculate_hash('DBBLOB_EQUIP_INFO'):
        return 'DBBLOB_EQUIP_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_EQUIP_TAB'):
        return 'DBBLOB_EQUIP_TAB'
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_OBJ'):
        return 'DBBLOB_PACKAGE_OBJ'
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_TAB'):
        return 'DBBLOB_PACKAGE_TAB'
    
    if hash == StringHash.calculate_hash('DBBLOBHERO_EQUIPED_INFO'):
        return 'DBBLOBHERO_EQUIPED_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_INFO'):
        return 'DBBLOB_PACKAGE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_TIME_VALUE'):
        return 'DBBLOB_TIME_VALUE'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PRACTICEDUN_QUEST'):
        return 'DBBLOB_PLAYER_PRACTICEDUN_QUEST'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_ACHIEVEMENT'):
        return 'DBBLOB_PLAYER_ACHIEVEMENT'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_FIRSTPURCHAE'):
        return 'DBBLOB_PLAYER_FIRSTPURCHAE'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_DAILYTASK_ITEM'):
        return 'DBBLOB_PLAYER_DAILYTASK_ITEM'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_DAILYTASK'):
        return 'DBBLOB_PLAYER_DAILYTASK'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MAIN_TASK_ITEM'):
        return 'DBBLOB_PLAYER_MAIN_TASK_ITEM'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MAIN_TASK'):
        return 'DBBLOB_PLAYER_MAIN_TASK'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_SHOP'):
        return 'DBBLOB_PLAYER_SHOP'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PRIZE_DRAW'):
        return 'DBBLOB_PLAYER_PRIZE_DRAW'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_QUEST'):
        return 'DBBLOB_PLAYER_QUEST'
    
    if hash == StringHash.calculate_hash('DBBLOB_GIFT_ACCEPT_INFO'):
        return 'DBBLOB_GIFT_ACCEPT_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_OFFLINE_BATTLE_DEFEATED_INFO'):
        return 'DBBLOB_OFFLINE_BATTLE_DEFEATED_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_OFFLINE_BATTLE_INFO'):
        return 'DBBLOB_OFFLINE_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ONLINE_BATTLE_INFO'):
        return 'DBBLOB_ONLINE_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DAILYQUEST_INFO'):
        return 'DBBLOB_DAILYQUEST_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_CHALLENGE_INFO'):
        return 'DBBLOB_DUNGEON_CHALLENGE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_UNLOCK_INFO'):
        return 'DBBLOB_DUNGEON_UNLOCK_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_COUNT_INFO'):
        return 'DBBLOB_DUNGEON_COUNT_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_DATA_INFO'):
        return 'DBBLOB_DUNGEON_DATA_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_STAT_DATA'):
        return 'DBBLOB_HERO_STAT_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_SKILL_INFO_DATA'):
        return 'DBBLOB_SKILL_INFO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_EMBLEMINFO_DATA'):
        return 'DBBLOB_EMBLEMINFO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_INFO_DATA'):
        return 'DBBLOB_HERO_INFO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_TRAININGSLOT_INFO'):
        return 'DBBLOB_HERO_TRAININGSLOT_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_CHIP_INFO_DATA'):
        return 'DBBLOB_CHIP_INFO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_HERO_DATA'):
        return 'DBBLOB_PLAYER_HERO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_HERO_GANGBATTLE_DATA'):
        return 'DBBLOB_PLAYER_HERO_GANGBATTLE_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_RANK_BATTLE_DATA'):
        return 'DBBLOB_PLAYER_RANK_BATTLE_DATA'
    
    if hash == StringHash.calculate_hash('RANK_BATTLE_DEFENSE_DATA'):
        return 'RANK_BATTLE_DEFENSE_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_MONSTER_STAT_DATA'):
        return 'DBBLOB_MONSTER_STAT_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_MONSTER_INFO_DATA'):
        return 'DBBLOB_MONSTER_INFO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MONSTER_DATA'):
        return 'DBBLOB_PLAYER_MONSTER_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUN_UNLOCK_DATA'):
        return 'DBBLOB_DUN_UNLOCK_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVE_CHALLENGE_DATA'):
        return 'DBBLOB_PVE_CHALLENGE_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_HERO'):
        return 'DBBLOB_TOWER_HERO'
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_HERO_INFO'):
        return 'DBBLOB_TOWER_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_CHALLENGE_DATA'):
        return 'DBBLOB_TOWER_CHALLENGE_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_SELFDUN_HERO_INFO'):
        return 'DBBLOB_SELFDUN_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_SELF_DUN_DATA'):
        return 'DBBLOB_SELF_DUN_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVPDUN_INFO'):
        return 'DBBLOB_PVPDUN_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PVPDUN_DATA'):
        return 'DBBLOB_PLAYER_PVPDUN_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_ENDLESS_HERO_INFO'):
        return 'DBBLOB_ENDLESS_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ENDLESS_HERO_DATA'):
        return 'DBBLOB_ENDLESS_HERO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_DATASET'):
        return 'DBBLOB_HERO_DATASET'
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_BASE_INFO'):
        return 'DBBLOB_BUILDING_BASE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_RES_STORE_INFO'):
        return 'DBBLOB_RES_STORE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_DEFEND_INFO'):
        return 'DBBLOB_ISLAND_DEFEND_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_BORNINFO'):
        return 'DBBLOB_ISLAND_BORNINFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_INFO'):
        return 'DBBLOB_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_GAININFO'):
        return 'DBBLOB_ISLAND_GAININFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_INFO'):
        return 'DBBLOB_BUILDING_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_HERO_INFO'):
        return 'DBBLOB_PVP_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_ISLAND_DEFEND_INFO'):
        return 'DBBLOB_PVP_ISLAND_DEFEND_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_ISLAND_INFO'):
        return 'DBBLOB_PVP_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_BUILD_INFO'):
        return 'DBBLOB_PVP_BUILD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_DATASET'):
        return 'DBBLOB_BUILDING_DATASET'
    
    if hash == StringHash.calculate_hash('DBBLOB_CITY_REWARD'):
        return 'DBBLOB_CITY_REWARD'
    
    if hash == StringHash.calculate_hash('DBBLOB_CITY_REWARD_SET'):
        return 'DBBLOB_CITY_REWARD_SET'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUN_DATASET'):
        return 'DBBLOB_DUN_DATASET'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_BEHAVIOUR'):
        return 'DBBLOB_PLAYER_BEHAVIOUR'
    
    if hash == StringHash.calculate_hash('DBBLOB_MONTH_CARD_INFO'):
        return 'DBBLOB_MONTH_CARD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_CONTINUE_LOGIN_INFO'):
        return 'DBBLOB_CONTINUE_LOGIN_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_GROWTH_FUND_INFO'):
        return 'DBBLOB_GROWTH_FUND_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_CUMULATE_RECHARGE_INFO'):
        return 'DBBLOB_CUMULATE_RECHARGE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_GROUP_BUY_INFO'):
        return 'DBBLOB_GROUP_BUY_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTREWARD_INFO'):
        return 'DBBLOB_FIRSTREWARD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_BUSINESS_INFO'):
        return 'DBBLOB_BUSINESS_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_MISC_DATA'):
        return 'DBBLOB_MISC_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_NOTIFY_DATA'):
        return 'DBBLOB_NOTIFY_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_RANK_VALINFO'):
        return 'DBBLOB_RANK_VALINFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_RANK_DATA'):
        return 'DBBLOB_RANK_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOG_RANK_STAT_INFO'):
        return 'DBBLOG_RANK_STAT_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DIRHERO_INFO'):
        return 'DBBLOB_DIRHERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_INFO'):
        return 'DBBLOB_WORLD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DIR_WORLD_INFO'):
        return 'DBBLOB_DIR_WORLD_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_WHOLE_GAMEOBJ'):
        return 'SSDT_WHOLE_GAMEOBJ'
    
    if hash == StringHash.calculate_hash('ERR_RESPONSE'):
        return 'ERR_RESPONSE'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_BRIEF'):
        return 'SSDT_ROLE_BRIEF'
    
    if hash == StringHash.calculate_hash('SUCC_ROLE_LIST_RES'):
        return 'SUCC_ROLE_LIST_RES'
    
    if hash == StringHash.calculate_hash('SSDT_WHOLE_ACCOUNT'):
        return 'SSDT_WHOLE_ACCOUNT'
    
    if hash == StringHash.calculate_hash('SSPKG_SHUTDOWN_ZONESVR'):
        return 'SSPKG_SHUTDOWN_ZONESVR'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_SELFDUN_DATA'):
        return 'SSDT_ROLE_SELFDUN_DATA'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_PVEDUN_DATA'):
        return 'SSDT_ROLE_PVEDUN_DATA'
    
    if hash == StringHash.calculate_hash('SSDT_ENDLESS_HERO_DATA'):
        return 'SSDT_ENDLESS_HERO_DATA'
    
    if hash == StringHash.calculate_hash('SSDT_PVPPLAYER_INFO'):
        return 'SSDT_PVPPLAYER_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_LOGIN_PVPINFO'):
        return 'SSDT_PLAYER_LOGIN_PVPINFO'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGIN_REQ'):
        return 'PKG_ROLE_LOGIN_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGIN_RES'):
        return 'PKG_ROLE_LOGIN_RES'
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_REQ'):
        return 'PKG_VIEW_PLAYER_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_GANG_SVR'):
        return 'PKG_VIEW_PLAYER_INFO_RSP_FROM_GANG_SVR'
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_BATTLE_SVR'):
        return 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_BATTLE_SVR'
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_SVR'):
        return 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_SVR'
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_ROLE_SVR'):
        return 'PKG_VIEW_PLAYER_INFO_RSP_FROM_ROLE_SVR'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGOUT_REQ'):
        return 'PKG_ROLE_LOGOUT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_REQ_PLAYER_LOGIN'):
        return 'PKG_REQ_PLAYER_LOGIN'
    
    if hash == StringHash.calculate_hash('PKG_RES_PLAYER_LOGIN'):
        return 'PKG_RES_PLAYER_LOGIN'
    
    if hash == StringHash.calculate_hash('PKG_REQ_PLAYER_LOGOUT'):
        return 'PKG_REQ_PLAYER_LOGOUT'
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGIN_REQ'):
        return 'PKG_ACCOUNT_LOGIN_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGIN_RES'):
        return 'PKG_ACCOUNT_LOGIN_RES'
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGOUT_REQ'):
        return 'PKG_ACCOUNT_LOGOUT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_NAME'):
        return 'PKG_CREATE_NAME'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_NAME_RES'):
        return 'PKG_CREATE_NAME_RES'
    
    if hash == StringHash.calculate_hash('PKG_VERIFY_NAME'):
        return 'PKG_VERIFY_NAME'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_WORLDROLE'):
        return 'PKG_CREATE_WORLDROLE'
    
    if hash == StringHash.calculate_hash('PKG_BIND_PLATACCOUNT_REQ'):
        return 'PKG_BIND_PLATACCOUNT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BIND_PLATACCOUNT_RES'):
        return 'PKG_BIND_PLATACCOUNT_RES'
    
    if hash == StringHash.calculate_hash('PKG_BIND_CLUSTER_PLATACCOUNT_REQ'):
        return 'PKG_BIND_CLUSTER_PLATACCOUNT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BIND_CLUSTER_PLATACCOUNT_RES'):
        return 'PKG_BIND_CLUSTER_PLATACCOUNT_RES'
    
    if hash == StringHash.calculate_hash('PKG_BIND_ROLE_PLATACCOUNT_REQ'):
        return 'PKG_BIND_ROLE_PLATACCOUNT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BIND_ROLE_PLATACCOUNT_RES'):
        return 'PKG_BIND_ROLE_PLATACCOUNT_RES'
    
    if hash == StringHash.calculate_hash('PKG_BIND_ACCOUNTSVR_REQ'):
        return 'PKG_BIND_ACCOUNTSVR_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BIND_ACCOUNTSVR_RES'):
        return 'PKG_BIND_ACCOUNTSVR_RES'
    
    if hash == StringHash.calculate_hash('PKG_GAMEOBJ_UPDATE_REQ'):
        return 'PKG_GAMEOBJ_UPDATE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GAMEOBJ_UPDATE_RSP'):
        return 'PKG_GAMEOBJ_UPDATE_RSP'
    
    if hash == StringHash.calculate_hash('SSDT_CMD_PLAYER_SELFDUNINFO'):
        return 'SSDT_CMD_PLAYER_SELFDUNINFO'
    
    if hash == StringHash.calculate_hash('SSDT_ROOMMONSTER_INFO'):
        return 'SSDT_ROOMMONSTER_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ROOM_INFO'):
        return 'SSDT_ROOM_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_DUNGEON_INFO'):
        return 'SSDT_DUNGEON_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_ENTERDUN_RES'):
        return 'SSDT_PLAYER_ENTERDUN_RES'
    
    if hash == StringHash.calculate_hash('PKG_SELFDUN_ENTER_REQ'):
        return 'PKG_SELFDUN_ENTER_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SELFDUN_ENTER_RSP'):
        return 'PKG_SELFDUN_ENTER_RSP'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_ROLE_REQ'):
        return 'PKG_ROLE_DEL_ROLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_ROLE_RES'):
        return 'PKG_ROLE_DEL_ROLE_RES'
    
    if hash == StringHash.calculate_hash('PKG_KICK_PLAYER'):
        return 'PKG_KICK_PLAYER'
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_INFO_RES'):
        return 'PKG_ACCOUNT_INFO_RES'
    
    if hash == StringHash.calculate_hash('PKG_NEW_ROLE_CLUSTER'):
        return 'PKG_NEW_ROLE_CLUSTER'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_NAME'):
        return 'PKG_ROLE_DEL_NAME'
    
    if hash == StringHash.calculate_hash('PKG_DISP_PACKAGE'):
        return 'PKG_DISP_PACKAGE'
    
    if hash == StringHash.calculate_hash('SSDT_PVP_ISLAND_DEFENSE_INFO'):
        return 'SSDT_PVP_ISLAND_DEFENSE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PVP_ISLAND_INFO'):
        return 'SSDT_PVP_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PVP_STEAL_ISLAND_INFO'):
        return 'SSDT_PVP_STEAL_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_ROLE_INFO'):
        return 'SSDT_ONLINE_BATTLE_ROOM_ROLE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO'):
        return 'SSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_INFO'):
        return 'SSDT_ONLINE_BATTLE_ROOM_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME'):
        return 'SSDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME'
    
    if hash == StringHash.calculate_hash('SSPKG_CREATE_ONLINE_BATTLE_ROOM_REQ'):
        return 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_CREATE_ONLINE_BATTLE_ROOM_RES'):
        return 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_QUIT_ONLINE_BATTLE_ROOM_REQ'):
        return 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_QUIT_ONLINE_BATTLE_ROOM_RES'):
        return 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_LIST_ONLINE_BATTLE_ROOM_REQ'):
        return 'SSPKG_LIST_ONLINE_BATTLE_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_LIST_ONLINE_BATTLE_ROOM_RES'):
        return 'SSPKG_LIST_ONLINE_BATTLE_ROOM_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_JOIN_ONLINE_BATTLE_ROOM_REQ'):
        return 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_JOIN_ONLINE_BATTLE_ROOM_RES'):
        return 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_ROOM_REQ'):
        return 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_QUICK_MATCH_REQ'):
        return 'SSPKG_ONLINE_BATTLE_ROOM_QUICK_MATCH_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_KICK_GUEST_REQ'):
        return 'SSPKG_ONLINE_BATTLE_ROOM_KICK_GUEST_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_HEART_BEAT_REQ'):
        return 'SSPKG_ONLINE_BATTLE_ROOM_HEART_BEAT_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_ROOM_RES'):
        return 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_BEGIN'):
        return 'SSPKG_ONLINE_BATTLE_BEGIN'
    
    if hash == StringHash.calculate_hash('PKG_SEARCH_PVP_PLAYER_REQ'):
        return 'PKG_SEARCH_PVP_PLAYER_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SEARCH_PVP_PLAYER_RES'):
        return 'PKG_SEARCH_PVP_PLAYER_RES'
    
    if hash == StringHash.calculate_hash('PKG_BALANCE_STEAL_BATTLE_REQ'):
        return 'PKG_BALANCE_STEAL_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BALANCE_STEAL_BATTLE_RES'):
        return 'PKG_BALANCE_STEAL_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('PKG_STEAL_BATTLE_RESULT_MAIL_REQ'):
        return 'PKG_STEAL_BATTLE_RESULT_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_SYSTEM_ACC'):
        return 'SSDT_MAIL_SYSTEM_ACC'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_SYSTEM_ACC_INFO'):
        return 'SSDT_MAIL_SYSTEM_ACC_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_REVENGE_ACC_INFO'):
        return 'SSDT_MAIL_REVENGE_ACC_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_ACC_INFO'):
        return 'SSDT_MAIL_ACC_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_INFO'):
        return 'SSDT_MAIL_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_BRIEF_MAIL_INFO'):
        return 'SSDT_BRIEF_MAIL_INFO'
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GET_MAIL_REQ'):
        return 'PKG_ROLELOGIN_GET_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GET_MAIL_RES'):
        return 'PKG_ROLELOGIN_GET_MAIL_RES'
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGOUT_TO_MAILSVR'):
        return 'PKG_ROLELOGOUT_TO_MAILSVR'
    
    if hash == StringHash.calculate_hash('PKG_SEND_MAIL_REQ'):
        return 'PKG_SEND_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SEND_MAIL_RES'):
        return 'PKG_SEND_MAIL_RES'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_CLR_INFO'):
        return 'SSDT_MAIL_CLR_INFO'
    
    if hash == StringHash.calculate_hash('PKG_OVERTIME_MAIL_CLR_REQ'):
        return 'PKG_OVERTIME_MAIL_CLR_REQ'
    
    if hash == StringHash.calculate_hash('PKG_OVERTIME_MAIL_CLR_RES'):
        return 'PKG_OVERTIME_MAIL_CLR_RES'
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_LIST_REQ'):
        return 'PKG_GET_MAIL_LIST_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_LIST_RES'):
        return 'PKG_GET_MAIL_LIST_RES'
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_DETAIL_REQ'):
        return 'PKG_GET_MAIL_DETAIL_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_DETAIL_RES'):
        return 'PKG_GET_MAIL_DETAIL_RES'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_READ_REQ'):
        return 'PKG_MAIL_READ_REQ'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_READ_RES'):
        return 'PKG_MAIL_READ_RES'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_GET_ACC_REQ'):
        return 'PKG_MAIL_GET_ACC_REQ'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_GET_ACC_RES'):
        return 'PKG_MAIL_GET_ACC_RES'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_DELETE_REQ'):
        return 'PKG_MAIL_DELETE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_DELETE_RES'):
        return 'PKG_MAIL_DELETE_RES'
    
    if hash == StringHash.calculate_hash('SSDT_GANGSIMPLE_INFO'):
        return 'SSDT_GANGSIMPLE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_SELF_INFO'):
        return 'SSDT_GANG_SELF_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANGMEM_INFO'):
        return 'SSDT_GANGMEM_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANGLIST_INFO'):
        return 'SSDT_GANGLIST_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_APPLYLIST_INFO'):
        return 'SSDT_GANG_APPLYLIST_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_APPLYLIST_DBINFO'):
        return 'SSDT_GANG_APPLYLIST_DBINFO'
    
    if hash == StringHash.calculate_hash('PKG_GANGLIST_REQ'):
        return 'PKG_GANGLIST_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANGLIST_RES'):
        return 'PKG_GANGLIST_RES'
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GANG_REQ'):
        return 'PKG_ROLELOGIN_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GANG_RES'):
        return 'PKG_ROLELOGIN_GANG_RES'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_REQ'):
        return 'PKG_CREATE_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_NAME_RSP'):
        return 'PKG_CREATE_GANG_NAME_RSP'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_RES'):
        return 'PKG_CREATE_GANG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_UPDATE_BASIC_INFO_REQ'):
        return 'PKG_GANG_UPDATE_BASIC_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_UPDATE_BASIC_INFO_RES'):
        return 'PKG_GANG_UPDATE_BASIC_INFO_RES'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_REQ'):
        return 'PKG_APPLY_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_RES'):
        return 'PKG_APPLY_GANG_RES'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_AUTOJOIN_RES'):
        return 'PKG_APPLY_GANG_AUTOJOIN_RES'
    
    if hash == StringHash.calculate_hash('PKG_QUIT_GANG_REQ'):
        return 'PKG_QUIT_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_QUIT_GANG_RES'):
        return 'PKG_QUIT_GANG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMLIST_REQ'):
        return 'PKG_GANG_MEMLIST_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMLIST_RES'):
        return 'PKG_GANG_MEMLIST_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_DETAIL_REQ'):
        return 'PKG_GANG_DETAIL_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_DETAIL_RES'):
        return 'PKG_GANG_DETAIL_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_LIST_CHG_RES'):
        return 'PKG_GANG_MEM_LIST_CHG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BASIC_INFO_CHG_RES'):
        return 'PKG_GANG_BASIC_INFO_CHG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_INFO_CHG_REQ'):
        return 'PKG_GANG_MEM_INFO_CHG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMCHG_RES'):
        return 'PKG_GANG_MEMCHG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPLYLIST_REQ'):
        return 'PKG_GANG_APPLYLIST_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPLYLIST_RES'):
        return 'PKG_GANG_APPLYLIST_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVE_REQ'):
        return 'PKG_GANG_APPROVE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVE_RES'):
        return 'PKG_GANG_APPROVE_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVETOMEM_RES'):
        return 'PKG_GANG_APPROVETOMEM_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_CHAT_REQ'):
        return 'PKG_GANG_CHAT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_CHAT_RES'):
        return 'PKG_GANG_CHAT_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_KICK_MEM_REQ'):
        return 'PKG_GANG_KICK_MEM_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_KICK_MEM_RES'):
        return 'PKG_GANG_KICK_MEM_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_SET_ELDER_REQ'):
        return 'PKG_GANG_SET_ELDER_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_SET_ELDER_RES'):
        return 'PKG_GANG_SET_ELDER_RES'
    
    if hash == StringHash.calculate_hash('PKG_LOGOUT_UPDZONEID_REQ'):
        return 'PKG_LOGOUT_UPDZONEID_REQ'
    
    if hash == StringHash.calculate_hash('MemZoneInfo'):
        return 'MemZoneInfo'
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ'):
        return 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES'):
        return 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('PKG_PLAYER_HERO_CHG_TO_GANG_REQ'):
        return 'PKG_PLAYER_HERO_CHG_TO_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ'):
        return 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_CITY_STRONG_POINT_HERO_RES'):
        return 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES'):
        return 'PKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_CITY_INFO_REQ'):
        return 'PKG_GET_GANG_CITY_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_CITY_INFO_RES'):
        return 'PKG_GET_GANG_CITY_INFO_RES'
    
    if hash == StringHash.calculate_hash('PKG_BROAD_GANG_BATTTLE_STATE_TO_GANG_SVR'):
        return 'PKG_BROAD_GANG_BATTTLE_STATE_TO_GANG_SVR'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_REQ'):
        return 'PKG_APPLY_GANG_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_REQ_TO_GANG_BATTLE'):
        return 'PKG_APPLY_GANG_BATTLE_REQ_TO_GANG_BATTLE'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_RES_FROM_GANG_BATTLE'):
        return 'PKG_APPLY_GANG_BATTLE_RES_FROM_GANG_BATTLE'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_RES'):
        return 'PKG_APPLY_GANG_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_STATE_BROAD'):
        return 'PKG_GANG_BATTLE_STATE_BROAD'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_CITY_REQ'):
        return 'PKG_GET_GANG_BATTLE_CITY_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_CITY_RES'):
        return 'PKG_GET_GANG_BATTLE_CITY_RES'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_ATTACK_MEM_INFO'):
        return 'ST_GANG_BATTLE_ATTACK_MEM_INFO'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_TOTAL_BALANCE_REQ'):
        return 'PKG_GANG_BATTLE_TOTAL_BALANCE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BROAD_GANG_BATTTLE_POINT_CHG_TO_GANG_SVR'):
        return 'PKG_BROAD_GANG_BATTTLE_POINT_CHG_TO_GANG_SVR'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTTLE_POINT_BROAD'):
        return 'PKG_GANG_BATTTLE_POINT_BROAD'
    
    if hash == StringHash.calculate_hash('PKG_ENTER_GANG_BATTLE_DUNGEON_REQ'):
        return 'PKG_ENTER_GANG_BATTLE_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ENTER_GANG_BATTLE_DUNGEON_RES'):
        return 'PKG_ENTER_GANG_BATTLE_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_BALANCE_REQ'):
        return 'PKG_GANG_BATTLE_BALANCE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_BALANCE_RES'):
        return 'PKG_GANG_BATTLE_BALANCE_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_STRONG_POINT_CHG_TO_GANGBATTLE_REQ'):
        return 'PKG_GANG_STRONG_POINT_CHG_TO_GANGBATTLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_CHG_TO_GANGBATTLE_REQ'):
        return 'PKG_GANG_MEM_CHG_TO_GANGBATTLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ'):
        return 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES'):
        return 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES'
    
    if hash == StringHash.calculate_hash('GANG_BROADCAST_DETAIL'):
        return 'GANG_BROADCAST_DETAIL'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BROADCAST'):
        return 'PKG_GANG_BROADCAST'
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_ATTACK_HERO_INFO'):
        return 'DB_GANG_BATTLE_MEM_ATTACK_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_INFO'):
        return 'DB_GANG_BATTLE_MEM_INFO'
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_LIST'):
        return 'DB_GANG_BATTLE_MEM_LIST'
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_HISTORY_MEM_INFO'):
        return 'DB_GANG_BATTLE_HISTORY_MEM_INFO'
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_HISTORY_MEM_LIST'):
        return 'DB_GANG_BATTLE_HISTORY_MEM_LIST'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_BATTLE_HISTORY_INFO'):
        return 'SSDT_GANG_BATTLE_HISTORY_INFO'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_REQ'):
        return 'PKG_GET_GANG_BATTLE_STATE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_RES'):
        return 'PKG_GET_GANG_BATTLE_STATE_RES'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_HISTORY_REQ'):
        return 'PKG_GET_GANG_BATTLE_HISTORY_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_HISTORY_RES'):
        return 'PKG_GET_GANG_BATTLE_HISTORY_RES'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_MEM_MAIL_USER_INFO'):
        return 'SSDT_GANG_MEM_MAIL_USER_INFO'
    
    if hash == StringHash.calculate_hash('PKG_GANG_SEND_MEM_MAIL_REQ'):
        return 'PKG_GANG_SEND_MEM_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_VAL'):
        return 'SSDT_RANK_VAL'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_HERO_BRIEF'):
        return 'SSDT_RANK_BATTLE_HERO_BRIEF'
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_BASE_INFO'):
        return 'SSDT_PLAYER_BASE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_BASE_INFO'):
        return 'SSDT_GANG_BASE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_DATA'):
        return 'SSDT_RANK_DATA'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKLIST_REQ'):
        return 'SSPKG_GET_RANKLIST_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKLIST_RES'):
        return 'SSPKG_GET_RANKLIST_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKPOS_REQ'):
        return 'SSPKG_GET_RANKPOS_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKPOS_RES'):
        return 'SSPKG_GET_RANKPOS_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ACHIEVEMENT_SCORE_REQ'):
        return 'SSPKG_UPDATE_ACHIEVEMENT_SCORE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_GANG_SCORE_REQ'):
        return 'SSPKG_UPDATE_GANG_SCORE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_OFFLINE_BATTLE_REQ'):
        return 'SSPKG_UPDATE_OFFLINE_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_RANK_REQ'):
        return 'SSPKG_UPDATE_ONLINE_BATTLE_RANK_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_STEAL_BATTLE_REQ'):
        return 'SSPKG_UPDATE_STEAL_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ENDLESS_REQ'):
        return 'SSPKG_UPDATE_ENDLESS_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_ONE_UPDATE'):
        return 'SSDT_RANK_ONE_UPDATE'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_UPDATE_INFO_REQ'):
        return 'SSPKG_RANK_UPDATE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_UPDATE_INFO_RES'):
        return 'SSPKG_RANK_UPDATE_INFO_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANKDATA_REPORT_REQ'):
        return 'SSPKG_RANKDATA_REPORT_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GANG_RANKSTAT_REQ'):
        return 'SSPKG_GET_GANG_RANKSTAT_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GANG_RANKSTAT_RES'):
        return 'SSPKG_GET_GANG_RANKSTAT_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ROLELOGIN_REQ'):
        return 'SSPKG_RANK_BATTLE_ROLELOGIN_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ROLELOGIN_RES'):
        return 'SSPKG_RANK_BATTLE_ROLELOGIN_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ'):
        return 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_FIGHT_TARGET_INFO'):
        return 'SSDT_RANK_BATTLE_FIGHT_TARGET_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES'):
        return 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ'):
        return 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ENTER_DUNGEON_RES'):
        return 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_UNLOCK_REQ'):
        return 'SSPKG_RANK_BATTLE_UNLOCK_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_BALANCE_REQ'):
        return 'SSPKG_RANK_BATTLE_BALANCE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_BALANCE_RES'):
        return 'SSPKG_RANK_BATTLE_BALANCE_RES'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_MAIL_USER_INFO'):
        return 'SSDT_RANK_BATTLE_MAIL_USER_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_REWARD_EVERYDAY_REQ'):
        return 'SSPKG_RANK_BATTLE_REWARD_EVERYDAY_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_REWARD_PROMOTE_REQ'):
        return 'SSPKG_RANK_BATTLE_REWARD_PROMOTE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_POS_DOWN_NOTIFY_REQ'):
        return 'SSPKG_RANK_BATTLE_POS_DOWN_NOTIFY_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_NOTIFY_REQ'):
        return 'PKG_GET_NOTIFY_REQ'
    
    if hash == StringHash.calculate_hash('PKG_NOTIFY_DATA'):
        return 'PKG_NOTIFY_DATA'
    
    if hash == StringHash.calculate_hash('PKG_NOTIFY_INFO'):
        return 'PKG_NOTIFY_INFO'
    
    if hash == StringHash.calculate_hash('PKG_GET_NOTIFY_RES'):
        return 'PKG_GET_NOTIFY_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_FINISH'):
        return 'SSPKG_PURCHASE_FINISH'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_FINISH_DISP'):
        return 'SSPKG_PURCHASE_FINISH_DISP'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQ'):
        return 'SSPKG_PURCHASE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQUEST_DELIVERY'):
        return 'SSPKG_PURCHASE_REQUEST_DELIVERY'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_DONE'):
        return 'SSPKG_PURCHASE_DONE'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_RES'):
        return 'SSPKG_PURCHASE_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_DISP_REQ'):
        return 'SSPKG_PURCHASE_DISP_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_PURCHASEACTIVITY_REQ'):
        return 'SSPKG_GET_PURCHASEACTIVITY_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_PURCHASEACTIVITY_RES'):
        return 'SSPKG_GET_PURCHASEACTIVITY_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RECORD_TRADE_SUCCESS'):
        return 'SSPKG_RECORD_TRADE_SUCCESS'
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_CODE_REQ'):
        return 'SSPKG_GIFT_CODE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_UPDATE_ACCEPT_REQ'):
        return 'SSPKG_GIFT_UPDATE_ACCEPT_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_CODE_RES'):
        return 'SSPKG_GIFT_CODE_RES'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_LIST_RES'):
        return 'SSDT_ROLE_LIST_RES'
    
    if hash == StringHash.calculate_hash('UINON_MAIL_ACC_INFO'):
        return 'UINON_MAIL_ACC_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BASEINFO'):
        return 'SSDT_RANK_BASEINFO'
    
    if hash == StringHash.calculate_hash('SSDT_RANKPOS_SEARCH_KEY'):
        return 'SSDT_RANKPOS_SEARCH_KEY'
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_STAT_INFO'):
        return 'SSPKG_GAMESVR_STAT_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_ACC_LOGIN'):
        return 'SSPKG_GAMESVR_ACC_LOGIN'
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_ACC_LOGOUT'):
        return 'SSPKG_GAMESVR_ACC_LOGOUT'
    
    if hash == StringHash.calculate_hash('DB_PLAYER_SHOP_HERO_INFO'):
        return 'DB_PLAYER_SHOP_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DB_PLAYER_SHOP_GOODS_INFO'):
        return 'DB_PLAYER_SHOP_GOODS_INFO'
    
    if hash == StringHash.calculate_hash('DB_PlAYER_SHOP_INFO_BLOB'):
        return 'DB_PlAYER_SHOP_INFO_BLOB'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGIN_REQ'):
        return 'SS_SHOP_PLAYER_LOGIN_REQ'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGOUT_REQ'):
        return 'SS_SHOP_PLAYER_LOGOUT_REQ'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGIN_RES'):
        return 'SS_SHOP_PLAYER_LOGIN_RES'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_REFRESH_GOODS_REQ'):
        return 'SS_SHOP_PLAYER_REFRESH_GOODS_REQ'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_REFRESH_GOODS_RES'):
        return 'SS_SHOP_PLAYER_REFRESH_GOODS_RES'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_BUY_GOODS_CHECK_REQ'):
        return 'SS_SHOP_PLAYER_BUY_GOODS_CHECK_REQ'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PlAYER_BUY_GOODS_CHECK_RES'):
        return 'SS_SHOP_PlAYER_BUY_GOODS_CHECK_RES'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_UPDATE_HERO_REQ'):
        return 'SS_SHOP_PLAYER_UPDATE_HERO_REQ'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_BUY_GOODS_FAILE_ROLLBACK_REQ'):
        return 'SS_SHOP_PLAYER_BUY_GOODS_FAILE_ROLLBACK_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_BASE_INFO'):
        return 'SSDT_FRIEND_BASE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_INFO'):
        return 'SSDT_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_APPLY_INFO'):
        return 'SSDT_FRIEND_APPLY_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_RECOMMAND_INFO'):
        return 'SSDT_FRIEND_RECOMMAND_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_FRIEND_INFO'):
        return 'SSDT_PLAYER_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_OPT_FRIEND_REQ'):
        return 'SSPKG_OPT_FRIEND_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_OPT_FRIEND_RES'):
        return 'SSPKG_OPT_FRIEND_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_LOGIN_FRIEND_SVR_REQ'):
        return 'SSPKG_LOGIN_FRIEND_SVR_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_LOGIN_FRIEND_SVR_RES'):
        return 'SSPKG_LOGIN_FRIEND_SVR_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_INFO_CHG'):
        return 'SSPKG_FRIEND_INFO_CHG'
    
    if hash == StringHash.calculate_hash('SSDT_RELATION_INFO'):
        return 'SSDT_RELATION_INFO'
    
    if hash == StringHash.calculate_hash('DB_FRIEND_BLOB'):
        return 'DB_FRIEND_BLOB'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_APPLYLIST_CHG'):
        return 'SSPKG_FRIEND_NOTIFY_APPLYLIST_CHG'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG'):
        return 'SSPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER'):
        return 'SSPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER'):
        return 'SSPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY'):
        return 'SSPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY'
    
    if hash == StringHash.calculate_hash('PKG_FRIEND_DISP_INFO_CHG'):
        return 'PKG_FRIEND_DISP_INFO_CHG'
    
    if hash == StringHash.calculate_hash('FRIEND_BROADCAST_DETAIL'):
        return 'FRIEND_BROADCAST_DETAIL'
    
    if hash == StringHash.calculate_hash('PKG_FRIEND_BROADCAST'):
        return 'PKG_FRIEND_BROADCAST'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RECOMMAND_FRIEND_REQ'):
        return 'SSPKG_GET_RECOMMAND_FRIEND_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RECOMMAND_FRIEND_RES'):
        return 'SSPKG_GET_RECOMMAND_FRIEND_RES'
    
    return None

def res(f, pb):
    p = pb.__class__.__name__
    if p == 'GM_GET_PLAYER_ACCOUNT_BY_NAME_REQ':
        attrs = ['role_name']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_ACCOUNT_BY_NAME_RES':
        attrs = ['role_name', 'uid', 'uin', 'result']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_ACCOUNT_BY_UID_REQ':
        attrs = ['uid']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_ACCOUNT_BY_UID_RES':
        attrs = ['uid', 'role_name', 'uin', 'result']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_WORLD_INFO_REQ':
        attrs = ['uin']
        return f(pb, attrs)
    
    if p == 'PLAYER_WORLD_INFO':
        attrs = ['uid', 'name', 'world_id', 'account_ban_time', 'chat_ban_time']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_WORLD_INFO_RES':
        attrs = ['uin', 'world_info', 'result']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_BASE_INFO_REQ':
        attrs = ['uid', 'world_id']
        return f(pb, attrs)
    
    if p == 'HERO_EMBLEM_INFO':
        attrs = ['emblem_id', 'emblem_lv', 'emblem_exp']
        return f(pb, attrs)
    
    if p == 'HERO_BASE_INFO':
        attrs = ['hero_id', 'level', 'exp', 'growup', 'emblem_info', 'skill']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_BASE_INFO_RES':
        attrs = ['result', 'uin', 'uid', 'world_id', 'name', 'is_online', 'create_time', 'last_login_time', 'last_logout_time', 'total_online_time', 'gold_cnt', 'gold_buy_times', 'crystal_cnt', 'crystal_buy_times', 'money_cnt', 'power_cnt', 'power_buy_times', 'skillpoint_cnt', 'skillpoint_buy_times', 'endless_floor', 'endless_score', 'pvp_score', 'rank_battle_score', 'growup_cnt', 'hero_info']
        return f(pb, attrs)
    
    if p == 'GM_GET_RANK_LIST_REQ':
        attrs = ['world_id', 'rank_id', 'start_pos', 'get_count']
        return f(pb, attrs)
    
    if p == 'GM_GET_RANK_LIST_RES':
        attrs = ['result', 'rank_id', 'total_count', 'rank_list']
        return f(pb, attrs)
    
    if p == 'GM_GET_RANK_POS_BY_UID_REQ':
        attrs = ['world_id', 'rank_id', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_GET_RANK_POS_BY_UID_RES':
        attrs = ['result', 'rank_pos', 'rank_info']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_PVE_INFO_REQ':
        attrs = ['world_id', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_PLAYER_PVE_INFO':
        attrs = ['dungeon_id', 'dun_level', 'stat', 'challenge_time', 'challenge_cnt', 'best_evaluation']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_PVE_INFO_RES':
        attrs = ['result', 'uid', 'pve_info', 'hero_endless_info']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_REQ':
        attrs = ['world_id', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_RES':
        attrs = ['result', 'uid', 'building_info']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_TOTAL_RECHARGE_REQ':
        attrs = ['world_id', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_TOTAL_RECHARGE_RES':
        attrs = ['result', 'uid', 'total_recharge']
        return f(pb, attrs)
    
    if p == 'GM_LOCK_PLAYER_REQ':
        attrs = ['uid', 'lock_time']
        return f(pb, attrs)
    
    if p == 'GM_LOCK_PLAYER_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_BAN_PLAYER_CHAT_REQ':
        attrs = ['uid', 'uin', 'world_id', 'ban_time']
        return f(pb, attrs)
    
    if p == 'GM_BAN_PLAYER_CHAT_RES':
        attrs = ['result', 'uid', 'uin', 'world_id', 'ban_end_time']
        return f(pb, attrs)
    
    if p == 'GM_KICK_PLAYER_REQ':
        attrs = ['uid', 'uin', 'world_id']
        return f(pb, attrs)
    
    if p == 'GM_KICK_PLAYER_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_MAIL_ACC':
        attrs = ['res_type', 'res_id', 'res_count']
        return f(pb, attrs)
    
    if p == 'GM_MAIL_INFO':
        attrs = ['mail_title', 'mail_content', 'mail_interval', 'mail_acc']
        return f(pb, attrs)
    
    if p == 'GM_SEND_MAIL_REQ':
        attrs = ['world_id', 'uid', 'mail_info']
        return f(pb, attrs)
    
    if p == 'GM_SEND_MAIL_RES':
        attrs = ['failed_uid']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_ATTR_REQ':
        attrs = ['world_id', 'uid', 'uin', 'res_type', 'res_id', 'chg_count']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_ATTR_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_HERO_LEVEL_REQ':
        attrs = ['world_id', 'uid', 'uin', 'hero_id', 'hero_lv', 'hero_exp']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_HERO_LEVEL_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_VIP_LEVEL_REQ':
        attrs = ['world_id', 'uid', 'total_recharge']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_VIP_LEVEL_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_UNLOCK_DUNGEON_REQ':
        attrs = ['world_id', 'uid', 'uin', 'unlock_til_dungeon_id']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_UNLOCK_DUNGEON_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GUARD_MSG_GAME_SVR':
        attrs = ['type', 'msg_data', 'client_pos', 'seq_no']
        return f(pb, attrs)
    
    if p == 'ResServerLocalization':
        attrs = ['id', 'text']
        return f(pb, attrs)
    
    if p == 'ResDropIndexEx':
        attrs = ['drop_id', 'drop_cnt']
        return f(pb, attrs)
    
    if p == 'ResResourceInfo':
        attrs = ['res_type', 'res_id', 'res_count']
        return f(pb, attrs)
    
    if p == 'ResPreRole':
        attrs = ['role_id', 'role_lv']
        return f(pb, attrs)
    
    if p == 'ResInitSkill':
        attrs = ['skill_id']
        return f(pb, attrs)
    
    if p == 'ResNewRoleBuf':
        attrs = ['cnt', 'atk', 'life']
        return f(pb, attrs)
    
    if p == 'ResCost':
        attrs = ['type', 'id', 'cnt']
        return f(pb, attrs)
    
    if p == 'ResRoleGL':
        attrs = ['hero_id', 'hero_desc', 'hero_name', 'res_name', 'protrait_name', 'audio_name', 'is_open', 'list_pos', 'buy_res_type', 'pre_dun_id', 'act_init_grow_up', 'act_init_level', 'unlock_emblem_ned_lv', 'unlock_emblem_hp_id', 'unlock_emblem_damage_id', 'init_skill_id', 'protrait_offset_x', 'protrait_offset_y', 'new_role_buf_cnt', 'buy_res_id', 'buy_res_count', 'buy_reward', 'unlock_cost', 'base_critical', 'base_critical_effect', 'base_critical_defence', 'base_critical_defence_effect', 'buy_res_discount']
        return f(pb, attrs)
    
    if p == 'ResChat':
        attrs = ['channel_id', 'cond_city_id', 'interval', 'cost_restype', 'cost_resid', 'cost_rescount']
        return f(pb, attrs)
    
    if p == 'ResRoleRelationAddition':
        attrs = ['receiver_role_id', 'receiver_role_lv', 'giver_role_id', 'giver_stamina_rate', 'add_stamina_value_limit', 'giver_strength_rate', 'add_strength_value_limit']
        return f(pb, attrs)
    
    if p == 'ResRoleRelationSubtraction':
        attrs = ['receiver_role_id', 'giver_role_id', 'dmg_addition_point', 'dmg_addition_rate']
        return f(pb, attrs)
    
    if p == 'ResChipNumInfo':
        attrs = ['chip_id', 'chip_cnt']
        return f(pb, attrs)
    
    if p == 'ResEmblemSingleRequest':
        attrs = ['lv_up_single_exp', 'lv_up_single_possiblity']
        return f(pb, attrs)
    
    if p == 'ResEmblem':
        attrs = ['weapon_id', 'weapon_lv', 'icon', 'name', 'attch_hero_id', 'lv_up_ned_hero_level', 'lv_up_ned_type', 'lv_up_ned_number', 'extra_type', 'extra_value', 'lv_up_ned_exp', 'levelup_single_request']
        return f(pb, attrs)
    
    if p == 'ResStringArrayInfo':
        attrs = ['info']
        return f(pb, attrs)
    
    if p == 'ResMonsterGL':
        attrs = ['id', 'role_name', 'name', 'type', 'render_type', 'relation_index', 'res_file_name', 'behit_add_sp', 'sp_ratio', 'radius', 'unlock_name_tag', 'unlock_desc_tag', 'shadow_scale', 'role_scale', 'color_matching_id', 'head_pic', 'mini_head_pic', 'emblem_pic', 'attri_pic', 'full_pic_in_map_tip', 'hu_name_pic', 'vu_name_pic', 'bust_pic', 'portrait_pic', 'ai_type', 'grow_up_head_pic', 'string', 'string', 'string', 'string', 'boss_audios', 'param', 'endless_mode_param', 'battle_logic', 'basehp', 'backup_color_matching_id', 'level_up_type', 'base_damage_rate', 'hostile', 'spec_tagert', 'add_superarmor', 'hero_damage_rate']
        return f(pb, attrs)
    
    if p == 'ResPreMonster':
        attrs = ['monster_id', 'monster_lv']
        return f(pb, attrs)
    
    if p == 'ResGroupMonster':
        attrs = ['monster_id', 'monster_cnt', 'pos_x', 'pos_y']
        return f(pb, attrs)
    
    if p == 'ResMonsterLevel':
        attrs = ['monster_level_up_type', 'monster_lv', 'max_hp', 'damage_type', 'strength', 'ex_endure_value', 'coin_drop_value', 'coin_drop_possibility', 'diamond_drop_value', 'diamond_drop_possibility']
        return f(pb, attrs)
    
    if p == 'ResMonsterGroupLevel':
        attrs = ['group_id', 'group_lv', 'group_monster_info']
        return f(pb, attrs)
    
    if p == 'ResGainSkill':
        attrs = ['gain_skill_id']
        return f(pb, attrs)
    
    if p == 'ResRoleLevelGrowUpAttr':
        attrs = ['max_hp', 'strength']
        return f(pb, attrs)
    
    if p == 'ResRoleLevel':
        attrs = ['role_id', 'role_lv', 'grow_up_attr', 'max_sp', 'lv_need_exp', 'lv_reward_power', 'burden']
        return f(pb, attrs)
    
    if p == 'ResBuildingGL':
        attrs = ['building_id', 'building_type', 'building_desc', 'building_name', 'res_name', 'audio_name', 'is_open', 'act_init_level', 'is_need_levelup', 'tips_priority', 'tips_tag']
        return f(pb, attrs)
    
    if p == 'ResLevelCost':
        attrs = ['cost_type', 'cost_cnt']
        return f(pb, attrs)
    
    if p == 'ResUnlockBuilding':
        attrs = ['building_id']
        return f(pb, attrs)
    
    if p == 'ResBuildingLevel':
        attrs = ['building_id', 'building_lv', 'building_pic', 'level_cost', 'level_cost_time', 'unlock_info']
        return f(pb, attrs)
    
    if p == 'ResHeroTowerLevel':
        attrs = ['building_id', 'building_lv', 'building_pic', 'level_cost', 'level_cost_time', 'max_hero_level', 'unlock_dun_id', 'level_priority']
        return f(pb, attrs)
    
    if p == 'ResIslandProduct':
        attrs = ['res_type', 'born_cnt', 'born_id', 'born_time', 'born_limit']
        return f(pb, attrs)
    
    if p == 'ResIslandLevel':
        attrs = ['island_id', 'island_lv', 'island_pic', 'level_cost', 'level_cost_time', 'product', 'unlock_dun_id', 'level_priority']
        return f(pb, attrs)
    
    if p == 'ResResourceStoreLevel':
        attrs = ['res_store_id', 'res_store_lv', 'res_store_pic', 'res_store_type', 'res_limit', 'recover_interval', 'level_cost', 'level_cost_time', 'unlock_dun_id', 'level_priority']
        return f(pb, attrs)
    
    if p == 'ResLevelArr':
        attrs = ['level', 'steal_battle_search_cost_type', 'steal_battle_search_cost_id', 'steal_battle_search_cost_count', 'gang_battle_reward_gold_target', 'gang_battle_reward_crystal_target', 'gang_battle_reward_gold_self', 'gang_battle_reward_crystal_self', 'monster_cnt']
        return f(pb, attrs)
    
    if p == 'ResInitHero':
        attrs = ['hero_id']
        return f(pb, attrs)
    
    if p == 'ResInitSlot':
        attrs = ['slot_id']
        return f(pb, attrs)
    
    if p == 'ResOverHitProduction':
        attrs = ['over_hit_phase', 'coin_production', 'diamond_production']
        return f(pb, attrs)
    
    if p == 'ResInitMonster':
        attrs = ['monster_grp_id', 'monster_grp_lv']
        return f(pb, attrs)
    
    if p == 'ResInitUnlockDun':
        attrs = ['dun_id']
        return f(pb, attrs)
    
    if p == 'ResUnlockTrainSlot':
        attrs = ['slot_id', 'cost_money']
        return f(pb, attrs)
    
    if p == 'ResInitBuildingInfo':
        attrs = ['building_id', 'building_lv']
        return f(pb, attrs)
    
    if p == 'ResBuyWipeoutItemInfo':
        attrs = ['item_count', 'item_price']
        return f(pb, attrs)
    
    if p == 'ResPveUnlockInfo':
        attrs = ['dunid', 'type', 'lv']
        return f(pb, attrs)
    
    if p == 'ResEndlessMonsterScore':
        attrs = ['score']
        return f(pb, attrs)
    
    if p == 'ResGamePlayModeDamageRate':
        attrs = ['game_play_mode', 'damage_rate']
        return f(pb, attrs)
    
    if p == 'ResReward':
        attrs = ['reward_type', 'reward_id', 'reward_value']
        return f(pb, attrs)
    
    if p == 'ResMiscInfo':
        attrs = ['player_max_level', 'monster_max_level', 'init_crystal', 'init_gold', 'init_money', 'init_slot_id', 'init_building_info', 'init_hero_id', 'init_unlock_dun_id', 'endless_limit', 'combo_max_time', 'over_hit_max_time', 'over_hit_max_hp_percent', 'over_hit_add_score_ratio', 'left_time_add_score_ratio', 'over_hit_production', 'create_gang_cost_gold', 'fighting_hprate', 'fighting_atk_rate', 'gang_battle_dun_id', 'gang_battle_round_time_limit', 'endless_chamber_size_factor', 'endless_boss_hp_recover_drop_ratio', 'endless_boss_hp_recover_drop_count', 'rank_battle_dungeon_id', 'rank_battle_round_time_limit', 'rank_battle_base_count', 'rank_battle_buy_count_base_cost', 'rank_battle_unlock_role_cnt', 'daily_reset_time', 'endless_room_cnt', 'steal_battle_money_res_dun_id', 'steal_battle_gold_res_dun_id', 'steal_battle_crystal_res_dun_id', 'steal_battle_exp_res_dun_id', 'endless_limit_cnt', 'endless_refresh_hour', 'endless_refresh_min', 'endless_refresh_sec', 'wipe_out_need_item_id', 'buy_wipe_out_item_info', 'goods_common_count', 'goods_special_count', 'damage_ratio_factor', 'hp_ratio_factor', 'skill_point_display_item_id', 'pve_unlock_info', 'league_battle_small_city_lv', 'league_battle_mid_city_lv', 'league_battle_big_city_lv', 'rank_battle_hero_hide_level1', 'rank_battle_hero_hide_level2', 'rank_battle_hero_hide_level3', 'power_refresh_hour', 'power_refresh_min', 'power_refresh_sec', 'rank_battle_count_refresh_hour', 'rank_battle_count_refresh_min', 'rank_battle_count_refresh_sec', 'shop_count_refresh_hour', 'shop_count_refresh_min', 'shop_count_refresh_sec', 'fail_power', 'money_confirm_threshold', 'endless_monster_type_score', 'gang_battle_small_city_score', 'gang_battle_moderate_city_score', 'gang_battle_big_city_score', 'elite_mode_chances', 'elite_count_refresh_hour', 'elite_count_refresh_min', 'elite_count_refresh_sec', 'assist_fight_times_limit', 'online_battle_dun_id', 're_sign_cost_type', 're_sign_cost_price', 'init_hero_main_task_unlock_dun_id', 'normal_elite_hp_rate', 'normal_elite_st_rate', 'normal_boss_hp_rate', 'normal_boss_st_rate', 'endless_elite_hp_rate', 'endless_elite_st_rate', 'endless_boss_hp_rate', 'endless_boss_st_rate', 'elite_buy_count_cost_type', 'elite_buy_count_cost_id', 'elite_buy_count_cost_count', 'elite_buy_max_count', 'offline_battle_dun_id', 'role_relation_unlock_level', 'rank_battle_goods_common_count', 'rank_battle_goods_special_count', 'online_battle_init_score', 'online_battle_times_perday', 'online_battle_score_calc_ratio_a', 'online_battle_score_calc_ratio_b', 'online_battle_search_score', 'online_battle_match_wait_seconds', 'online_battle_win_point_ratio', 'online_battle_loseer_win_point_ratio', 'endless_wipeout_price_per_floor', 'game_play_mode_damage_rate', 'first_reward_info', 'loading_tip_count', 'vip_goods_common_count', 'vip_goods_special_count', 'vip_draw_all_unlock_level', 'steal_battle_times_limit', 'friend_power_cnt', 'damage_float_up', 'damage_float_down', 'max_recv_power_times_one_day', 'ten_wipeout_viplimit', 'vip_shop_unlock_viplevel']
        return f(pb, attrs)
    
    if p == 'ResHeroEvaluate':
        attrs = ['main_level', 'sub_level', 'pvp_score_down', 'pvp_score_up']
        return f(pb, attrs)
    
    if p == 'ResGangMiscInfo':
        attrs = ['search_gang_list_low_bounder', 'search_gang_list_up_bounder', 'gang_score_calc_ratio_a', 'gang_score_calc_ratio_b', 'gang_battle_win_pre_ratio', 'gang_battle_lose_pre_ratio', 'gang_battle_draw_pre_ratio', 'gang_battle_auto_apply_limit_score']
        return f(pb, attrs)
    
    if p == 'ResGangLevelInfo':
        attrs = ['lv', 'lv_desc', 'lv_icon', 'low_score', 'high_score', 'gang_mem_max_count', 'gang_elder_max_count', 'small_city_strongpoint_num', 'moderate_city_strongpoint_num', 'big_city_strongpoint_num']
        return f(pb, attrs)
    
    if p == 'ResGangBattleTime':
        attrs = ['week', 'state']
        return f(pb, attrs)
    
    if p == 'ResGangBattleReward':
        attrs = ['lv', 'win_reward', 'lose_reward', 'draw_reward']
        return f(pb, attrs)
    
    if p == 'ResRobotBuild':
        attrs = ['res_type', 'cur_born_res', 'hero_id', 'hero_lv', 'hero_growup', 'hero_strength', 'hero_stamina', 'monster_id', 'monster_lv', 'trap_id', 'trap_lv']
        return f(pb, attrs)
    
    if p == 'ResPvpRobot':
        attrs = ['uid', 'name', 'max_fight_capacity', 'is_land_info']
        return f(pb, attrs)
    
    if p == 'ResPvpSerchInfo':
        attrs = ['low', 'high']
        return f(pb, attrs)
    
    if p == 'ResPvpMisc':
        attrs = ['steal_res_percent', 'broken_percent']
        return f(pb, attrs)
    
    if p == 'ResPvpSearchSect':
        attrs = ['fight_capacity_low', 'fight_capacity_high', 'pvp_serch_info']
        return f(pb, attrs)
    
    if p == 'ResStealBattlePrizeDraw':
        attrs = ['low_fight_power', 'high_fight_power', 'drop_id']
        return f(pb, attrs)
    
    if p == 'ResDunLimit':
        attrs = ['hero_id', 'hero_level']
        return f(pb, attrs)
    
    if p == 'ResDunEvaluate':
        attrs = ['dun_time', 'remain_hprate', 'max_combo']
        return f(pb, attrs)
    
    if p == 'ResReliveCost':
        attrs = ['relive_cnt', 'relive_cost']
        return f(pb, attrs)
    
    if p == 'ResPosInfo':
        attrs = ['pos_x', 'pos_y']
        return f(pb, attrs)
    
    if p == 'ResDropIndex':
        attrs = ['drop_index']
        return f(pb, attrs)
    
    if p == 'ResDungeonNeedItem':
        attrs = ['item_id', 'item_num']
        return f(pb, attrs)
    
    if p == 'ResEvaluate':
        attrs = ['parameter']
        return f(pb, attrs)
    
    if p == 'ResDungeonInfo':
        attrs = ['dungeon_id', 'dungeon_name', 'dungeon_type', 'mode', 'required_ability', 'is_refresh', 'cost_power', 'pre_dun_id', 'unlock_role_id', 'init_level', 'relive_limit', 'relive_cost', 'apperance', 'reward', 'dun_evaluate', 'first_drop_info', 'non_first_drop_info', 'wipe_out_drop_info', 'need_item', 'drop_display_info', 'evaluate_info', 'scene_name', 'bgm', 'is_elite_drop', 'drop_exp_limit', 'drop_exp_add', 'elite_drop_index', 'display_elite_drop_equip', 'new_role_buff_stamina', 'new_role_buff_strength']
        return f(pb, attrs)
    
    if p == 'ResDungeonReward':
        attrs = ['level', 'reward_info']
        return f(pb, attrs)
    
    if p == 'ResDungeonCity':
        attrs = ['city_id', 'mode', 'name_tag', 'pre_city_id', 'unlock_item_id', 'unlock_item_count', 'dun_id']
        return f(pb, attrs)
    
    if p == 'ResCityReward':
        attrs = ['city_id', 'complete_star', 'reward_desc', 'reward']
        return f(pb, attrs)
    
    if p == 'ResPracticeLimit':
        attrs = ['skill_id']
        return f(pb, attrs)
    
    if p == 'ResPracticeTarget':
        attrs = ['action', 'operation']
        return f(pb, attrs)
    
    if p == 'ResPracticeDun':
        attrs = ['hero_id', 'chapter_id', 'section_id', 'desc', 'icon', 'quest_id', 'dun_id', 'pre_dun_id', 'hero_level', 'dun_limit', 'dun_reward', 'dun_target']
        return f(pb, attrs)
    
    if p == 'ResTargetInfo':
        attrs = ['parameter']
        return f(pb, attrs)
    
    if p == 'ResAchievement':
        attrs = ['achievement_id', 'target_type', 'sub_id', 'group_id', 'pre_id', 'display_type', 'display_priority', 'achievement_score', 'title', 'desc', 'icon', 'is_short_cut', 'reward_info', 'target_info']
        return f(pb, attrs)
    
    if p == 'ResDailyTask':
        attrs = ['daily_task_id', 'target_type', 'display_priority', 'icon', 'reward_info', 'target_info']
        return f(pb, attrs)
    
    if p == 'ResMainTask':
        attrs = ['id', 'seqid', 'type', 'group_id', 'remind_dun_id', 'reward_info', 'target_info']
        return f(pb, attrs)
    
    if p == 'ResColorMatchingParam':
        attrs = ['hue_min_angle', 'hue_max_angle', 'hue_angle']
        return f(pb, attrs)
    
    if p == 'ResColorMatching':
        attrs = ['id', 'param']
        return f(pb, attrs)
    
    if p == 'ResOfflineBattleTitle':
        attrs = ['title_id', 'require_score', 'bonus_att_damage', 'bonus_att_hp']
        return f(pb, attrs)
    
    if p == 'ResSceneInfo':
        attrs = ['scene_name', 'in_video', 'in_battle', 'in_endless', 'in_pvp']
        return f(pb, attrs)
    
    if p == 'ResDungeonMonster':
        attrs = ['dungeon_id', 'room_id', 'monster_id', 'monster_wave_id', 'monster_cnt', 'monster_level', 'monster_born_type', 'monster_born_type_param', 'monster_pos_x', 'monster_pos_y', 'monster_group', 'monster_born_action', 'monster_born_face', 'monster_hp_rate']
        return f(pb, attrs)
    
    if p == 'ResDungeonRoom':
        attrs = ['dungeon_id', 'room_id', 'time_limit', 'pass_add_time', 'wave_refresh_monster_type', 'wave_refresh_monster_param', 'born_pos_x', 'gravity_x', 'gravity_y', 'border_left', 'border_right', 'action_limit', 'chamber_objective', 'reward', 'drop_info', 'ability_base_value', 'complete_time_base_value']
        return f(pb, attrs)
    
    if p == 'ResConLoginReward':
        attrs = ['con_login_days', 'con_login_type', 'reward']
        return f(pb, attrs)
    
    if p == 'ResHeroDropInfo':
        attrs = ['hero_id', 'drop_id']
        return f(pb, attrs)
    
    if p == 'ResScoreToResource':
        attrs = ['floor', 'reward_info', 'drop_info', 'drop_box_class', 'drop_display_info']
        return f(pb, attrs)
    
    if p == 'ResTimeToMoney':
        attrs = ['sort_id', 'down_limit', 'up_limit', 'ratio', 'max_money']
        return f(pb, attrs)
    
    if p == 'ResSkillData':
        attrs = ['skill_id', 'job_id', 'tree_pos', 'skill_name', 'skill_desc_param', 'skill_index', 'skill_level', 'skill_damage', 'endure_value', 'sub_skill_id', 'skill_set_id', 'operation', 'hit_add_sp', 'damage_att_rate', 'skill_icon', 'levelup_cost_sp', 'levelup_cost_res', 'limit_level', 'pre_skill_index', 'final_skill_cost_sp', 'skill_meta', 'fight_capacity']
        return f(pb, attrs)
    
    if p == 'ResSkillTree':
        attrs = ['hero_id', 'skill_set_id', 'relation_sequence', 'skill_index_sequence', 'skill_pos', 'skill_preview_offset_x', 'skill_preview_offset_y', 'skill_index']
        return f(pb, attrs)
    
    if p == 'ResRankValInfo':
        attrs = ['val_name', 'val_type', 'min_val', 'max_val', 'sort_type']
        return f(pb, attrs)
    
    if p == 'ResRankInfo':
        attrs = ['rank_id', 'rank_name', 'rank_base_type', 'rank_flush_type', 'rank_capacity', 'get_list_max_num', 'day_flush_hour', 'day_flush_min', 'day_flush_sec', 'day_flush_time', 'min_level', 'max_level', 'rank_val_info']
        return f(pb, attrs)
    
    if p == 'ResRankBattleSectInfo':
        attrs = ['low_val', 'high_val']
        return f(pb, attrs)
    
    if p == 'ResRankBattleInfo':
        attrs = ['id', 'capacity', 'get_list_max_num']
        return f(pb, attrs)
    
    if p == 'ResRankBattleSect':
        attrs = ['rank_low', 'rank_high', 'rank_sect']
        return f(pb, attrs)
    
    if p == 'ST_REWARD_RES':
        attrs = ['res_type', 'res_id', 'res_count']
        return f(pb, attrs)
    
    if p == 'ResRankBattleReward':
        attrs = ['rank_low', 'rank_high', 'every_day_reward', 'promote_reward']
        return f(pb, attrs)
    
    if p == 'ResRankBattleRobotHeroInfo':
        attrs = ['hero_id', 'hero_lv', 'hero_strength', 'hero_stamina', 'hero_growup', 'fight_capacity']
        return f(pb, attrs)
    
    if p == 'ResRankBattleRobot':
        attrs = ['uid', 'robot_name', 'hero_info']
        return f(pb, attrs)
    
    if p == 'ResOnlineBattleRobotHeroInfo':
        attrs = ['hero_id', 'hero_strength', 'hero_stamina', 'fight_capacity']
        return f(pb, attrs)
    
    if p == 'ResOnlineBattleRobot':
        attrs = ['uid', 'robot_name', 'score', 'hero_info']
        return f(pb, attrs)
    
    if p == 'ResOnlineBattleShopBox':
        attrs = ['pos', 'icon', 'price', 'base_drop_id']
        return f(pb, attrs)
    
    if p == 'ResGrowUpCondition':
        attrs = ['condition', 'condition_param_1', 'condition_param_2']
        return f(pb, attrs)
    
    if p == 'ResGrowUp':
        attrs = ['hero_id', 'grow_up_id', 'grow_up_condition', 'grow_up_ned_chip_info', 'grow_up_name', 'grow_up_icon']
        return f(pb, attrs)
    
    if p == 'ResPurchase':
        attrs = ['product_index', 'product_name', 'product_picture', 'product_id', 'price', 'product_type', 'activity_id', 'count', 'promotion_cnt', 'reward_info', 'channel']
        return f(pb, attrs)
    
    if p == 'ResMonthCard':
        attrs = ['id', 'type', 'name', 'valid_time', 'daily_reward']
        return f(pb, attrs)
    
    if p == 'ResBusinessRefresh':
        attrs = ['business_id', 'business_name', 'trigger_type', 'refresh_hour', 'refresh_minute', 'refresh_second', 'beg_time_year', 'beg_time_month', 'beg_time_day', 'end_time_year', 'end_time_month', 'end_time_day']
        return f(pb, attrs)
    
    if p == 'ResGroupBuy':
        attrs = ['group_buy_id', 'group_buy_desc', 'beg_time', 'end_time', 'cost_money', 'is_refresh', 'buy_reward']
        return f(pb, attrs)
    
    if p == 'ResGrowthFundReward':
        attrs = ['id', 'target_dunid', 'reward']
        return f(pb, attrs)
    
    if p == 'ResCumulateRecharge':
        attrs = ['id', 'recharge_name', 'target_recharge', 'reward', 'daily_reward', 'daily_buy_cost', 'daily_buy', 'daily_free']
        return f(pb, attrs)
    
    if p == 'ResSlotInfo':
        attrs = ['slot_id', 'open_limit']
        return f(pb, attrs)
    
    if p == 'ResParamInfo':
        attrs = ['parameter']
        return f(pb, attrs)
    
    if p == 'ResGift':
        attrs = ['gift_id', 'ex_change_cnt', 'title', 'content', 'reward']
        return f(pb, attrs)
    
    if p == 'ResItem':
        attrs = ['item_id', 'item_name', 'item_desc', 'item_level', 'item_type', 'can_use', 'item_quality', 'item_use_level', 'item_page_index', 'item_slot_index', 'sort_type', 'is_can_drop', 'package_wrap', 'pic_id', 'func_type', 'tab_type', 'parameter', 'drop_dun_id', 'output']
        return f(pb, attrs)
    
    if p == 'ResEquipAttrRatio':
        attrs = ['attrType', 'ratio']
        return f(pb, attrs)
    
    if p == 'HeroAttr':
        attrs = ['attr_type', 'attr_value', 'is_ratio']
        return f(pb, attrs)
    
    if p == 'ResEquipAttr':
        attrs = ['attr_type', 'attr_value', 'is_ratio', 'attr_str_inc_value', 'attr_sta_inc_value']
        return f(pb, attrs)
    
    if p == 'ResEquip':
        attrs = ['equip_id', 'pack_pic_id', 'evaluate', 'color', 'weight', 'equip_pos', 'base_exp', 'job_type', 'attr_base_strength', 'attr_base_stamina', 'price_for_sell', 'awesome_desc', 'levelup_strength_inc', 'levelup_stamina_inc', 'levelup_max_level', 'can_batch_sell', 'bind_to_hero', 'item_slot_index', 'return_gem_ratio', 'attr_color', 'attr_wakeup', 'attr_growup', 'drop_dun_id', 'output']
        return f(pb, attrs)
    
    if p == 'ResMaterial':
        attrs = ['type', 'id', 'count']
        return f(pb, attrs)
    
    if p == 'ResEquipGrowup':
        attrs = ['equip_id', 'growup_level', 'material', 'extra_gold', 'attr', 'need_equip_level=']
        return f(pb, attrs)
    
    if p == 'ResEquipWakeupCondition':
        attrs = ['cnt', 'min_level', 'gold_cost']
        return f(pb, attrs)
    
    if p == 'ResEquipGrowupCondition':
        attrs = ['equip_cnt', 'gold_cost']
        return f(pb, attrs)
    
    if p == 'ResEquipColor':
        attrs = ['color', 'pos', 'exp_to_gold', 'chance_to_increase_sp', 'wakeup_item_id', 'return_item_ratio', 'wakeup_condition', 'growup_condition']
        return f(pb, attrs)
    
    if p == 'ResEquipColorLevelup':
        attrs = ['level', 'need_exp']
        return f(pb, attrs)
    
    if p == 'ResEquipColorLevelAttr':
        attrs = ['color', 'pos', 'level', 'strength', 'stamina']
        return f(pb, attrs)
    
    if p == 'CSDT_EQUIPED_INFO':
        attrs = ['item_pos', 'base_id', 'cur_exp', 'level', 'wakeup', 'growup']
        return f(pb, attrs)
    
    if p == 'ResEquipRecommend':
        attrs = ['hero_id', 'dun_id_start', 'dun_id_end', 'recommend_equip_id']
        return f(pb, attrs)
    
    if p == 'ResDropElem':
        attrs = ['drop_item_type', 'drop_item_id', 'drop_item_num', 'drop_ratio', 'drop_grp_id']
        return f(pb, attrs)
    
    if p == 'ResBaseDrop':
        attrs = ['drop_id', 'drop_elem']
        return f(pb, attrs)
    
    if p == 'ResRetrieveInfo':
        attrs = ['id', 'type', 'parameter']
        return f(pb, attrs)
    
    if p == 'ResParam':
        attrs = ['parametre']
        return f(pb, attrs)
    
    if p == 'ResUserTipData':
        attrs = ['id', 'tipText']
        return f(pb, attrs)
    
    if p == 'ResMailContent':
        attrs = ['id', 'title', 'content', 'reward_money', 'reward_gold', 'reward_crystal', 'persist_time']
        return f(pb, attrs)
    
    if p == 'ResPrizeDraw':
        attrs = ['id', 'prize_draw_cost_type', 'prize_draw_cost_id', 'prize_draw_cost_count', 'mall_type', 'mall_id', 'mall_count', 'counteract_type', 'counteract_id', 'counteract_count', 'free_max_count', 'free_use_interval', 'free_refresh_time_by_last_use_time', 'free_refresh_time_by_last_refresh_time_hour', 'free_refresh_time_by_last_refresh_time_min', 'free_refresh_time_by_last_refresh_time_sec', 'first_prize_draw_drop_index', 'prize_draw_drop_index', 'prize_draw_preview_info']
        return f(pb, attrs)
    
    if p == 'ResShopRefresh':
        attrs = ['type', 'id', 'time']
        return f(pb, attrs)
    
    if p == 'ResBuyRate':
        attrs = ['critical_rate', 'buy_cnt']
        return f(pb, attrs)
    
    if p == 'ResRefreshPrice':
        attrs = ['type', 'count', 'is_vip', 'res_type', 'res_id', 'res_count', 'once_buy_cnt', 'buy_rate']
        return f(pb, attrs)
    
    if p == 'ResShopGoods':
        attrs = ['id', 'type', 'vip_level_limit', 'is_first_goods', 'goods_res_type', 'goods_res_id', 'goods_cnt', 'price_type', 'price', 'discount', 'discount_begin_time_string', 'discount_end_time_string', 'discount_begin_time', 'discount_end_time']
        return f(pb, attrs)
    
    if p == 'ResShopRandomGoodsInfo':
        attrs = ['goods_id', 'goods_probability']
        return f(pb, attrs)
    
    if p == 'ResShopRandom':
        attrs = ['type', 'hero_id', 'hero_lv_low', 'hero_lv_high', 'goods_random_info']
        return f(pb, attrs)
    
    if p == 'ResTutorialRule':
        attrs = ['dun_id', 'demo', 'actions']
        return f(pb, attrs)
    
    if p == 'ResBible':
        attrs = ['category_id', 'category_name', 'page_contents']
        return f(pb, attrs)
    
    if p == 'ResFriendRecommendInfo':
        attrs = ['low', 'high']
        return f(pb, attrs)
    
    if p == 'ResFriendRecommendSect':
        attrs = ['fight_capacity_low', 'fight_capacity_high', 'recommend_info']
        return f(pb, attrs)
    
    if p == 'ResTutorialInfo':
        attrs = ['tutorial_dugeon_id', 'tutorial_dugeon_hero', 'first_steller_id', 'first_planet_id', 'role_level_skill_upgrade', 'hero_tower_level', 'role_level_hero_tower', 'gold_mine_building_id', 'unlock_dun_item_shop', 'unlock_dun_emblem', 'role_id_emblem', 'unlock_dun_role_upgrade', 'role_level_skill_burst', 'sp_skill_burst', 'sp_skill_ultimatet', 'sp_skill_charge', 'new_hero_steller_id', 'new_hero_planet_id', 'resource_store_type', 'island_id', 'role_level_equip_levelup', 'unlock_dun_join_league', 'exp_mine_building_id', 'money_mine_building_id', 'mall_building_id']
        return f(pb, attrs)
    
    if p == 'ST_ACTION_DESC':
        attrs = ['name', 'tips_tag', 'guide_effect']
        return f(pb, attrs)
    
    if p == 'ST_SHOP_GOODS_INFO':
        attrs = ['goods_id', 'can_buy_cnt', 'is_already_buy', 'goods_res_type', 'goods_res_id', 'price_type', 'price', 'discount', 'discount_begin_time', 'discount_end_time', 'vip_level_limit']
        return f(pb, attrs)
    
    if p == 'ST_SHOP_GOODS':
        attrs = ['goods_info']
        return f(pb, attrs)
    
    if p == 'ST_GANG_CITY_STRONG_POINT_HERO_INFO':
        attrs = ['role_id', 'role_name', 'hero_info']
        return f(pb, attrs)
    
    if p == 'ST_GANG_CITY_STRONG_POINT':
        attrs = ['point_state', 'hero_info']
        return f(pb, attrs)
    
    if p == 'ST_GANG_CITY_INFO':
        attrs = ['id', 'city_state', 'strong_point_info']
        return f(pb, attrs)
    
    if p == 'ST_GANG_CITY':
        attrs = ['small_city', 'moderate_city', 'big_city']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_MEM_INFO':
        attrs = ['mem_role_id', 'mem_role_name', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_MEM_LIST':
        attrs = ['mem_info']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_ATTACK_POINT_INFO':
        attrs = ['city_id', 'strong_point_index']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_MEM_ATTACK_INFO':
        attrs = ['mem_role_id', 'mem_role_name', 'mem_total_fight_cnt', 'mem_win_fight_cnt', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_MEM_ATTACK_LIST':
        attrs = ['mem_info']
        return f(pb, attrs)
    
    if p == 'ST_HERO_BATTLE_EMBLEM_INFO':
        attrs = ['emblem_id', 'emblem_lv']
        return f(pb, attrs)
    
    if p == 'ST_HERO_BATTLE_EQUIP_INFO':
        attrs = ['base_id', 'level', 'wake_up', 'grow_up']
        return f(pb, attrs)
    
    if p == 'ST_HERO_BATTLE_INFO':
        attrs = ['hero_id', 'hero_lv', 'hero_grow_up', 'hero_relation_strength', 'hero_relation_stamina', 'hero_fight_capacity', 'emblem_info', 'equip_info', 'skill_id']
        return f(pb, attrs)
    
    if p == 'ST_BATTLE_ROBOT_INFO':
        attrs = ['hero_id', 'hero_lv', 'hero_grow_up', 'hero_strength', 'hero_stamina']
        return f(pb, attrs)
    
    if p == 'ST_BATTLE_HERO_ATTR_INFO':
        attrs = ['hero_id', 'grow_up', 'level', 'fight_capacity', 'max_hp', 'skill', 'attrs']
        return f(pb, attrs)
    
    if p == 'SSDT_NOTIFY_MSG':
        attrs = ['msg_id', 'send_time', 'msg_type', 'sender']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_ONLINE':
        attrs = ['grow_up', 'level', 'money', 'cur_power', 'power_recover_beg_time', 'power_recover_total_time', 'power_last_refresh_time', 'buy_power_times', 'cur_achi_point', 'cur_crystal', 'cur_gold', 'cur_sp', 'cur_spborn_beg_time', 'cur_spborn_total_time', 'buy_sp_times', 'max_end_less_score', 'max_end_less_floor', 'cur_notify_beg_time', 'bit_mark', 'clt_bit_mark', 'grow_up_cnt', 'last_quit_gang_time', 'last_login_time', 'last_leave_time', 'last_logout_time', 'last_gang_battle_time', 'total_online_time', 'create_time', 'cur_rank_battle_score', 'buy_crystal_times', 'buy_gold_times']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_QUEST':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_PACKAGE':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_SKILL':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_DUNGEON_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_MISC_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_DATASET_HERO':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_DATASET_BUILDING':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_DATASET_DUNDATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_NOTIFY_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ATTR_INFO':
        attrs = ['type', 'parm_1']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ITEM_EXTRA_INFO_RECOVER':
        attrs = ['recover_val']
        return f(pb, attrs)
    
    if p == 'DBBLOB_FIRSTPURCHASE_INFO':
        attrs = ['product_index', 'is_firstpurchase']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MONTHCARD_INFO':
        attrs = ['month_card_id', 'buy_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_FIRSTPURCHASE_LIST':
        attrs = ['purchase_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_EQUIP_INFO':
        attrs = ['package_pos', 'equip_id', 'count', 'cur_exp', 'level', 'wakeup', 'growup', 'bind_to_hero']
        return f(pb, attrs)
    
    if p == 'DBBLOB_EQUIP_TAB':
        attrs = ['size', 'equips', 'got_record', 'got_record_used']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PACKAGE_OBJ':
        attrs = ['package_pos', 'type', 'stat', 'base_id', 'count', 'func_type']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PACKAGE_TAB':
        attrs = ['size', 'obj_info']
        return f(pb, attrs)
    
    if p == 'DBBLOBHERO_EQUIPED_INFO':
        attrs = ['hero_id', 'equiped_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PACKAGE_INFO':
        attrs = ['tab_info', 'equip_tab', 'hero_equiped_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_TIME_VALUE':
        attrs = ['time_second', 'time_milli_second']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_PRACTICEDUN_QUEST':
        attrs = ['practice_dun_quest_flags']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_ACHIEVEMENT':
        attrs = ['achievemented_flags', 'get_flags']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_FIRSTPURCHAE':
        attrs = ['firstpurchase_flags']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_DAILYTASK_ITEM':
        attrs = ['daily_task_id', 'daily_task_done', 'daily_task_get', 'daily_task_complete_count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_DAILYTASK':
        attrs = ['daily_task_items', 'daily_task_reset_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_MAIN_TASK_ITEM':
        attrs = ['group_id', 'id', 'seq_id', 'progress']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_MAIN_TASK':
        attrs = ['item', 'complete_flags', 'get_flags']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_SHOP':
        attrs = ['refresh_count', 'refresh_rankbattle_shop_count', 'normal_shop_free_use_cnt', 'rank_battle_shop_free_use_cnt', 'refresh_vip_shop_count', 'vip_shop_free_use_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_PRIZE_DRAW':
        attrs = ['coin_one_prize_draw_free_use_count', 'coin_one_prize_draw_free_last_use_time', 'coin_one_prize_draw_free_count_last_refresh_time', 'money_one_prize_draw_free_use_count', 'money_one_prize_draw_free_last_use_time', 'coin_one_prize_draw_count', 'coin_ten_prize_draw_count', 'money_one_prize_draw_count', 'money_ten_prize_draw_count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_QUEST':
        attrs = ['practice_quest', 'achievement', 'daily_task', 'main_task']
        return f(pb, attrs)
    
    if p == 'DBBLOB_GIFT_ACCEPT_INFO':
        attrs = ['accept_count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_OFFLINE_BATTLE_DEFEATED_INFO':
        attrs = ['opponent_name', 'opponent_title_when_defeated', 'opponent_gold_medal_count_when_defeated', 'opponent_silver_medal_count_when_defeated', 'got_opponent_medal_bit', 'mode_bit']
        return f(pb, attrs)
    
    if p == 'DBBLOB_OFFLINE_BATTLE_INFO':
        attrs = ['offline_battle_defeated_info', 'my_gold_medal_holder_role_name', 'my_silver_medal_holder_role_name', 'title_index_selected', 'total_count', 'total_win_count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ONLINE_BATTLE_INFO':
        attrs = ['initialized', 'tickets', 'score', 'total_count', 'total_win_count', 'win_point']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DAILYQUEST_INFO':
        attrs = ['quest_id', 'start_time', 'count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUNGEON_CHALLENGE_INFO':
        attrs = ['dungeon_id', 'challenge_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUNGEON_UNLOCK_INFO':
        attrs = ['dungeon_id', 'diffic_degree', 'unlock_type']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUNGEON_COUNT_INFO':
        attrs = ['dungeon_id', 'time', 'count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUNGEON_DATA_INFO':
        attrs = ['pvp_point', 'pvp_score', 'dun_id', 'camp_id', 'dungeon_challenge_data', 'dungeon_unlock_data', 'dungeon_count_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_HERO_STAT_DATA':
        attrs = ['stat', 'dun_id', 'enter_dun_time', 'lv_cdbeg_time', 'lv_cdtotal_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_SKILL_INFO_DATA':
        attrs = ['skill_index', 'skill_id']
        return f(pb, attrs)
    
    if p == 'DBBLOB_EMBLEMINFO_DATA':
        attrs = ['emblem_id', 'emblem_lv', 'emblem_exp']
        return f(pb, attrs)
    
    if p == 'DBBLOB_HERO_INFO_DATA':
        attrs = ['hero_id', 'grow_up', 'level', 'exp', 'cur_hp', 'cur_sp', 'max_hp', 'damage', 'skill_info', 'emblem_info', 'new_role_buff_cnt', 'greatest_dungeon_id_when_unlock', 'fight_capacity']
        return f(pb, attrs)
    
    if p == 'DBBLOB_HERO_TRAININGSLOT_INFO':
        attrs = ['state', 'lv_up_hero_id']
        return f(pb, attrs)
    
    if p == 'DBBLOB_CHIP_INFO_DATA':
        attrs = ['chip_id', 'chip_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_HERO_DATA':
        attrs = ['hero_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_HERO_GANGBATTLE_DATA':
        attrs = ['gang_battle_win_cnt', 'gang_battle_lost_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_RANK_BATTLE_DATA':
        attrs = ['last_rank_battle_time', 'left_rank_battle_count', 'buy_rank_battle_count', 'last_refresh_left_count_time']
        return f(pb, attrs)
    
    if p == 'RANK_BATTLE_DEFENSE_DATA':
        attrs = ['hero_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MONSTER_STAT_DATA':
        attrs = ['stat', 'lv_cdbeg_time', 'lv_cdtotal_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MONSTER_INFO_DATA':
        attrs = ['monster_grp_id', 'grp_level', 'stat_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_MONSTER_DATA':
        attrs = ['monster_grp_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUN_UNLOCK_DATA':
        attrs = ['dungeon_id', 'dun_level', 'stat', 'challenge_time', 'challenge_cnt', 'story_bit', 'best_evaluation', 'elite_challenge_count', 'elite_drop_exp']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVE_CHALLENGE_DATA':
        attrs = ['npc_cnt', 'player_cnt', 'unlock_data', 'elite_buy_count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_TOWER_HERO':
        attrs = ['hero_id', 'hero_grow_up', 'hero_lv', 'remain_hp', 'max_score', 'max_floor', 'max_score_ever', 'max_floor_ever', 'entered_today', 'wipeout_today', 'match_index']
        return f(pb, attrs)
    
    if p == 'DBBLOB_TOWER_HERO_INFO':
        attrs = ['hero_hp']
        return f(pb, attrs)
    
    if p == 'DBBLOB_TOWER_CHALLENGE_DATA':
        attrs = ['balance_last_time', 'cur_score', 'cur_room_id', 'reset_cnt', 'hero_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_SELFDUN_HERO_INFO':
        attrs = ['state', 'hero_id']
        return f(pb, attrs)
    
    if p == 'DBBLOB_SELF_DUN_DATA':
        attrs = ['defense_hero_info', 'attack_hero_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVPDUN_INFO':
        attrs = ['uid', 'name', 'level', 'online', 'gang_id', 'gang_name', 'is_done']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_PVPDUN_DATA':
        attrs = ['pvp_attack_win_cnt', 'pvp_total_cnt', 'pvp_gain_gold', 'pvp_gain_crystal', 'pvp_gain_money', 'pvp_gain_exp_item', 'steal_battle_times']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ENDLESS_HERO_INFO':
        attrs = ['hero_id', 'hero_lv']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ENDLESS_HERO_DATA':
        attrs = ['endless_hero']
        return f(pb, attrs)
    
    if p == 'DBBLOB_HERO_DATASET':
        attrs = ['hero_data', 'monster_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_BUILDING_BASE_INFO':
        attrs = ['building_id', 'building_lv', 'level_beg_time', 'level_total_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_RES_STORE_INFO':
        attrs = ['res_limit', 'res_type', 'building_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ISLAND_DEFEND_INFO':
        attrs = ['hero_id', 'hero_lv', 'monster_id', 'monster_lv', 'trap_id', 'trap_lv']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ISLAND_BORNINFO':
        attrs = ['born_speed', 'born_limit', 'last_born_time', 'cur_born_res', 'defend_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ISLAND_INFO':
        attrs = ['res_type', 'building_info', 'born_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ISLAND_GAININFO':
        attrs = ['pvp_gain_gold', 'pvp_gain_crystal', 'pvp_gain_money', 'pvp_gain_exp_item']
        return f(pb, attrs)
    
    if p == 'DBBLOB_BUILDING_INFO':
        attrs = ['hero_tower_data', 'res_store_data', 'island_data', 'island_gain']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVP_HERO_INFO':
        attrs = ['res_type', 'hero_info', 'monster_id', 'monster_lv', 'trap_id', 'trap_lv']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVP_ISLAND_DEFEND_INFO':
        attrs = ['island_defense_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVP_ISLAND_INFO':
        attrs = ['res_type', 'cur_born_res', 'last_born_time', 'born_speed', 'born_limit']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVP_BUILD_INFO':
        attrs = ['island_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_BUILDING_DATASET':
        attrs = ['package_data', 'building_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_CITY_REWARD':
        attrs = ['cityId', 'complete_star']
        return f(pb, attrs)
    
    if p == 'DBBLOB_CITY_REWARD_SET':
        attrs = ['city_reward']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUN_DATASET':
        attrs = ['pve_dun', 'tower_dun', 'self_dun', 'pvp_dun', 'gang_battle', 'rank_battle', 'city_reward_set']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_BEHAVIOUR':
        attrs = ['total_skilllvup_cnt', 'total_archlvup_cnt', 'total_growup_cnt', 'total_endless_score', 'total_buildinglvup_cnt', 'try_to_pay', 'total_equip_level_up_level', 'total_equip_grow_up_cnt', 'total_equip_wake_up_cnt', 'total_endless_cnt', 'total_rankbattle_cnt', 'win_rankbattle_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MONTH_CARD_INFO':
        attrs = ['month_card_id', 'buy_time', 'last_reward_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_CONTINUE_LOGIN_INFO':
        attrs = ['continue_days', 'last_record_time', 'login_bit', 'get_reward_bit', 're_signable_days', 're_sign_last_time', 'cur_month_num']
        return f(pb, attrs)
    
    if p == 'DBBLOB_GROWTH_FUND_INFO':
        attrs = ['buy_time', 'target_bit', 'reward_bit']
        return f(pb, attrs)
    
    if p == 'DBBLOB_CUMULATE_RECHARGE_INFO':
        attrs = ['cumulate_recharge_id', 'cumulate_recharge_cnt', 'last_reward_time', 'target_bit', 'reward_bit', 'daily_free_bit', 'daily_buy_bit']
        return f(pb, attrs)
    
    if p == 'DBBLOB_GROUP_BUY_INFO':
        attrs = ['last_buy_time', 'valid_group_buy_id', 'has_buy_group_id']
        return f(pb, attrs)
    
    if p == 'DBBLOB_FIRSTREWARD_INFO':
        attrs = ['is_get_reward']
        return f(pb, attrs)
    
    if p == 'DBBLOB_BUSINESS_INFO':
        attrs = ['month_card_info', 'con_login_7days_info', 'month_login_info', 'open_cumulate_login_info', 'growth_fund_info', 'cumulate_recharge_info', 'group_buy_info', 'first_purchase_info', 'first_reward_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MISC_DATA':
        attrs = ['quest_info', 'gift_accept_info', 'shop_info', 'behaviour_info', 'offline_battle_info', 'online_battle_info', 'business_info', 'prize_draw_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_NOTIFY_DATA':
        attrs = ['title', 'link', 'content']
        return f(pb, attrs)
    
    if p == 'DBBLOB_RANK_VALINFO':
        attrs = ['rank_val']
        return f(pb, attrs)
    
    if p == 'DBBLOB_RANK_DATA':
        attrs = ['rank_id', 'rank_val', 'time_stamp']
        return f(pb, attrs)
    
    if p == 'DBBLOG_RANK_STAT_INFO':
        attrs = ['role_name', 'gang_id', 'gang_name', 'gang_level', 'rank_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DIRHERO_INFO':
        attrs = ['heroid', 'herolv', 'herogrowup']
        return f(pb, attrs)
    
    if p == 'DBBLOB_WORLD_INFO':
        attrs = ['uid', 'role_name', 'worldid', 'zoneid', 'curpve', 'heroinfo']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DIR_WORLD_INFO':
        attrs = ['world_info']
        return f(pb, attrs)
    
    if p == 'SSDT_WHOLE_GAMEOBJ':
        attrs = ['player_online_info', 'hero_info', 'building_info', 'dun_info', 'misc_data']
        return f(pb, attrs)
    
    if p == 'ERR_RESPONSE':
        attrs = ['err']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_BRIEF':
        attrs = ['uid', 'role_name', 'gender', 'main_level', 'map_id', 'body_info_data', 'create_time', 'bit_mark', 'clt_bit_mark', 'avatar_list', 'ban_time']
        return f(pb, attrs)
    
    if p == 'SUCC_ROLE_LIST_RES':
        attrs = ['unique_id', 'role_brief', 'set_time', 'world_id', 'last_role_uid']
        return f(pb, attrs)
    
    if p == 'SSDT_WHOLE_ACCOUNT':
        attrs = ['gmpermission', 'ban_time', 'ban_chat_time', 'schedule', 'active', 'act_create_time', 'acc_quest']
        return f(pb, attrs)
    
    if p == 'SSPKG_SHUTDOWN_ZONESVR':
        attrs = ['down_aft_sec']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_SELFDUN_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_PVEDUN_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ENDLESS_HERO_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_PVPPLAYER_INFO':
        attrs = ['uid', 'level', 'gang_id', 'role_name', 'online', 'pvp_score', 'max_fight_capacity', 'cur_crystal', 'cur_gold', 'is_done', 'self_dun', 'pve_dun']
        return f(pb, attrs)
    
    if p == 'SSDT_PLAYER_LOGIN_PVPINFO':
        attrs = ['result', 'pvp_island_info']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_LOGIN_REQ':
        attrs = ['unique_id', 'uid', 'channel_id', 'pvp_login_info', 'ban_chat_time']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_LOGIN_RES':
        attrs = ['result', 'unique_id', 'uid', 'role_name', 'channel_id', 'whole_game_obj', 'pvp_login_info', 'left_ban_time', 'ban_chat_time']
        return f(pb, attrs)
    
    if p == 'PKG_VIEW_PLAYER_INFO_REQ':
        attrs = ['view_role_id', 'is_from_gang']
        return f(pb, attrs)
    
    if p == 'PKG_VIEW_PLAYER_INFO_RSP_FROM_GANG_SVR':
        attrs = ['result', 'view_role_id', 'is_from_gang', 'gang_name']
        return f(pb, attrs)
    
    if p == 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_BATTLE_SVR':
        attrs = ['result', 'view_role_id', 'is_from_gang', 'gang_name', 'rank_battle_pos']
        return f(pb, attrs)
    
    if p == 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_SVR':
        attrs = ['result', 'view_role_id', 'is_from_gang', 'gang_name', 'rank_battle_pos', 'achievement_rank_pos']
        return f(pb, attrs)
    
    if p == 'PKG_VIEW_PLAYER_INFO_RSP_FROM_ROLE_SVR':
        attrs = ['result', 'view_role_id', 'is_from_gang', 'gang_name', 'rank_battle_pos', 'achievement_rank_pos', 'role_name', 'endless_max_floor', 'dun_data_info', 'hero_info', 'misc_data', 'hero_equiped_info']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_LOGOUT_REQ':
        attrs = ['unique_id', 'uid']
        return f(pb, attrs)
    
    if p == 'PKG_REQ_PLAYER_LOGIN':
        attrs = ['unique_id', 'uid', 'channel_id', 'world_id', 'ban_chat_time']
        return f(pb, attrs)
    
    if p == 'PKG_RES_PLAYER_LOGIN':
        attrs = ['result', 'unique_id', 'uid', 'channel_id', 'pvp_login_info', 'ban_chat_time']
        return f(pb, attrs)
    
    if p == 'PKG_REQ_PLAYER_LOGOUT':
        attrs = ['uid', 'max_fight_capacity', 'role_name', 'pvp_island_info', 'pvp_island_defense_info', 'world_id']
        return f(pb, attrs)
    
    if p == 'PKG_ACCOUNT_LOGIN_REQ':
        attrs = ['log_type', 'log_plat', 'device_type', 'device_sys_ver', 'resolution_wide', 'resolution_high', 'anon_id', 'unique_id', 'channel_id', 'ip', 'world_id', 'zone_id', 're_connect', 'net_re_connect']
        return f(pb, attrs)
    
    if p == 'PKG_ACCOUNT_LOGIN_RES':
        attrs = ['result', 'net_re_connect', 'data']
        return f(pb, attrs)
    
    if p == 'PKG_ACCOUNT_LOGOUT_REQ':
        attrs = ['unique_id', 'role_name', 'zone_id']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_NAME':
        attrs = ['result', 'unique_id', 'role_name', 'uid', 'zone_id', 'world_id', 'create_time']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_NAME_RES':
        attrs = ['result', 'unique_id', 'role_name', 'photo_head', 'uid', 'zone_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'PKG_VERIFY_NAME':
        attrs = ['result', 'unique_id', 'role_name', 'uid', 'zone_id', 'world_id', 'create_time']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_WORLDROLE':
        attrs = ['result', 'unique_id', 'role_name', 'uid', 'world_id', 'create_time']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_PLATACCOUNT_REQ':
        attrs = ['log_plat', 'anon_id', 'bind_id', 'world_id', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_PLATACCOUNT_RES':
        attrs = ['result', 'anon_id', 'bind_id']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_CLUSTER_PLATACCOUNT_REQ':
        attrs = ['log_plat', 'anon_id', 'bind_id', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_CLUSTER_PLATACCOUNT_RES':
        attrs = ['result', 'anon_id', 'bind_id']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_ROLE_PLATACCOUNT_REQ':
        attrs = ['log_plat', 'anon_id', 'bind_id', 'world_id', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_ROLE_PLATACCOUNT_RES':
        attrs = ['result', 'log_plat', 'world_id', 'anon_id', 'bind_id']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_ACCOUNTSVR_REQ':
        attrs = ['log_plat', 'anon_id', 'bind_id', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_ACCOUNTSVR_RES':
        attrs = ['result', 'anon_id', 'bind_id', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_GAMEOBJ_UPDATE_REQ':
        attrs = ['unique_id', 'uid', 'player_online_info', 'hero_info', 'building_info', 'dun_info', 'misc_data']
        return f(pb, attrs)
    
    if p == 'PKG_GAMEOBJ_UPDATE_RSP':
        attrs = ['result', 'err']
        return f(pb, attrs)
    
    if p == 'SSDT_CMD_PLAYER_SELFDUNINFO':
        attrs = ['result', 'dun_id', 'is_online', 'other_unique_id', 'obtain_crystal', 'obtain_gold']
        return f(pb, attrs)
    
    if p == 'SSDT_ROOMMONSTER_INFO':
        attrs = ['monster_id', 'monster_cnt']
        return f(pb, attrs)
    
    if p == 'SSDT_ROOM_INFO':
        attrs = ['room_id', 'monster_info']
        return f(pb, attrs)
    
    if p == 'SSDT_DUNGEON_INFO':
        attrs = ['room_info']
        return f(pb, attrs)
    
    if p == 'SSDT_PLAYER_ENTERDUN_RES':
        attrs = ['unique_id', 'hero_id', 'dun_id', 'result', 'level', 'dun_info']
        return f(pb, attrs)
    
    if p == 'PKG_SELFDUN_ENTER_REQ':
        attrs = ['other_unique_id', 'unique_id', 'hero_id', 'dun_id', 'result', 'level']
        return f(pb, attrs)
    
    if p == 'PKG_SELFDUN_ENTER_RSP':
        attrs = ['result', 'err', 'enter_dun_res']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_DEL_ROLE_REQ':
        attrs = ['unique_id', 'uid']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_DEL_ROLE_RES':
        attrs = ['result', 'unique_id', 'uid', 'name']
        return f(pb, attrs)
    
    if p == 'PKG_KICK_PLAYER':
        attrs = ['unique_id', 'zone_id']
        return f(pb, attrs)
    
    if p == 'PKG_ACCOUNT_INFO_RES':
        attrs = ['log_type', 'log_plat', 'anon_id', 'unique_id', 'uid', 'channel_id', 'is_new_acc', 'whole_account']
        return f(pb, attrs)
    
    if p == 'PKG_NEW_ROLE_CLUSTER':
        attrs = ['unique_id', 'uid', 'role_name', 'world_id']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_DEL_NAME':
        attrs = ['role_name', 'uid', 'unique_id']
        return f(pb, attrs)
    
    if p == 'PKG_DISP_PACKAGE':
        attrs = ['uid', 'addr', 'type_hash', 'data']
        return f(pb, attrs)
    
    if p == 'SSDT_PVP_ISLAND_DEFENSE_INFO':
        attrs = ['res_type', 'robot_info', 'hero_info', 'monster_id', 'monster_lv', 'trap_id', 'trap_lv']
        return f(pb, attrs)
    
    if p == 'SSDT_PVP_ISLAND_INFO':
        attrs = ['building_id', 'res_type', 'can_steal_res']
        return f(pb, attrs)
    
    if p == 'SSDT_PVP_STEAL_ISLAND_INFO':
        attrs = ['role_id', 'role_name', 'role_fight_capacity', 'island_data', 'defense_info', 'is_robot']
        return f(pb, attrs)
    
    if p == 'SSDT_ONLINE_BATTLE_ROOM_ROLE_INFO':
        attrs = ['pos', 'role_id', 'role_lv', 'role_stamina', 'role_strength', 'role_ability', 'role_skills']
        return f(pb, attrs)
    
    if p == 'SSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO':
        attrs = ['host', 'uid', 'name', 'score', 'win_number', 'ready', 'role_infos']
        return f(pb, attrs)
    
    if p == 'SSDT_ONLINE_BATTLE_ROOM_INFO':
        attrs = ['room_id', 'scene_index', 'player_infos']
        return f(pb, attrs)
    
    if p == 'SSDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME':
        attrs = ['zone_id', 'uid', 'count_down_time']
        return f(pb, attrs)
    
    if p == 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_REQ':
        attrs = ['world_id', 'zone_id', 'uid', 'online_battle_score', 'win_number', 'name', 'scene_index']
        return f(pb, attrs)
    
    if p == 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_RES':
        attrs = ['zone_id', 'uid', 'result', 'room_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_REQ':
        attrs = ['room_id', 'uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_RES':
        attrs = ['zone_id', 'uid', 'result', 'param', 'player_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_LIST_ONLINE_BATTLE_ROOM_REQ':
        attrs = ['score']
        return f(pb, attrs)
    
    if p == 'SSPKG_LIST_ONLINE_BATTLE_ROOM_RES':
        attrs = ['result', 'rooms']
        return f(pb, attrs)
    
    if p == 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_REQ':
        attrs = ['world_id', 'zone_id', 'uid', 'online_battle_score', 'win_number', 'name', 'room_id', 'host_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_RES':
        attrs = ['zone_id', 'uid', 'result', 'room_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_REQ':
        attrs = ['room_id', 'player_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_ONLINE_BATTLE_ROOM_QUICK_MATCH_REQ':
        attrs = ['world_id', 'zone_id', 'uid', 'online_battle_score', 'win_number', 'name']
        return f(pb, attrs)
    
    if p == 'SSPKG_ONLINE_BATTLE_ROOM_KICK_GUEST_REQ':
        attrs = ['uid', 'room_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_ONLINE_BATTLE_ROOM_HEART_BEAT_REQ':
        attrs = ['uid', 'room_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_RES':
        attrs = ['zone_id', 'uid', 'player_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_ONLINE_BATTLE_BEGIN':
        attrs = ['zone_id', 'uid', 'is_host', 'room_info']
        return f(pb, attrs)
    
    if p == 'PKG_SEARCH_PVP_PLAYER_REQ':
        attrs = ['uid', 'max_fight_capacity']
        return f(pb, attrs)
    
    if p == 'PKG_SEARCH_PVP_PLAYER_RES':
        attrs = ['result', 'target_info']
        return f(pb, attrs)
    
    if p == 'PKG_BALANCE_STEAL_BATTLE_REQ':
        attrs = ['attacker_role_id', 'role_name', 'self_hero_id', 'self_hero_hp_percent', 'target_role_id', 'target_hero_id', 'target_hero_hp', 'res_type', 'island_data']
        return f(pb, attrs)
    
    if p == 'PKG_BALANCE_STEAL_BATTLE_RES':
        attrs = ['result', 'target_role_id', 'res_type', 'self_hero_id', 'self_hero_hp_percent', 'target_hero_id', 'target_hero_hp']
        return f(pb, attrs)
    
    if p == 'PKG_STEAL_BATTLE_RESULT_MAIL_REQ':
        attrs = ['defense_role_id', 'battle_result', 'atk_role_name', 'atk_role_id', 'lose_res_type', 'lose_res_id', 'lose_res_count']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_SYSTEM_ACC':
        attrs = ['res_type', 'res_id', 'res_cnt', 'chg_reason']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_SYSTEM_ACC_INFO':
        attrs = ['acc_info']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_REVENGE_ACC_INFO':
        attrs = ['atk_role_name', 'atk_role_id', 'lose_res_type', 'lose_res_id', 'lose_res_count']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_ACC_INFO':
        attrs = ['type', 'mail_acc_info']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_INFO':
        attrs = ['send_rold_id', 'send_role_name', 'mail_id', 'mail_type', 'mail_status', 'mail_title', 'mail_content', 'mail_send_time', 'mail_end_time', 'mail_acc_type', 'mail_acc']
        return f(pb, attrs)
    
    if p == 'SSDT_BRIEF_MAIL_INFO':
        attrs = ['mail_id', 'mail_type', 'mail_status', 'mail_title', 'mail_send_time', 'mail_end_time', 'mail_acc_type']
        return f(pb, attrs)
    
    if p == 'PKG_ROLELOGIN_GET_MAIL_REQ':
        attrs = ['role_id', 'zone_id']
        return f(pb, attrs)
    
    if p == 'PKG_ROLELOGIN_GET_MAIL_RES':
        attrs = ['result', 'role_id', 'zone_id', 'system_mail_info', 'revenge_mail_info', 'system_mail_count', 'revenge_mail_count']
        return f(pb, attrs)
    
    if p == 'PKG_ROLELOGOUT_TO_MAILSVR':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'PKG_SEND_MAIL_REQ':
        attrs = ['recv_role_id', 'mail_info']
        return f(pb, attrs)
    
    if p == 'PKG_SEND_MAIL_RES':
        attrs = ['result', 'recv_role_id', 'mail_info', 'system_mail_count', 'revenge_mail_count']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_CLR_INFO':
        attrs = ['mail_id', 'need_delete']
        return f(pb, attrs)
    
    if p == 'PKG_OVERTIME_MAIL_CLR_REQ':
        attrs = ['role_id', 'clr_info']
        return f(pb, attrs)
    
    if p == 'PKG_OVERTIME_MAIL_CLR_RES':
        attrs = ['role_id', 'system_mail_id_list', 'revenge_mail_id_list']
        return f(pb, attrs)
    
    if p == 'PKG_GET_MAIL_LIST_REQ':
        attrs = ['role_id', 'mail_type']
        return f(pb, attrs)
    
    if p == 'PKG_GET_MAIL_LIST_RES':
        attrs = ['result', 'role_id', 'mail_type', 'system_mail_info', 'revenge_mail_info']
        return f(pb, attrs)
    
    if p == 'PKG_GET_MAIL_DETAIL_REQ':
        attrs = ['role_id', 'mail_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_MAIL_DETAIL_RES':
        attrs = ['result', 'role_id', 'mail_id', 'mail_info']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_READ_REQ':
        attrs = ['role_id', 'mail_id', 'mail_type']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_READ_RES':
        attrs = ['result', 'role_id', 'mail_id', 'mail_type', 'mail_status']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_GET_ACC_REQ':
        attrs = ['role_id', 'mail_id']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_GET_ACC_RES':
        attrs = ['result', 'role_id', 'mail_id', 'mail_acc', 'is_have_new_mail_add', 'add_mail_info']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_DELETE_REQ':
        attrs = ['role_id', 'mail_id']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_DELETE_RES':
        attrs = ['result', 'role_id', 'mail_id', 'mail_type', 'mail_status', 'is_have_new_mail_add', 'add_mail_info']
        return f(pb, attrs)
    
    if p == 'SSDT_GANGSIMPLE_INFO':
        attrs = ['gang_name', 'gang_id', 'gang_leader_name', 'gang_apply_state', 'gang_level', 'gang_score', 'cond_rank_pos', 'gang_mem_count', 'gang_notify', 'is_auto_apply_battle']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_SELF_INFO':
        attrs = ['position', 'contribution']
        return f(pb, attrs)
    
    if p == 'SSDT_GANGMEM_INFO':
        attrs = ['mem_role_id', 'mem_name', 'mem_postion', 'mem_gang_battle_win_score', 'mem_rank_pos', 'last_leave_time', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'SSDT_GANGLIST_INFO':
        attrs = ['gang_id', 'gang_name', 'gang_leader_name', 'gang_apply_state', 'gang_level', 'is_in_apply_list', 'gang_score', 'gang_avg_rank_pos', 'gang_mem_count', 'gang_cond_rank_pos']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_APPLYLIST_INFO':
        attrs = ['mem_name', 'mem_role_id', 'apply_time', 'mem_rank_pos', 'applyer_gang_battle_win_cnt', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_APPLYLIST_DBINFO':
        attrs = ['mem_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANGLIST_REQ':
        attrs = ['index', 'role_id', 'role_rank_pos']
        return f(pb, attrs)
    
    if p == 'PKG_GANGLIST_RES':
        attrs = ['gang_list']
        return f(pb, attrs)
    
    if p == 'PKG_ROLELOGIN_GANG_REQ':
        attrs = ['role_id', 'gang_battle_win_score', 'zone_id', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'PKG_ROLELOGIN_GANG_RES':
        attrs = ['gang_simple_info', 'self_info', 'apply_list_count', 'is_have_gang']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_GANG_REQ':
        attrs = ['gang_name', 'gang_id_gen_by_cluster', 'gang_creator_name', 'gang_notify', 'gang_creator_unique_id', 'gang_creator_role_id', 'is_auto_apply', 'cond_rank_pos', 'gang_create_time', 'gang_name_equal_role', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_GANG_NAME_RSP':
        attrs = ['gang_name', 'gang_id_gen_by_cluster', 'gang_creator_name', 'gang_notify', 'gang_creator_unique_id', 'gang_creator_role_id', 'is_auto_apply', 'cond_rank_pos', 'gang_create_time', 'gang_name_equal_role', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_GANG_RES':
        attrs = ['result', 'creator_role_id', 'creator_unique_id', 'gang_simple_info', 'self_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_UPDATE_BASIC_INFO_REQ':
        attrs = ['role_id', 'gang_notify', 'is_auto_apply', 'cond_rank_pos']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_UPDATE_BASIC_INFO_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_REQ':
        attrs = ['gang_name', 'gang_id', 'applyer_unique_id', 'applyer_name', 'applyer_role_id', 'apply_time', 'applyer_rank_pos', 'applyer_gang_battle_win_cnt', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_RES':
        attrs = ['result', 'gang_id', 'leader_role_id', 'leader_zone_id', 'apply_list_count']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_AUTOJOIN_RES':
        attrs = ['result', 'gang_simple_info', 'self_info']
        return f(pb, attrs)
    
    if p == 'PKG_QUIT_GANG_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'PKG_QUIT_GANG_RES':
        attrs = ['result', 'role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEMLIST_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEMLIST_RES':
        attrs = ['result', 'gang_id', 'list_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_DETAIL_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_DETAIL_RES':
        attrs = ['result', 'gang_id', 'gang_simple_info', 'list_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEM_LIST_CHG_RES':
        attrs = ['del', 'del_type', 'add', 'mem_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BASIC_INFO_CHG_RES':
        attrs = ['gang_notify', 'gang_apply_state', 'cond_rank_pos', 'gang_score', 'gang_level']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEM_INFO_CHG_REQ':
        attrs = ['role_id', 'type', 'reason', 'value_1', 'value_2']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEMCHG_RES':
        attrs = ['result', 'type', 'value_1']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_APPLYLIST_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_APPLYLIST_RES':
        attrs = ['apply_list']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_APPROVE_REQ':
        attrs = ['iresult', 'role_id', 'mem_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_APPROVE_RES':
        attrs = ['result', 'mem_name', 'role_id', 'type', 'gang_simple_info', 'self_info', 'apply_list_count']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_APPROVETOMEM_RES':
        attrs = ['result', 'mem_name', 'gang_simple_info', 'self_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_CHAT_REQ':
        attrs = ['gang_id', 'role_id', 'from_name', 'msg', 'sender_cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_CHAT_RES':
        attrs = ['from_name', 'from_role_id', 'msg', 'send_time', 'sender_cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_KICK_MEM_REQ':
        attrs = ['role_id', 'kick_mem_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_KICK_MEM_RES':
        attrs = ['result', 'mem_role_id', 'mem_zone_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_SET_ELDER_REQ':
        attrs = ['role_id', 'mem_role_id', 'set_or_cancle']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_SET_ELDER_RES':
        attrs = ['result', 'mem_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_LOGOUT_UPDZONEID_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'MemZoneInfo':
        attrs = ['role_id', 'zone_id']
        return f(pb, attrs)
    
    if p == 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ':
        attrs = ['mem_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES':
        attrs = ['is_auto_apply_battle']
        return f(pb, attrs)
    
    if p == 'PKG_PLAYER_HERO_CHG_TO_GANG_REQ':
        attrs = ['role_id', 'hero_info']
        return f(pb, attrs)
    
    if p == 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ':
        attrs = ['mem_role_id', 'chg_type', 'city_id', 'strong_point_index', 'hero_slot_index', 'hero_info']
        return f(pb, attrs)
    
    if p == 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES':
        attrs = ['chg_type', 'city_id', 'strong_point_index', 'hero_slot_index', 'hero_info']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_CITY_INFO_REQ':
        attrs = ['mem_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_CITY_INFO_RES':
        attrs = ['result', 'city_info']
        return f(pb, attrs)
    
    if p == 'PKG_BROAD_GANG_BATTTLE_STATE_TO_GANG_SVR':
        attrs = ['state']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_BATTLE_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_BATTLE_REQ_TO_GANG_BATTLE':
        attrs = ['gang_id', 'role_id', 'world_id', 'gang_name', 'gang_level', 'gang_score', 'mem_list', 'is_send_city', 'small_city_start_pos', 'moderate_city_start_pos', 'big_city_start_pos', 'city_info', 'is_send_city_end']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_BATTLE_RES_FROM_GANG_BATTLE':
        attrs = ['result', 'role_id', 'gang_id', 'state']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_BATTLE_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BATTLE_STATE_BROAD':
        attrs = ['state']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_CITY_REQ':
        attrs = ['gang_id', 'is_get_self']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_CITY_RES':
        attrs = ['result', 'is_get_self', 'self_score', 'target_score', 'target_gang_name', 'target_gang_level', 'city_info']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_ATTACK_MEM_INFO':
        attrs = ['mem_role_id', 'fight_win_count', 'fight_total_count', 'pre_get_gold', 'pre_get_crystal']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BATTLE_TOTAL_BALANCE_REQ':
        attrs = ['gang_id', 'is_match', 'self_battle_score', 'target_battle_score', 'target_gang_score', 'mem_info']
        return f(pb, attrs)
    
    if p == 'PKG_BROAD_GANG_BATTTLE_POINT_CHG_TO_GANG_SVR':
        attrs = ['gang_id', 'self_score', 'target_score', 'city_id', 'strong_point_index', 'point_state', 'is_self_city']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BATTTLE_POINT_BROAD':
        attrs = ['self_score', 'target_score', 'is_self_city', 'city_id', 'strong_point_index', 'point_state']
        return f(pb, attrs)
    
    if p == 'PKG_ENTER_GANG_BATTLE_DUNGEON_REQ':
        attrs = ['gang_id', 'role_id', 'self_hero_id', 'target_city_id', 'target_strong_point_index']
        return f(pb, attrs)
    
    if p == 'PKG_ENTER_GANG_BATTLE_DUNGEON_RES':
        attrs = ['result', 'self_hero_id', 'target_gang_id', 'target_city_id', 'target_strong_point_index', 'target_strong_point_hero_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BATTLE_BALANCE_REQ':
        attrs = ['gang_id', 'role_id', 'self_hero_id', 'self_hero_lv', 'target_city_id', 'target_strong_point_index', 'is_win']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BATTLE_BALANCE_RES':
        attrs = ['result', 'reward_gold', 'reward_crystal']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_STRONG_POINT_CHG_TO_GANGBATTLE_REQ':
        attrs = ['gang_id', 'chg_type', 'city_id', 'strong_point_index', 'hero_slot_index', 'hero_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEM_CHG_TO_GANGBATTLE_REQ':
        attrs = ['gang_id', 'role_id', 'role_name', 'cumulate_recharge_id', 'is_add']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES':
        attrs = ['result', 'mem_attck_info']
        return f(pb, attrs)
    
    if p == 'GANG_BROADCAST_DETAIL':
        attrs = ['gang_simple_info_chg', 'gang_mem_list_chg', 'gang_chat_msg', 'gang_city_chg', 'gang_auto_apply_battle_chg', 'gang_battle_state', 'gang_battle_point_state']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BROADCAST':
        attrs = ['mem_name_list', 'msg_id', 'detail']
        return f(pb, attrs)
    
    if p == 'DB_GANG_BATTLE_MEM_ATTACK_HERO_INFO':
        attrs = ['hero_id']
        return f(pb, attrs)
    
    if p == 'DB_GANG_BATTLE_MEM_INFO':
        attrs = ['mem_role_id', 'mem_name', 'fight_win_count', 'fight_total_count', 'pre_get_gold', 'pre_get_crystal', 'cumulate_recharge_id', 'attack_hero', 'attack_point']
        return f(pb, attrs)
    
    if p == 'DB_GANG_BATTLE_MEM_LIST':
        attrs = ['mem_info']
        return f(pb, attrs)
    
    if p == 'DB_GANG_BATTLE_HISTORY_MEM_INFO':
        attrs = ['mem_role_id', 'mem_name', 'mem_win_cnt', 'mem_total_cnt', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'DB_GANG_BATTLE_HISTORY_MEM_LIST':
        attrs = ['gang_mem_list']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_BATTLE_HISTORY_INFO':
        attrs = ['battle_time', 'gang_level', 'defense_gang_id', 'defense_gang_name', 'defense_gang_level', 'self_battle_score', 'defense_battle_score', 'mem_list_info']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_STATE_REQ':
        attrs = ['role_id', 'gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_STATE_RES':
        attrs = ['state', 'sub_state', 'pre_get_gold', 'pre_get_crystal', 'attack_hero', 'attack_point']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_HISTORY_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_HISTORY_RES':
        attrs = ['history_info']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_MEM_MAIL_USER_INFO':
        attrs = ['mem_role_id', 'acc_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_SEND_MEM_MAIL_REQ':
        attrs = ['is_match', 'is_draw', 'is_win', 'is_lose', 'user_info']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_VAL':
        attrs = ['val_id', 'val']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_BATTLE_HERO_BRIEF':
        attrs = ['hero_id', 'hero_lv', 'grow_up']
        return f(pb, attrs)
    
    if p == 'SSDT_PLAYER_BASE_INFO':
        attrs = ['role_id', 'role_name', 'role_level', 'cumulate_recharge_id', 'rank_battle_hero', 'is_robot']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_BASE_INFO':
        attrs = ['gang_id', 'gang_name', 'gang_level', 'leader_unique_id', 'leader_role_id', 'leader_name', 'leader_level']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_DATA':
        attrs = ['rank_base_type', 'rank_base_info', 'rank_trend', 'rank_val']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RANKLIST_REQ':
        attrs = ['flush_time', 'rank_id', 'rank_type', 'page_start_id', 'page_count']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RANKLIST_RES':
        attrs = ['result', 'flush_time', 'rank_id', 'rank_type', 'rank_yday', 'total_count', 'page_start_id', 'max_show_count', 'rank_list']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RANKPOS_REQ':
        attrs = ['rank_id', 'rank_type', 'search_type', 'search_key']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RANKPOS_RES':
        attrs = ['rank_id', 'rank_type', 'search_type', 'rank_yday', 'rank_pos', 'rank_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_ACHIEVEMENT_SCORE_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'achievement_finish_num', 'achievement_score']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_GANG_SCORE_REQ':
        attrs = ['uid', 'role_name', 'gang_id', 'gang_name', 'gang_lv', 'gang_score', 'gang_history_score']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_OFFLINE_BATTLE_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'offline_battle_title_lv', 'offline_battle_kill_num']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_ONLINE_BATTLE_RANK_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'online_battle_score', 'online_battle_win_count']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_STEAL_BATTLE_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'steal_battle_win_cnt', 'steal_battle_total_cnt']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_ENDLESS_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'end_less_score', 'end_less_floor']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_ONE_UPDATE':
        attrs = ['rank_id', 'flush_day_time', 'next_flush_day_time', 'flush_week_time', 'next_flush_week_time', 'flush_month_time', 'next_flush_month_time']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_UPDATE_INFO_REQ':
        attrs = ['op_type', 'param_int1', 'param_int2']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_UPDATE_INFO_RES':
        attrs = ['rank_one_update']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANKDATA_REPORT_REQ':
        attrs = ['rank_base_type', 'rank_base_info', 'rank_data']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_GANG_RANKSTAT_REQ':
        attrs = ['gang_id', 'rank_id', 'rank_base_type']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_GANG_RANKSTAT_RES':
        attrs = ['gang_id', 'rank_id', 'rank_base_type', 'rank_val']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_ROLELOGIN_REQ':
        attrs = ['role_id', 'can_join_rank_battle', 'role_name', 'cumulate_recharge_id', 'defense_hero_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_ROLELOGIN_RES':
        attrs = ['rank_pos', 'high_history_rank_pos']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_BATTLE_FIGHT_TARGET_INFO':
        attrs = ['role_id', 'role_name', 'rank_pos', 'defense_hero_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES':
        attrs = ['result', 'target_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ':
        attrs = ['defense_role_id', 'attacker_role_id', 'dungeon_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_RES':
        attrs = ['result', 'dungeon_id', 'defense_role_id', 'defense_hero_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_UNLOCK_REQ':
        attrs = ['attacker_role_id', 'defense_role_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_BALANCE_REQ':
        attrs = ['attacker_mem_role_id', 'attacker_mem_name', 'attacker_cumulate_recharge_id', 'attacker_mem_defense_hero_info', 'defense_mem_role_id', 'battle_result']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_BALANCE_RES':
        attrs = ['result', 'defense_mem_role_id', 'old_pos', 'new_pos', 'is_promote', 'history_pos', 'promote_reward']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_BATTLE_MAIL_USER_INFO':
        attrs = ['mem_role_id', 'rank_pos', 'reward']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_REWARD_EVERYDAY_REQ':
        attrs = ['user_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_REWARD_PROMOTE_REQ':
        attrs = ['mem_role_id', 'rank_new_pos', 'rank_old_pos', 'promote_reward']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_POS_DOWN_NOTIFY_REQ':
        attrs = ['mem_role_id', 'atk_mem_name', 'atk_mem_role_id', 'rank_new_pos', 'rank_old_pos', 'is_win']
        return f(pb, attrs)
    
    if p == 'PKG_GET_NOTIFY_REQ':
        attrs = ['uid', 'cur_max_beg_time']
        return f(pb, attrs)
    
    if p == 'PKG_NOTIFY_DATA':
        attrs = ['title', 'link', 'content']
        return f(pb, attrs)
    
    if p == 'PKG_NOTIFY_INFO':
        attrs = ['notify_id', 'name', 'beg_time', 'end_time', 'is_display', 'notify']
        return f(pb, attrs)
    
    if p == 'PKG_GET_NOTIFY_RES':
        attrs = ['new_count', 'new_max_beg_time', 'notify_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_FINISH':
        attrs = ['result', 'uid', 'unique_id', 'http_handle', 'is_firstpurchase', 'product_id', 'trade_code', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_FINISH_DISP':
        attrs = ['result', 'uid', 'unique_id', 'http_handle', 'product_id', 'trade_code', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_REQ':
        attrs = ['transaction_id', 'uid', 'unique_id', 'praram', 'product_id', 'receipt']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_REQUEST_DELIVERY':
        attrs = ['product_id', 'trade_code', 'sn', 'server_id', 'uid', 'unique_id', 'money', 'coin', 'time']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_DONE':
        attrs = ['trade_code', 'uid', 'unique_id', 'product_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_RES':
        attrs = ['uid', 'unique_id', 'result', 'product_id', 'http_handle', 'is_firstpurchase', 'trade_code', 'cur_cumulate_recharge']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_DISP_REQ':
        attrs = ['uid', 'unique_id', 'server_id', 'transaction_id', 'product_id', 'trade_code', 'coin', 'money', 'time', 'http_handle']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_PURCHASEACTIVITY_REQ':
        attrs = ['uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_PURCHASEACTIVITY_RES':
        attrs = ['uid', 'firstpurchase_list', 'monthcard_info', 'growthfund_buytime', 'cumulate_recharge']
        return f(pb, attrs)
    
    if p == 'SSPKG_RECORD_TRADE_SUCCESS':
        attrs = ['trade_code', 'uid', 'unique_id', 'product_id', 'money', 'gold']
        return f(pb, attrs)
    
    if p == 'SSPKG_GIFT_CODE_REQ':
        attrs = ['uid', 'unique_id', 'gift_code', 'gift_id', 'channel_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_GIFT_UPDATE_ACCEPT_REQ':
        attrs = ['uid', 'unique_id', 'gift_code', 'gift_id', 'channel_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_GIFT_CODE_RES':
        attrs = ['uid', 'unique_id', 'result', 'gift_code', 'gift_id', 'channel_id']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_LIST_RES':
        attrs = ['success', 'error', 'reserve']
        return f(pb, attrs)
    
    if p == 'UINON_MAIL_ACC_INFO':
        attrs = ['system_mail_acc', 'revenge_mail_acc']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_BASEINFO':
        attrs = ['player_base_info', 'gang_base_info']
        return f(pb, attrs)
    
    if p == 'SSDT_RANKPOS_SEARCH_KEY':
        attrs = ['uniq_id', 'rank_pos', 'uniq_name', 'reserve']
        return f(pb, attrs)
    
    if p == 'SSPKG_GAMESVR_STAT_INFO':
        attrs = ['worldid', 'zoneid', 'online_player_cnt']
        return f(pb, attrs)
    
    if p == 'SSPKG_GAMESVR_ACC_LOGIN':
        attrs = ['uniq_id', 'uid', 'name', 'worldid', 'zoneid']
        return f(pb, attrs)
    
    if p == 'SSPKG_GAMESVR_ACC_LOGOUT':
        attrs = ['uniq_id', 'world_info']
        return f(pb, attrs)
    
    if p == 'DB_PLAYER_SHOP_HERO_INFO':
        attrs = ['hero_id', 'hero_lv']
        return f(pb, attrs)
    
    if p == 'DB_PLAYER_SHOP_GOODS_INFO':
        attrs = ['goods_id', 'is_already_buy']
        return f(pb, attrs)
    
    if p == 'DB_PlAYER_SHOP_INFO_BLOB':
        attrs = ['player_shop_goods_info', 'player_rankbattle_shop_goods_info']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_LOGIN_REQ':
        attrs = ['role_id', 'zone_id', 'hero_info']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_LOGOUT_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_LOGIN_RES':
        attrs = ['result', 'shop_type', 'next_refresh_time', 'shop_goods_info', 'auto_refreshed']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_REFRESH_GOODS_REQ':
        attrs = ['role_id', 'shop_type']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_REFRESH_GOODS_RES':
        attrs = ['shop_type', 'shop_goods_info', 'next_refresh_time', 'result', 'auto_refreshed']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_BUY_GOODS_CHECK_REQ':
        attrs = ['role_id', 'shop_type', 'goods_id', 'left_money', 'left_gold', 'left_crystal', 'left_rankbattle_score', 'vip_level']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PlAYER_BUY_GOODS_CHECK_RES':
        attrs = ['result', 'shop_type', 'role_id', 'cur_time', 'goods_info']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_UPDATE_HERO_REQ':
        attrs = ['role_id', 'hero_info']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_BUY_GOODS_FAILE_ROLLBACK_REQ':
        attrs = ['role_id', 'shop_type', 'goods_id']
        return f(pb, attrs)
    
    if p == 'SSDT_FRIEND_BASE_INFO':
        attrs = ['uid', 'name', 'head_photo', 'vip_level', 'last_logout_time', 'fighting_capacity']
        return f(pb, attrs)
    
    if p == 'SSDT_FRIEND_INFO':
        attrs = ['base_info', 'can_receive_power', 'has_send_power', 'hero_info']
        return f(pb, attrs)
    
    if p == 'SSDT_FRIEND_APPLY_INFO':
        attrs = ['base_info', 'apply_time']
        return f(pb, attrs)
    
    if p == 'SSDT_FRIEND_RECOMMAND_INFO':
        attrs = ['base_info']
        return f(pb, attrs)
    
    if p == 'SSDT_PLAYER_FRIEND_INFO':
        attrs = ['friend_info', 'apply_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_OPT_FRIEND_REQ':
        attrs = ['uid', 'opt_type', 'target_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_OPT_FRIEND_RES':
        attrs = ['result', 'uid', 'opt_type', 'target_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_LOGIN_FRIEND_SVR_REQ':
        attrs = ['uid', 'uin', 'hero_info', 'role_name', 'vip_level', 'head_photo', 'zone_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_LOGIN_FRIEND_SVR_RES':
        attrs = ['result', 'time', 'friend_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_INFO_CHG':
        attrs = ['uid', 'type', 'value', 'hero_info']
        return f(pb, attrs)
    
    if p == 'SSDT_RELATION_INFO':
        attrs = ['role_id', 'can_recv_power_from_this_friend', 'has_send_power_to_this_friend']
        return f(pb, attrs)
    
    if p == 'DB_FRIEND_BLOB':
        attrs = ['apply_info', 'hero_info', 'relation_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_NOTIFY_APPLYLIST_CHG':
        attrs = ['apply_info', 'zone_id', 'is_add', 'uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG':
        attrs = ['zone_id', 'is_add', 'friend_info', 'uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER':
        attrs = ['uid', 'zone_id', 'send_time', 'send_friend_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER':
        attrs = ['uid', 'zone_id', 'recv_power_times_today', 'recv_power_from_friend_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY':
        attrs = ['uid', 'zone_id']
        return f(pb, attrs)
    
    if p == 'PKG_FRIEND_DISP_INFO_CHG':
        attrs = ['uid', 'last_logout_time', 'vip_level', 'head_photo', 'fighting_capacity']
        return f(pb, attrs)
    
    if p == 'FRIEND_BROADCAST_DETAIL':
        attrs = ['friend_info_chg']
        return f(pb, attrs)
    
    if p == 'PKG_FRIEND_BROADCAST':
        attrs = ['mem_list', 'msg_id', 'detail']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RECOMMAND_FRIEND_REQ':
        attrs = ['uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RECOMMAND_FRIEND_RES':
        attrs = ['result', 'recommand_info']
        return f(pb, attrs)
    
    return None
