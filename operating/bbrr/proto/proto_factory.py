# THIS FILE IS AUTOMATIC GENERATED BY REFLECT TOOL
# DO NOT CHECK THIS FILE INTO SOURCE CONTORL
# OR MODIFY THIS FILE MANUALLY

import guard_proto_pb2
from string_hash import StringHash

def create_pb(hash):
    if hash == StringHash.calculate_hash('SCDT_ACHIEVEMENT_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_ACHIEVEMENT_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_ACHIEVEMENT_STATISTICS_SYNC'):
        return getattr(guard_proto_pb2, 'SCDT_ACHIEVEMENT_STATISTICS_SYNC')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ACHIEVEMENT_STATISTICS_SYNC'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ACHIEVEMENT_STATISTICS_SYNC')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GET_ACHIEVEMENT_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GET_ACHIEVEMENT_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GET_ACHIEVEMENT_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GET_ACHIEVEMENT_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ACHIEVEMENT_COMPELETE'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ACHIEVEMENT_COMPELETE')()
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_RESOURCE_BOX_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_ACTIVITY_RESOURCE_BOX_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_TIME_RECHARGE_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_ACTIVITY_TIME_RECHARGE_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_OPEN_RECHARGE_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_ACTIVITY_OPEN_RECHARGE_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_ACTIVITY_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_CONTROL'):
        return getattr(guard_proto_pb2, 'SCDT_ACTIVITY_CONTROL')()
    
    if hash == StringHash.calculate_hash('CSDT_ACTIVITY_BROADCAST'):
        return getattr(guard_proto_pb2, 'CSDT_ACTIVITY_BROADCAST')()
    
    if hash == StringHash.calculate_hash('CSDT_ACTIVITY_STATUS_BROADCAST'):
        return getattr(guard_proto_pb2, 'CSDT_ACTIVITY_STATUS_BROADCAST')()
    
    if hash == StringHash.calculate_hash('SCPKG_ACTIVITY_CONTROL'):
        return getattr(guard_proto_pb2, 'SCPKG_ACTIVITY_CONTROL')()
    
    if hash == StringHash.calculate_hash('SCPKG_ACTIVITY_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_ACTIVITY_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_BROAD_MSG'):
        return getattr(guard_proto_pb2, 'CSDT_BROAD_MSG')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_BROADCAST'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_BROADCAST')()
    
    if hash == StringHash.calculate_hash('SCPKG_GAME_PLAY_MODE_ACTIVITY_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_GAME_PLAY_MODE_ACTIVITY_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_OPEN_RESOURCE_BOX_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_OPEN_RESOURCE_BOX_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_OPEN_RESOURCE_BOX_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_OPEN_RESOURCE_BOX_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_ACTIVITY_RESOURCE_BOX_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_ACTIVITY_RESOURCE_BOX_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_COUNT_TO_REWARD_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_COUNT_TO_REWARD_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_COUNT_TO_REWARD_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_COUNT_TO_REWARD_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_ACTIVITY_DISCOUNT'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_ACTIVITY_DISCOUNT')()
    
    if hash == StringHash.calculate_hash('SCDT_RECHARGE_REWARD'):
        return getattr(guard_proto_pb2, 'SCDT_RECHARGE_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_DAILY_RECHARGE'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_REWARD_DAILY_RECHARGE')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_SECT_RECHARGE'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_REWARD_SECT_RECHARGE')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_PRIZEDROW_COUNT'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_REWARD_PRIZEDROW_COUNT')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_RESOURCE_BOX'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_REWARD_RESOURCE_BOX')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_TIME_RECHARGE'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_REWARD_TIME_RECHARGE')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_OPEN_RECHARGE'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_REWARD_OPEN_RECHARGE')()
    
    if hash == StringHash.calculate_hash('CSPKG_ITEM_COLLECT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_ITEM_COLLECT_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_ITEM_COLLECT_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_ITEM_COLLECT_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_TIME_RECHARGE_REWARD_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_TIME_RECHARGE_REWARD_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_TIME_RECHARGE_REWARD_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TIME_RECHARGE_REWARD_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_TIME_RECHARGE'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_TIME_RECHARGE')()
    
    if hash == StringHash.calculate_hash('CSPKG_OPEN_RECHARGE_REWARD_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_OPEN_RECHARGE_REWARD_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_OPEN_RECHARGE_REWARD_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_OPEN_RECHARGE_REWARD_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_OPEN_RECHARGE'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_OPEN_RECHARGE')()
    
    if hash == StringHash.calculate_hash('CSPKG_ENTER_BOSSRUSH_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_ENTER_BOSSRUSH_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_BOSSRUSH_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_BOSSRUSH_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_HP_REMAIN_CHANGE'):
        return getattr(guard_proto_pb2, 'SCPKG_HP_REMAIN_CHANGE')()
    
    if hash == StringHash.calculate_hash('SCPKG_BOSSRUSH_HERO_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_BOSSRUSH_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('ST_BOSS_RUSH_FRIEND_HERO_DETAIL'):
        return getattr(guard_proto_pb2, 'ST_BOSS_RUSH_FRIEND_HERO_DETAIL')()
    
    if hash == StringHash.calculate_hash('SCPKG_ENTER_BOSSRUSH_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_ENTER_BOSSRUSH_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_BOSSRUSH_REPLACE_MAIN_HERO'):
        return getattr(guard_proto_pb2, 'CSPKG_BOSSRUSH_REPLACE_MAIN_HERO')()
    
    if hash == StringHash.calculate_hash('CSPKG_BOSSRUSH_REPLACE_PARTNER_HERO'):
        return getattr(guard_proto_pb2, 'CSPKG_BOSSRUSH_REPLACE_PARTNER_HERO')()
    
    if hash == StringHash.calculate_hash('CSPKG_BOSSRUSH_ENTER_DUN'):
        return getattr(guard_proto_pb2, 'CSPKG_BOSSRUSH_ENTER_DUN')()
    
    if hash == StringHash.calculate_hash('SCPKG_BOSSRUSH_ENTER_DUN_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_BOSSRUSH_ENTER_DUN_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_BOSSRUSH_REPLACE_BOSS'):
        return getattr(guard_proto_pb2, 'CSPKG_BOSSRUSH_REPLACE_BOSS')()
    
    if hash == StringHash.calculate_hash('CSPKG_BOSSRUSH_SELECT_HERO_CONFIRM'):
        return getattr(guard_proto_pb2, 'CSPKG_BOSSRUSH_SELECT_HERO_CONFIRM')()
    
    if hash == StringHash.calculate_hash('SCPKG_BOSSRUSH_REPLACE_BOSS_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_BOSSRUSH_REPLACE_BOSS_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_REPLACE_ASSISTANT_HERO'):
        return getattr(guard_proto_pb2, 'CSPKG_REPLACE_ASSISTANT_HERO')()
    
    if hash == StringHash.calculate_hash('CSPKG_CLEAR_ASSISTANT_HERO'):
        return getattr(guard_proto_pb2, 'CSPKG_CLEAR_ASSISTANT_HERO')()
    
    if hash == StringHash.calculate_hash('CSPKG_CLAIM_ASSISTANT_HERO_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_CLAIM_ASSISTANT_HERO_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_ASSISTANT_HERO_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_ASSISTANT_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_REQUEST_FRIEND_ASSISTANT_HERO'):
        return getattr(guard_proto_pb2, 'CSPKG_REQUEST_FRIEND_ASSISTANT_HERO')()
    
    if hash == StringHash.calculate_hash('CSPKG_RESET_CURRENT_BOSSRUSH'):
        return getattr(guard_proto_pb2, 'CSPKG_RESET_CURRENT_BOSSRUSH')()
    
    if hash == StringHash.calculate_hash('FRIEND_ASSISTANT_HERO'):
        return getattr(guard_proto_pb2, 'FRIEND_ASSISTANT_HERO')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_ASSISSTANT_HERO_CAN_USE'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_ASSISSTANT_HERO_CAN_USE')()
    
    if hash == StringHash.calculate_hash('CSPKGG_REPLACE_FRIEND_ASSISTANT_HERO'):
        return getattr(guard_proto_pb2, 'CSPKGG_REPLACE_FRIEND_ASSISTANT_HERO')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_CURRENT_ASSISSTANT_HERO'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_CURRENT_ASSISSTANT_HERO')()
    
    if hash == StringHash.calculate_hash('CSDT_BUILDING_BASE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_BUILDING_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_RES_STORE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_RES_STORE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_ISLAND_DEFEND_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_ISLAND_DEFEND_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_ISLAND_BORNINFO'):
        return getattr(guard_proto_pb2, 'CSDT_ISLAND_BORNINFO')()
    
    if hash == StringHash.calculate_hash('CSDT_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_ISLAND_GAININFO'):
        return getattr(guard_proto_pb2, 'CSDT_ISLAND_GAININFO')()
    
    if hash == StringHash.calculate_hash('CSDT_BUILDING_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_BUILDING_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_BUILDING_LEVELUP'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_BUILDING_LEVELUP')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_BUILDING_LEVELUP_BEG'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_BUILDING_LEVELUP_BEG')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_BUILDING_LEVELUP_END'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_BUILDING_LEVELUP_END')()
    
    if hash == StringHash.calculate_hash('SCDT_BUILDING_SIMPLE_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_BUILDING_SIMPLE_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_UNLOCK_BUILDING'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_UNLOCK_BUILDING')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_BUILDING_LEVELUP_DIRECTLY'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_BUILDING_LEVELUP_DIRECTLY')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ISLAND_BORNRES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ISLAND_BORNRES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_SET_ISLAND_DEFEND'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_SET_ISLAND_DEFEND')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SET_ISLAND_DEFEND'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_SET_ISLAND_DEFEND')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GET_ISLAND_RESOURCE'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GET_ISLAND_RESOURCE')()
    
    if hash == StringHash.calculate_hash('SCDT_ISLAND_RESOURCE'):
        return getattr(guard_proto_pb2, 'SCDT_ISLAND_RESOURCE')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GET_ISLAND_RESOURCE'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GET_ISLAND_RESOURCE')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_MONTHLY_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_MONTHLY_REWARD')()
    
    if hash == StringHash.calculate_hash('CSDT_GROWTH_FUND_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GROWTH_FUND_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_CUMULATE_RECHARGE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_CUMULATE_RECHARGE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_GROUP_BUY_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GROUP_BUY_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_MONTH_CARD_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_MONTH_CARD_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_SUPERVALUE_CARD_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_SUPERVALUE_CARD_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_FIRSTREWARD_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_FIRSTREWARD_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_FIRSTPURCHASE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_FIRSTPURCHASE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_MONTHCARD_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_MONTHCARD_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_FIRSTPURCHASE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_FIRSTPURCHASE_RES')()
    
    if hash == StringHash.calculate_hash('CSDT_BUSINESS_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_BUSINESS_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_GROWTH_FUND_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_GROWTH_FUND_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_GROWTH_FUND_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_GROWTH_FUND_REWARD')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_CUMULATE_RECHARGE_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_CUMULATE_RECHARGE_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_CUMULATE_RECHARGE_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_CUMULATE_RECHARGE_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_CUMULATE_RECHARGE_DAILY_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_CUMULATE_RECHARGE_DAILY_REWARD')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_FIRST_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_FIRST_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_FIRST_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_FIRST_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_MONTH_CARD_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_BUY_MONTH_CARD_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_SUPERVALUE_CARD_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_BUY_SUPERVALUE_CARD_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_CUMULATECOST_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_CUMULATECOST_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_CUMULATECOST_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_CUMULATECOST_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_CUMULATECOST'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_CUMULATECOST')()
    
    if hash == StringHash.calculate_hash('SCPKG_DISP_CHATMSG'):
        return getattr(guard_proto_pb2, 'SCPKG_DISP_CHATMSG')()
    
    if hash == StringHash.calculate_hash('CSPKG_GROUP_BUY_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GROUP_BUY_REQ')()
    
    if hash == StringHash.calculate_hash('CSPKG_PRIZE_DRAW_FREE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_PRIZE_DRAW_FREE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_REMOVE_PRIVATE_MSG'):
        return getattr(guard_proto_pb2, 'SCPKG_REMOVE_PRIVATE_MSG')()
    
    if hash == StringHash.calculate_hash('SCPKG_GROUP_BUY_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GROUP_BUY_RES')()
    
    if hash == StringHash.calculate_hash('SCDT_VIP_PRIVILEGE'):
        return getattr(guard_proto_pb2, 'SCDT_VIP_PRIVILEGE')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_VIP_REFRESH'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_VIP_REFRESH')()
    
    if hash == StringHash.calculate_hash('SCPKG_GROUP_BUY_BEG'):
        return getattr(guard_proto_pb2, 'SCPKG_GROUP_BUY_BEG')()
    
    if hash == StringHash.calculate_hash('SCPKG_GROUP_BUY_END'):
        return getattr(guard_proto_pb2, 'SCPKG_GROUP_BUY_END')()
    
    if hash == StringHash.calculate_hash('SCPKG_GROUP_BUY_REFRESH'):
        return getattr(guard_proto_pb2, 'SCPKG_GROUP_BUY_REFRESH')()
    
    if hash == StringHash.calculate_hash('SCPKG_FIRST_REWARD_ACHIEVEMENT'):
        return getattr(guard_proto_pb2, 'SCPKG_FIRST_REWARD_ACHIEVEMENT')()
    
    if hash == StringHash.calculate_hash('SCPKG_SECT_REWARD_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_SECT_REWARD_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_DAILY_REWARD_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_DAILY_REWARD_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_SECT_RECHARGE_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_SECT_RECHARGE_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_SECT_RECHARGE_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_SECT_RECHARGE_REWARD')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_DAILY_RECHARGE_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_DAILY_RECHARGE_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_DAILY_RECHARGE_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_DAILY_RECHARGE_REWARD')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_MONTHCARD_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_MONTHCARD_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_MONTHCARD_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_MONTHCARD_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_MONTHCARD_REFRESH'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_MONTHCARD_REFRESH')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_SUPERVALUECARD_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_SUPERVALUECARD_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_SUPERVALUECARD_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_SUPERVALUECARD_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_SUPERVALUECARD_REFRESH'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_SUPERVALUECARD_REFRESH')()
    
    if hash == StringHash.calculate_hash('SCDT_VIP_DISCOUNT_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_VIP_DISCOUNT_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_VIP_DAILY_BUY_DISCOUNT'):
        return getattr(guard_proto_pb2, 'SCPKG_VIP_DAILY_BUY_DISCOUNT')()
    
    if hash == StringHash.calculate_hash('CSPKG_REMOVE_PRIVATE_MSG'):
        return getattr(guard_proto_pb2, 'CSPKG_REMOVE_PRIVATE_MSG')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_CHATMSG'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_CHATMSG')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_CHATMSG'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_CHATMSG')()
    
    if hash == StringHash.calculate_hash('SCPKG_CHAT_BAN_ERROR'):
        return getattr(guard_proto_pb2, 'SCPKG_CHAT_BAN_ERROR')()
    
    if hash == StringHash.calculate_hash('SCPKG_CHAT_FAST_ERROR'):
        return getattr(guard_proto_pb2, 'SCPKG_CHAT_FAST_ERROR')()
    
    if hash == StringHash.calculate_hash('CSPKG_REPORT_PLAYER_CHAT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_REPORT_PLAYER_CHAT_REQ')()
    
    if hash == StringHash.calculate_hash('NOTIFY_CITY_REWARD_ACQUIRED'):
        return getattr(guard_proto_pb2, 'NOTIFY_CITY_REWARD_ACQUIRED')()
    
    if hash == StringHash.calculate_hash('REQ_CITY_REWARD'):
        return getattr(guard_proto_pb2, 'REQ_CITY_REWARD')()
    
    if hash == StringHash.calculate_hash('RES_CITY_REWARD'):
        return getattr(guard_proto_pb2, 'RES_CITY_REWARD')()
    
    if hash == StringHash.calculate_hash('SCDT_CONTINUE_LOGIN_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_CONTINUE_LOGIN_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_CONLOGIN_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_CONLOGIN_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_CONLOGIN_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_CONLOGIN_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_CONLOGIN_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_CONLOGIN_REWARD')()
    
    if hash == StringHash.calculate_hash('CS_3RD_PLAFFORM_FRIEND_GET'):
        return getattr(guard_proto_pb2, 'CS_3RD_PLAFFORM_FRIEND_GET')()
    
    if hash == StringHash.calculate_hash('CS_BIND_3RD_PLATFORM_ID'):
        return getattr(guard_proto_pb2, 'CS_BIND_3RD_PLATFORM_ID')()
    
    if hash == StringHash.calculate_hash('MessageData'):
        return getattr(guard_proto_pb2, 'MessageData')()
    
    if hash == StringHash.calculate_hash('MessagePack'):
        return getattr(guard_proto_pb2, 'MessagePack')()
    
    if hash == StringHash.calculate_hash('SCPKG_CONNECT_KEEP'):
        return getattr(guard_proto_pb2, 'SCPKG_CONNECT_KEEP')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_CLT_SETBITMARK_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_CLT_SETBITMARK_REQ')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_SET_STORYBIT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_SET_STORYBIT_REQ')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GM_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GM_REQ')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GM_TEXT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GM_TEXT_REQ')()
    
    if hash == StringHash.calculate_hash('CSDT_GM_PARAMOBJ'):
        return getattr(guard_proto_pb2, 'CSDT_GM_PARAMOBJ')()
    
    if hash == StringHash.calculate_hash('CSPKG_VERIFY_ROOM_COMPLETE_TIME'):
        return getattr(guard_proto_pb2, 'CSPKG_VERIFY_ROOM_COMPLETE_TIME')()
    
    if hash == StringHash.calculate_hash('SCPKG_VERIFY_ROOM_COMPLETE_TIME_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_VERIFY_ROOM_COMPLETE_TIME_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_HEARTBEAT'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_HEARTBEAT')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_ERROR'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_ERROR')()
    
    if hash == StringHash.calculate_hash('SCPKG_ERROR_MSG'):
        return getattr(guard_proto_pb2, 'SCPKG_ERROR_MSG')()
    
    if hash == StringHash.calculate_hash('SCDT_NOTIFY_DATA'):
        return getattr(guard_proto_pb2, 'SCDT_NOTIFY_DATA')()
    
    if hash == StringHash.calculate_hash('SCDT_NOTIFY_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_NOTIFY_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_UNLOCKDUN_UNTILID'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_UNLOCKDUN_UNTILID')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_USE_ITEM'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_USE_ITEM')()
    
    if hash == StringHash.calculate_hash('CSDT_PACKOBJ_CHG_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_PACKOBJ_CHG_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_ACT_PACKOBJ_CHG'):
        return getattr(guard_proto_pb2, 'SCPKG_ACT_PACKOBJ_CHG')()
    
    if hash == StringHash.calculate_hash('CSDT_POS_COUNT_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_POS_COUNT_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_PACKAGE_POS_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_PACKAGE_POS_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_POS_COUNT'):
        return getattr(guard_proto_pb2, 'CSDT_POS_COUNT')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SLOT_OPEN'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_SLOT_OPEN')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_EXP_CHANGE'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_EXP_CHANGE')()
    
    if hash == StringHash.calculate_hash('CS_RECONNECT'):
        return getattr(guard_proto_pb2, 'CS_RECONNECT')()
    
    if hash == StringHash.calculate_hash('SCNOTIFY_RECONNECT_INFO'):
        return getattr(guard_proto_pb2, 'SCNOTIFY_RECONNECT_INFO')()
    
    if hash == StringHash.calculate_hash('SC_RECONNECT_EXTRA_INFO'):
        return getattr(guard_proto_pb2, 'SC_RECONNECT_EXTRA_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_GIFT_CODE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GIFT_CODE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GIFT_CODE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GIFT_CODE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_PURCHASE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_PURCHASE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_PURCHASE_ACCEPT'):
        return getattr(guard_proto_pb2, 'SCPKG_PURCHASE_ACCEPT')()
    
    if hash == StringHash.calculate_hash('CSDT_PURCHASE_REQUEST_DELIVERY'):
        return getattr(guard_proto_pb2, 'CSDT_PURCHASE_REQUEST_DELIVERY')()
    
    if hash == StringHash.calculate_hash('SCDT_PURCHASE_REQUEST_DELIVERY_FINISH'):
        return getattr(guard_proto_pb2, 'SCDT_PURCHASE_REQUEST_DELIVERY_FINISH')()
    
    if hash == StringHash.calculate_hash('CSPkgHead'):
        return getattr(guard_proto_pb2, 'CSPkgHead')()
    
    if hash == StringHash.calculate_hash('CSDT_ERROR'):
        return getattr(guard_proto_pb2, 'CSDT_ERROR')()
    
    if hash == StringHash.calculate_hash('SCPKG_DYNAMIC_CONFIG_REFRESH'):
        return getattr(guard_proto_pb2, 'SCPKG_DYNAMIC_CONFIG_REFRESH')()
    
    if hash == StringHash.calculate_hash('CSDT_UI_OPT'):
        return getattr(guard_proto_pb2, 'CSDT_UI_OPT')()
    
    if hash == StringHash.calculate_hash('CSPKG_USER_ACTION_LOG'):
        return getattr(guard_proto_pb2, 'CSPKG_USER_ACTION_LOG')()
    
    if hash == StringHash.calculate_hash('CSPKG_USER_CONFIG'):
        return getattr(guard_proto_pb2, 'CSPKG_USER_CONFIG')()
    
    if hash == StringHash.calculate_hash('CSPKG_SELL_RUBBISH'):
        return getattr(guard_proto_pb2, 'CSPKG_SELL_RUBBISH')()
    
    if hash == StringHash.calculate_hash('CSPKG_KICK_CLIENT'):
        return getattr(guard_proto_pb2, 'CSPKG_KICK_CLIENT')()
    
    if hash == StringHash.calculate_hash('SCPKG_DO_SOMETHING'):
        return getattr(guard_proto_pb2, 'SCPKG_DO_SOMETHING')()
    
    if hash == StringHash.calculate_hash('CSPKG_DO_SOMETHING_RES'):
        return getattr(guard_proto_pb2, 'CSPKG_DO_SOMETHING_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_IOS_ACCOUNT'):
        return getattr(guard_proto_pb2, 'CSPKG_IOS_ACCOUNT')()
    
    if hash == StringHash.calculate_hash('CSPKG_DIR_WORLD_INFO'):
        return getattr(guard_proto_pb2, 'CSPKG_DIR_WORLD_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_WORLD_HERO'):
        return getattr(guard_proto_pb2, 'SSDT_WORLD_HERO')()
    
    if hash == StringHash.calculate_hash('SCDT_WORLD_STAT'):
        return getattr(guard_proto_pb2, 'SCDT_WORLD_STAT')()
    
    if hash == StringHash.calculate_hash('SCPKG_DIR_WORLD_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_DIR_WORLD_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_IOS_BIND_GAMECENTER'):
        return getattr(guard_proto_pb2, 'CSPKG_IOS_BIND_GAMECENTER')()
    
    if hash == StringHash.calculate_hash('SCPKG_IOS_BIND_GAMECENTER_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_IOS_BIND_GAMECENTER_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_ACT_ALOGIN'):
        return getattr(guard_proto_pb2, 'CSPKG_ACT_ALOGIN')()
    
    if hash == StringHash.calculate_hash('CSPKG_ACT_ALOGIN_ADDITIONAL'):
        return getattr(guard_proto_pb2, 'CSPKG_ACT_ALOGIN_ADDITIONAL')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ALOGIN'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ALOGIN')()
    
    if hash == StringHash.calculate_hash('CSPKG_GAMECENTER_PRELOGIN'):
        return getattr(guard_proto_pb2, 'CSPKG_GAMECENTER_PRELOGIN')()
    
    if hash == StringHash.calculate_hash('SCPKG_GAMECENTER_PRELOGIN_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GAMECENTER_PRELOGIN_RES')()
    
    if hash == StringHash.calculate_hash('CSDT_DUN_UNLOCK_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_DUN_UNLOCK_DATA')()
    
    if hash == StringHash.calculate_hash('CSDT_PVE_CHALLENGE_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_PVE_CHALLENGE_DATA')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_RELIVE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_RELIVE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_RELIVE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_RELIVE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_PAUSE_GAME'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_PAUSE_GAME')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_CONTINUE_GAME'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_CONTINUE_GAME')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_CONTINUE_GAME'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_CONTINUE_GAME')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_ENTER_ROOM'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_ENTER_ROOM')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENTER_ROOM'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ENTER_ROOM')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROOM_TIMEOUT'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROOM_TIMEOUT')()
    
    if hash == StringHash.calculate_hash('CSPKG_DUNGEON_UNLOCK'):
        return getattr(guard_proto_pb2, 'CSPKG_DUNGEON_UNLOCK')()
    
    if hash == StringHash.calculate_hash('SCPKG_UNLOCK_DUNGEON'):
        return getattr(guard_proto_pb2, 'SCPKG_UNLOCK_DUNGEON')()
    
    if hash == StringHash.calculate_hash('CSPKG_WIPE_OUT_PVE_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_WIPE_OUT_PVE_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_WIPE_OUT_PVE_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_WIPE_OUT_PVE_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_WIPE_OUT_ITEM_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_BUY_WIPE_OUT_ITEM_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_WIPE_OUT_ITEM_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_BUY_WIPE_OUT_ITEM_RES')()
    
    if hash == StringHash.calculate_hash('SCDT_PVEUNLOCK_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_PVEUNLOCK_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PVEUNLOCK'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PVEUNLOCK')()
    
    if hash == StringHash.calculate_hash('ST_ELITE_DUNGEON_CHANCE_INFO'):
        return getattr(guard_proto_pb2, 'ST_ELITE_DUNGEON_CHANCE_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_REFRESH_ELITE_DUNGEON_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_REFRESH_ELITE_DUNGEON_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_ELITE_COUNT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_BUY_ELITE_COUNT_REQ')()
    
    if hash == StringHash.calculate_hash('CSDT_ENTER_ONLINE_BATTLE_DUN_PARAM'):
        return getattr(guard_proto_pb2, 'CSDT_ENTER_ONLINE_BATTLE_DUN_PARAM')()
    
    if hash == StringHash.calculate_hash('CSDT_ENTER_ENDLESS_DUN_PARAM'):
        return getattr(guard_proto_pb2, 'CSDT_ENTER_ENDLESS_DUN_PARAM')()
    
    if hash == StringHash.calculate_hash('CSDT_ENTER_MULTIPLAYER_PVE_DUN_PARAM'):
        return getattr(guard_proto_pb2, 'CSDT_ENTER_MULTIPLAYER_PVE_DUN_PARAM')()
    
    if hash == StringHash.calculate_hash('CSDT_ENTER_DUN_PARAM'):
        return getattr(guard_proto_pb2, 'CSDT_ENTER_DUN_PARAM')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_PLAYER_ENTERDUN'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_PLAYER_ENTERDUN')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_PLAYER_ENTERDUN_INDUN'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_PLAYER_ENTERDUN_INDUN')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_QUIT_DUN'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_QUIT_DUN')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_QUIT_DUN'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_QUIT_DUN')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_ENTER_PRACTICEDUN'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_ENTER_PRACTICEDUN')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENTER_PRACTICEDUN'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ENTER_PRACTICEDUN')()
    
    if hash == StringHash.calculate_hash('CSDT_CMD_DUN_EVALUATEINFO'):
        return getattr(guard_proto_pb2, 'CSDT_CMD_DUN_EVALUATEINFO')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_PVE_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_PVE_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_BOSSRUSH_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_BOSSRUSH_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_ENDLESS_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_ENDLESS_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_PRACTICE_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_PRACTICE_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_ONLINE_BATTLE_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_ONLINE_BATTLE_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_WORLD_BOSS_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_WORLD_BOSS_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_MULTIPLAYER_PVE_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_MULTIPLAYER_PVE_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('SCPKG_DUNGEON_COMBAT_SWITCH'):
        return getattr(guard_proto_pb2, 'SCPKG_DUNGEON_COMBAT_SWITCH')()
    
    if hash == StringHash.calculate_hash('CSDT_DUNGEON_COMBAT_RECORD'):
        return getattr(guard_proto_pb2, 'CSDT_DUNGEON_COMBAT_RECORD')()
    
    if hash == StringHash.calculate_hash('CSPKG_DUNGEON_COMBAT_REPORT'):
        return getattr(guard_proto_pb2, 'CSPKG_DUNGEON_COMBAT_REPORT')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_PLAYER_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_PLAYER_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PRACTICE_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PRACTICE_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_DUNBALANCE_ENDLESS'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PLAYER_DUNBALANCE_ENDLESS')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_DUNBALANCE_ONLINE_BATTLE'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PLAYER_DUNBALANCE_ONLINE_BATTLE')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PLAYER_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_ENTERDUN'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PLAYER_ENTERDUN')()
    
    if hash == StringHash.calculate_hash('CSDT_TOWER_HERO'):
        return getattr(guard_proto_pb2, 'CSDT_TOWER_HERO')()
    
    if hash == StringHash.calculate_hash('CSDT_TOWER_HERO_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_TOWER_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_TOWER_CHALLENGE_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_TOWER_CHALLENGE_DATA')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENDLESS_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ENDLESS_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_REPORT_MST_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_REPORT_MST_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_REPORT_ENDLESS_ROOM_SCORE'):
        return getattr(guard_proto_pb2, 'CSPKG_REPORT_ENDLESS_ROOM_SCORE')()
    
    if hash == StringHash.calculate_hash('SCPKG_REPORT_ENDLESS_ROOM_SCORE'):
        return getattr(guard_proto_pb2, 'SCPKG_REPORT_ENDLESS_ROOM_SCORE')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENDLESS_INTERVAL_BEG'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ENDLESS_INTERVAL_BEG')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENDLESS_INTERVAL_END'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ENDLESS_INTERVAL_END')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_RESET_ENDLESS_ROOM'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_RESET_ENDLESS_ROOM')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_RESET_ENDLESS_ROOM'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_RESET_ENDLESS_ROOM')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENDLESS_REFRESH'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ENDLESS_REFRESH')()
    
    if hash == StringHash.calculate_hash('CSPKG_WIPE_OUT_ENDLESS_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_WIPE_OUT_ENDLESS_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_WIPE_OUT_ENDLESS_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_WIPE_OUT_ENDLESS_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_AFTER_WIPE_OUT_CANCEL_ENDLESS_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_AFTER_WIPE_OUT_CANCEL_ENDLESS_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_AFTER_WIPE_OUT_CANCEL_ENDLESS_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_AFTER_WIPE_OUT_CANCEL_ENDLESS_RES')()
    
    if hash == StringHash.calculate_hash('CSDT_EQUIP_CHG_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_EQUIP_CHG_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_ALL'):
        return getattr(guard_proto_pb2, 'SCPKG_EQUIP_ALL')()
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_CHG'):
        return getattr(guard_proto_pb2, 'SCPKG_EQUIP_CHG')()
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_GOT_RECORD'):
        return getattr(guard_proto_pb2, 'SCPKG_EQUIP_GOT_RECORD')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_WEAR_FROM_PACKAGE'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_WEAR_FROM_PACKAGE')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_UNWEAR'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_UNWEAR')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_HERO_ATTR'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_HERO_ATTR')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_REARRANGE'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_REARRANGE')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_LEVELUP'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_LEVELUP')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_WAKEUP'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_WAKEUP')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_GROWUP_MATERIAL'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_GROWUP_MATERIAL')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_GROWUP'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_GROWUP')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_SELL'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_SELL')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_BATCH_SELL'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_BATCH_SELL')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIPED_INFO'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIPED_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_USE_EQUIP_BOX'):
        return getattr(guard_proto_pb2, 'CSPKG_USE_EQUIP_BOX')()
    
    if hash == StringHash.calculate_hash('SCPKG_USE_EQUIP_BOX'):
        return getattr(guard_proto_pb2, 'SCPKG_USE_EQUIP_BOX')()
    
    if hash == StringHash.calculate_hash('CSDT_EQUIP_POS_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_EQUIP_POS_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_PURIFY_EQUIP_POS'):
        return getattr(guard_proto_pb2, 'CSPKG_PURIFY_EQUIP_POS')()
    
    if hash == StringHash.calculate_hash('SCPKG_PURIFY_EQUIP_POS'):
        return getattr(guard_proto_pb2, 'SCPKG_PURIFY_EQUIP_POS')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_FUSION_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_FUSION_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_FUSION_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_EQUIP_FUSION_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_EQUIP_FUSION_ADDTION_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_BUY_EQUIP_FUSION_ADDTION_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_EQUIP_FUSION_ADDTION_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_BUY_EQUIP_FUSION_ADDTION_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_RESET_RESULT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_RESET_RESULT_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_RESET_RESULT_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_EQUIP_RESET_RESULT_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_RESET_CONFIRM_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_EQUIP_RESET_CONFIRM_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_RESET_CONFIRM_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_EQUIP_RESET_CONFIRM_RES')()
    
    if hash == StringHash.calculate_hash('SCDT_NOTIFY_FACTOR_DATA'):
        return getattr(guard_proto_pb2, 'SCDT_NOTIFY_FACTOR_DATA')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_FACTOR_CHANGE'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_FACTOR_CHANGE')()
    
    if hash == StringHash.calculate_hash('SCDT_NOTIFY_HERO_FACTOR_DATA'):
        return getattr(guard_proto_pb2, 'SCDT_NOTIFY_HERO_FACTOR_DATA')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_HERO_FACTOR'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_HERO_FACTOR')()
    
    if hash == StringHash.calculate_hash('CSPKG_REMOVE_EMBEDED_FACTOR'):
        return getattr(guard_proto_pb2, 'CSPKG_REMOVE_EMBEDED_FACTOR')()
    
    if hash == StringHash.calculate_hash('CSPKG_EMBED_FACTOR'):
        return getattr(guard_proto_pb2, 'CSPKG_EMBED_FACTOR')()
    
    if hash == StringHash.calculate_hash('CSPKG_REMOVE_ALL_EMBEDED_FACTORS'):
        return getattr(guard_proto_pb2, 'CSPKG_REMOVE_ALL_EMBEDED_FACTORS')()
    
    if hash == StringHash.calculate_hash('CSPKG_UPGRADE_ALL_FACTORS'):
        return getattr(guard_proto_pb2, 'CSPKG_UPGRADE_ALL_FACTORS')()
    
    if hash == StringHash.calculate_hash('CSPKG_UPGRADE_FACTOR'):
        return getattr(guard_proto_pb2, 'CSPKG_UPGRADE_FACTOR')()
    
    if hash == StringHash.calculate_hash('SCDT_FRIEND_BASE_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_FRIEND_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_FRIEND_ID'):
        return getattr(guard_proto_pb2, 'CSDT_FRIEND_ID')()
    
    if hash == StringHash.calculate_hash('CSDT_FRIEND_HERO_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_FRIEND_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_OPT_FRIEND_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_OPT_FRIEND_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_OPT_FRIEND_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_OPT_FRIEND_RES')()
    
    if hash == StringHash.calculate_hash('SCDT_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_FRIEND_APPLY_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_FRIEND_APPLY_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_FRIEND_RECOMMAND_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_FRIEND_RECOMMAND_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_PLAYER_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_PLAYER_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_LOGIN_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_LOGIN_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_SOCIAL_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_SOCIAL_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_SOCIAL_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_SOCIAL_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_SOCIAL_FRIEND_INFO_CHANGE'):
        return getattr(guard_proto_pb2, 'SCPKG_SOCIAL_FRIEND_INFO_CHANGE')()
    
    if hash == StringHash.calculate_hash('CSPKG_RECV_POWER_FROM_SOCIAL_FRIEND'):
        return getattr(guard_proto_pb2, 'CSPKG_RECV_POWER_FROM_SOCIAL_FRIEND')()
    
    if hash == StringHash.calculate_hash('SCPKG_NOTIFY_SOCIAL_FRIEND_ERROR'):
        return getattr(guard_proto_pb2, 'SCPKG_NOTIFY_SOCIAL_FRIEND_ERROR')()
    
    if hash == StringHash.calculate_hash('CSPKG_SEND_POWER_TO_SOCIAL_FRIEND'):
        return getattr(guard_proto_pb2, 'CSPKG_SEND_POWER_TO_SOCIAL_FRIEND')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_RECOMMAND_FRIEND_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_RECOMMAND_FRIEND_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_RECOMMAND_FRIEND_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_RECOMMAND_FRIEND_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_NOTIFY_APPLYLIST_CHG_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_NOTIFY_APPLYLIST_CHG_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY')()
    
    if hash == StringHash.calculate_hash('CSPKG_FRIEND_RECV_POWER_ALL_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_FRIEND_RECV_POWER_ALL_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_RECV_POWER_ALL_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_RECV_POWER_ALL_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_FRIEND_SEND_POWER_ALL_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_FRIEND_SEND_POWER_ALL_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_SEND_POWER_ALL_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_SEND_POWER_ALL_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_DISP_INFO_CHG'):
        return getattr(guard_proto_pb2, 'SCPKG_FRIEND_DISP_INFO_CHG')()
    
    if hash == StringHash.calculate_hash('SCDT_INVITE_STATE_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_INVITE_STATE_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_INVITE_STATE_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_INVITE_STATE_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_REQUEST_INVITED_FRIEND'):
        return getattr(guard_proto_pb2, 'CSPKG_REQUEST_INVITED_FRIEND')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_INVITED_ERROR'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_INVITED_ERROR')()
    
    if hash == StringHash.calculate_hash('SCPKG_INVITED_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_INVITED_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_REQUEST_INVITE_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_REQUEST_INVITE_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_APPLY_INVITED_CODE'):
        return getattr(guard_proto_pb2, 'SCPKG_APPLY_INVITED_CODE')()
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_STRONG_POINT_HERO_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_CITY_STRONG_POINT_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_STRONG_POINT'):
        return getattr(guard_proto_pb2, 'ST_GANG_CITY_STRONG_POINT')()
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_CITY_INFO')()
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY'):
        return getattr(guard_proto_pb2, 'ST_GANG_CITY')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_MEM_INFO')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_LIST'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_MEM_LIST')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_ATTACK_POINT_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_ATTACK_POINT_INFO')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_ATTACK_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_MEM_ATTACK_INFO')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_ATTACK_LIST'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_MEM_ATTACK_LIST')()
    
    if hash == StringHash.calculate_hash('CSDT_GANG_APPLYLIST_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GANG_APPLYLIST_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_GANGSIMPLE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GANGSIMPLE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_GANGLIST_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GANGLIST_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_GANGMEM_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GANGMEM_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_GANG_SELF_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GANG_SELF_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_GANG_BATTLE_HISTORY_MEM_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GANG_BATTLE_HISTORY_MEM_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_GANG_BATTLE_HISTORY_MEM_LIST'):
        return getattr(guard_proto_pb2, 'CSDT_GANG_BATTLE_HISTORY_MEM_LIST')()
    
    if hash == StringHash.calculate_hash('CSDT_GANG_BATTLE_HISTORY_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GANG_BATTLE_HISTORY_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_CREATEGANG_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_CREATEGANG_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_CREATEGANG_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_CREATEGANG_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANGLIST_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GANGLIST_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANGLIST_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANGLIST_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_GANG'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROLELOGIN_GANG')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_APPLY_GANG_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_APPLY_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_APPLY_GANG_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_APPLY_GANG_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_QUIT_GANG_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_QUIT_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_QUIT_GANG_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_QUIT_GANG_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_TRANSFER_GANG_LEADER_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_TRANSFER_GANG_LEADER_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_TRANSFER_GANG_LEADER_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TRANSFER_GANG_LEADER_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_MEMLIST_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GANG_MEMLIST_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_MEMLIST_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_MEMLIST_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_DETAIL_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GANG_DETAIL_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_DETAIL_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_DETAIL_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_MEM_LIST_CHG_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_MEM_LIST_CHG_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BLESS_RANK_CLEAR_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GANG_BLESS_RANK_CLEAR_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_UPDATE_BASIC_INFO_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GANG_UPDATE_BASIC_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_SEARCH_GANG_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_SEARCH_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SEARCH_GANG_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_SEARCH_GANG_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_UPDATE_BASIC_INFO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_UPDATE_BASIC_INFO_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_APPROVE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GANG_APPROVE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_APPROVE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_APPROVE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_CHAT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GANG_CHAT_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_CHAT_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_CHAT_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_APPLYLIST_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GANG_APPLYLIST_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_APPLYLIST_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_APPLYLIST_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_APPROVETOMEM_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_APPROVETOMEM_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_BASIC_INFO_CHG_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_BASIC_INFO_CHG_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_KICK_MEM_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GANG_KICK_MEM_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_KICK_MEM_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_KICK_MEM_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_SET_ELDER_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GANG_SET_ELDER_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_SET_ELDER_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GANG_SET_ELDER_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GANG_BLESS_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GANG_BLESS_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BLESS_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GANG_BLESS_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_GANG_BLESS_COUNT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_BUY_GANG_BLESS_COUNT_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_REFRESH_GANG_BLESS_INFO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_REFRESH_GANG_BLESS_INFO_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_SET_GANG_CITY_STRONG_POINT_HERO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_SET_GANG_CITY_STRONG_POINT_HERO_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_GANG_CITY_INFO_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_GANG_CITY_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_GANG_CITY_INFO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_GANG_CITY_INFO_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_APPLY_GANG_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_APPLY_GANG_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_APPLY_GANG_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_APPLY_GANG_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BATTLE_STATE_BROAD'):
        return getattr(guard_proto_pb2, 'SCPKG_GANG_BATTLE_STATE_BROAD')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_GANG_BATTLE_CITY_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_GANG_BATTLE_CITY_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_GANG_BATTLE_CITY_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_GANG_BATTLE_CITY_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BATTTLE_POINT_BROAD'):
        return getattr(guard_proto_pb2, 'SCPKG_GANG_BATTTLE_POINT_BROAD')()
    
    if hash == StringHash.calculate_hash('CSPKG_ENTER_GANG_BATTLE_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_ENTER_GANG_BATTLE_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_DEFENSE_HERO_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_DEFENSE_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_ENTER_GANG_BATTLE_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_ENTER_GANG_BATTLE_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GANG_BATTLE_DUNGEON_ROUND_BEGIN_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GANG_BATTLE_DUNGEON_ROUND_BEGIN_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BATTLE_DUNGEON_ROUND_BEGIN_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GANG_BATTLE_DUNGEON_ROUND_BEGIN_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GANG_BATTLE_BALANCE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GANG_BATTLE_BALANCE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BATTLE_BALANCE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GANG_BATTLE_BALANCE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GET_GANG_BATTLE_STATE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GET_GANG_BATTLE_STATE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GET_GANG_BATTLE_STATE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GET_GANG_BATTLE_STATE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GET_GANG_BATTLE_HISTORY_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GET_GANG_BATTLE_HISTORY_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GET_GANG_BATTLE_HISTORY_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GET_GANG_BATTLE_HISTORY_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_GANG_BATTLE_STATE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_GANG_BATTLE_STATE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_GANG_BATTLE_STATE_INFO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_GANG_BATTLE_STATE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_NAME_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_ACCOUNT_BY_NAME_REQ')()
    
    if hash == StringHash.calculate_hash('PLAYER_ACCOUNT_NAME_INFO'):
        return getattr(guard_proto_pb2, 'PLAYER_ACCOUNT_NAME_INFO')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_NAME_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_ACCOUNT_BY_NAME_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_UID_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_ACCOUNT_BY_UID_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_UID_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_ACCOUNT_BY_UID_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_WORLD_INFO_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_WORLD_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PLAYER_WORLD_INFO'):
        return getattr(guard_proto_pb2, 'PLAYER_WORLD_INFO')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_WORLD_INFO_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_WORLD_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BASE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_BASE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('HERO_EMBLEM_INFO'):
        return getattr(guard_proto_pb2, 'HERO_EMBLEM_INFO')()
    
    if hash == StringHash.calculate_hash('HERO_BASE_INFO'):
        return getattr(guard_proto_pb2, 'HERO_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BASE_INFO_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_BASE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_LIST_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_RANK_LIST_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_LIST_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_RANK_LIST_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_POS_BY_UID_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_RANK_POS_BY_UID_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_POS_BY_UID_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_RANK_POS_BY_UID_RES')()
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_FROM_RANK_REQ'):
        return getattr(guard_proto_pb2, 'GM_DEL_PLAYER_FROM_RANK_REQ')()
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_FROM_RANK_RES'):
        return getattr(guard_proto_pb2, 'GM_DEL_PLAYER_FROM_RANK_RES')()
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_FROM_GANG_REQ'):
        return getattr(guard_proto_pb2, 'GM_DEL_PLAYER_FROM_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_FROM_GANG_RES'):
        return getattr(guard_proto_pb2, 'GM_DEL_PLAYER_FROM_GANG_RES')()
    
    if hash == StringHash.calculate_hash('GM_GANG_BASE_INFO'):
        return getattr(guard_proto_pb2, 'GM_GANG_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('GM_GANG_MEM_BASE_INFO'):
        return getattr(guard_proto_pb2, 'GM_GANG_MEM_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('GM_GET_GANG_BASE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_GANG_BASE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_GANG_BASE_INFO_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_GANG_BASE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GM_MODIFY_GANG_BASE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'GM_MODIFY_GANG_BASE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('GM_MODIFY_GANG_BASE_INFO_RES'):
        return getattr(guard_proto_pb2, 'GM_MODIFY_GANG_BASE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_PVE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_PVE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('GM_PLAYER_PVE_INFO'):
        return getattr(guard_proto_pb2, 'GM_PLAYER_PVE_INFO')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_PVE_INFO_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_PVE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BUILDING_AND_PACKAGE_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_FIRST_PURCHASE'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_FIRST_PURCHASE')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_FIRST_PURCHASE_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_FIRST_PURCHASE_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BUILDING_AND_PACKAGE_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_TOTAL_RECHARGE_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_TOTAL_RECHARGE_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_TOTAL_RECHARGE_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_TOTAL_RECHARGE_RES')()
    
    if hash == StringHash.calculate_hash('GM_LOCK_PLAYER_REQ'):
        return getattr(guard_proto_pb2, 'GM_LOCK_PLAYER_REQ')()
    
    if hash == StringHash.calculate_hash('GM_LOCK_PLAYER_RES'):
        return getattr(guard_proto_pb2, 'GM_LOCK_PLAYER_RES')()
    
    if hash == StringHash.calculate_hash('GM_BAN_PLAYER_CHAT_REQ'):
        return getattr(guard_proto_pb2, 'GM_BAN_PLAYER_CHAT_REQ')()
    
    if hash == StringHash.calculate_hash('GM_BAN_PLAYER_CHAT_RES'):
        return getattr(guard_proto_pb2, 'GM_BAN_PLAYER_CHAT_RES')()
    
    if hash == StringHash.calculate_hash('GM_KICK_PLAYER_REQ'):
        return getattr(guard_proto_pb2, 'GM_KICK_PLAYER_REQ')()
    
    if hash == StringHash.calculate_hash('GM_KICK_PLAYER_RES'):
        return getattr(guard_proto_pb2, 'GM_KICK_PLAYER_RES')()
    
    if hash == StringHash.calculate_hash('GM_MAIL_ACC'):
        return getattr(guard_proto_pb2, 'GM_MAIL_ACC')()
    
    if hash == StringHash.calculate_hash('GM_MAIL_INFO'):
        return getattr(guard_proto_pb2, 'GM_MAIL_INFO')()
    
    if hash == StringHash.calculate_hash('GM_SEND_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'GM_SEND_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('GM_MAIL_RES_INFO'):
        return getattr(guard_proto_pb2, 'GM_MAIL_RES_INFO')()
    
    if hash == StringHash.calculate_hash('GM_SEND_MAIL_RES'):
        return getattr(guard_proto_pb2, 'GM_SEND_MAIL_RES')()
    
    if hash == StringHash.calculate_hash('GM_GAMESERVER_MAIL_CONDITION'):
        return getattr(guard_proto_pb2, 'GM_GAMESERVER_MAIL_CONDITION')()
    
    if hash == StringHash.calculate_hash('GM_SEND_GAMESERVER_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'GM_SEND_GAMESERVER_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('GM_SEND_GAMESERVER_MAIL_RES'):
        return getattr(guard_proto_pb2, 'GM_SEND_GAMESERVER_MAIL_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_GAMESERVER_MAIL_INFO_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_GAMESERVER_MAIL_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GAMESERVER_MAIL_INFO'):
        return getattr(guard_proto_pb2, 'GM_GAMESERVER_MAIL_INFO')()
    
    if hash == StringHash.calculate_hash('GM_GET_GAMESERVER_MAIL_INFO_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_GAMESERVER_MAIL_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GM_DEL_GAMESERVER_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'GM_DEL_GAMESERVER_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('GM_DEL_GAMESERVER_MAIL_RES'):
        return getattr(guard_proto_pb2, 'GM_DEL_GAMESERVER_MAIL_RES')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_ATTR_REQ'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_ATTR_REQ')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_ATTR_RES'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_ATTR_RES')()
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_EQUIPED_EQUIP_REQ'):
        return getattr(guard_proto_pb2, 'GM_DEL_PLAYER_EQUIPED_EQUIP_REQ')()
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_EQUIPED_EQUIP_RES'):
        return getattr(guard_proto_pb2, 'GM_DEL_PLAYER_EQUIPED_EQUIP_RES')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_HERO_LEVEL_REQ'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_HERO_LEVEL_REQ')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_HERO_LEVEL_RES'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_HERO_LEVEL_RES')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_VIP_LEVEL_REQ'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_VIP_LEVEL_REQ')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_VIP_LEVEL_RES'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_VIP_LEVEL_RES')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_UNLOCK_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_UNLOCK_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_UNLOCK_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_UNLOCK_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_MONTH_CARD_REQ'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_MONTH_CARD_REQ')()
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_MONTH_CARD_RES'):
        return getattr(guard_proto_pb2, 'GM_GET_PLAYER_MONTH_CARD_RES')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_MONTH_CARD_REQ'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_MONTH_CARD_REQ')()
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_MONTH_CARD_RES'):
        return getattr(guard_proto_pb2, 'GM_CHG_PLAYER_MONTH_CARD_RES')()
    
    if hash == StringHash.calculate_hash('GUARD_MSG_GAME_SVR'):
        return getattr(guard_proto_pb2, 'GUARD_MSG_GAME_SVR')()
    
    if hash == StringHash.calculate_hash('GUARD_COPY_GM_TEXT_REQ'):
        return getattr(guard_proto_pb2, 'GUARD_COPY_GM_TEXT_REQ')()
    
    if hash == StringHash.calculate_hash('GUARD_COPY_GM_TEXT_RES'):
        return getattr(guard_proto_pb2, 'GUARD_COPY_GM_TEXT_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_HERO_GROWUP'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_HERO_GROWUP')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_HERO_GROWUP'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_HERO_GROWUP')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_HERO_GROWUP_END'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_HERO_GROWUP_END')()
    
    if hash == StringHash.calculate_hash('SCDT_HERO_ATT_EFFECTED'):
        return getattr(guard_proto_pb2, 'SCDT_HERO_ATT_EFFECTED')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_EMBLEM_LEVELUP'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_EMBLEM_LEVELUP')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_EMBLEM_UNLOCK'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_EMBLEM_UNLOCK')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_UNLOCK_HERO'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_UNLOCK_HERO')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_LEVELUP_DIRECTLY'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_LEVELUP_DIRECTLY')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SPBORN_BEGIN'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_SPBORN_BEGIN')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SPBORN_END'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_SPBORN_END')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_SKILL_LEVELUP'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_SKILL_LEVELUP')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SKILL_LEVELUP'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_SKILL_LEVELUP')()
    
    if hash == StringHash.calculate_hash('NOTIFY_HERO_NEW_ROLE_BUFF'):
        return getattr(guard_proto_pb2, 'NOTIFY_HERO_NEW_ROLE_BUFF')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_EMBLEM_LEVELUP'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_EMBLEM_LEVELUP')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_ACTIVE_TALENT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_ACTIVE_TALENT_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ACTIVE_TALENT_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ACTIVE_TALENT_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_ACTIVE_TALENT_HIDE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_ACTIVE_TALENT_HIDE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ACTIVE_TALENT_HIDE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ACTIVE_TALENT_HIDE_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_TOTALABILITY_LEVEL'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_TOTALABILITY_LEVEL')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_PLAYER_LEVELUP'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_PLAYER_LEVELUP')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_LEVELUP'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PLAYER_LEVELUP')()
    
    if hash == StringHash.calculate_hash('SCDT_ATT_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_ATT_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_LEVELUPEDN'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PLAYER_LEVELUPEDN')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_BEHAVIOUR'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_BEHAVIOUR')()
    
    if hash == StringHash.calculate_hash('CSDT_MISC_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_MISC_DATA')()
    
    if hash == StringHash.calculate_hash('SCDT_PASSIVEHERO_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_PASSIVEHERO_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_HERO_ATTINFO'):
        return getattr(guard_proto_pb2, 'SCDT_HERO_ATTINFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_UNLOCK_HERO'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_UNLOCK_HERO')()
    
    if hash == StringHash.calculate_hash('CSDT_SKILL_INFO_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_SKILL_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('CSDT_HERO_INFO_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_HERO_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('CSDT_HERO_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_ROLE_ONLINE'):
        return getattr(guard_proto_pb2, 'CSDT_ROLE_ONLINE')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_ONLINE'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROLELOGIN_ONLINE')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_BUILDING'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROLELOGIN_BUILDING')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_HERO'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROLELOGIN_HERO')()
    
    if hash == StringHash.calculate_hash('CSDT_SELFDUN_HERO_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_SELFDUN_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_SELF_DUN_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_SELF_DUN_DATA')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLE_DUNGEON_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROLE_DUNGEON_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_GANGBATTLE_HERO'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROLELOGIN_GANGBATTLE_HERO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_RANK_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROLELOGIN_RANK_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_MISC'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROLELOGIN_MISC')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_FINISH'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROLELOGIN_FINISH')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_ACCEPT'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_ROLELOGIN_ACCEPT')()
    
    if hash == StringHash.calculate_hash('CSDT_MAIL_SYSTEM_ACC'):
        return getattr(guard_proto_pb2, 'CSDT_MAIL_SYSTEM_ACC')()
    
    if hash == StringHash.calculate_hash('CSDT_MAIL_SYSTEM_ACC_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_MAIL_SYSTEM_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_MAIL_REVENGE_ACC_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_MAIL_REVENGE_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_MAIL_ACC_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_MAIL_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_MAIL_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_MAIL_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_BRIEF_MAIL_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_BRIEF_MAIL_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_ROLELOGIN_GET_MAIL_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_ROLELOGIN_GET_MAIL_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_SEND_MAIL_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_SEND_MAIL_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_MAIL_LIST_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_MAIL_LIST_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_MAIL_LIST_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_MAIL_LIST_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_MAIL_DETAIL_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_MAIL_DETAIL_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_MAIL_DETAIL_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_MAIL_DETAIL_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_MAIL_READ_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_MAIL_READ_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_MAIL_READ_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_MAIL_READ_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_MAIL_DELETE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_MAIL_DELETE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_MAIL_DELETE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_MAIL_DELETE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_MAIL_GET_ACC_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_MAIL_GET_ACC_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_MAIL_GET_ACC_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_MAIL_GET_ACC_RES')()
    
    if hash == StringHash.calculate_hash('CSDT_OVERTIME_MAIL_ID'):
        return getattr(guard_proto_pb2, 'CSDT_OVERTIME_MAIL_ID')()
    
    if hash == StringHash.calculate_hash('SCPKG_OVERTIME_MAIL_CLR_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_OVERTIME_MAIL_CLR_RES')()
    
    if hash == StringHash.calculate_hash('CS_UINON_MAIL_ACC_INFO'):
        return getattr(guard_proto_pb2, 'CS_UINON_MAIL_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_MONSTER_STAT_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_MONSTER_STAT_DATA')()
    
    if hash == StringHash.calculate_hash('CSDT_MONSTER_JOB_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_MONSTER_JOB_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_MONSTER_INFO_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_MONSTER_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('CSDT_MONSTER_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_MONSTER_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_MONSTER_ATTINFO'):
        return getattr(guard_proto_pb2, 'SCDT_MONSTER_ATTINFO')()
    
    if hash == StringHash.calculate_hash('SCDT_ROOMMONSTER_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_ROOMMONSTER_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_ROOM_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_ROOM_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_UNLOCK_MONSTER_ATTINFO'):
        return getattr(guard_proto_pb2, 'SCDT_UNLOCK_MONSTER_ATTINFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_ONLINE_BATTLE_MATCH_MSG'):
        return getattr(guard_proto_pb2, 'CSPKG_ONLINE_BATTLE_MATCH_MSG')()
    
    if hash == StringHash.calculate_hash('CSPKG_MULTIPLAYER_PVE_DUN_MSG'):
        return getattr(guard_proto_pb2, 'CSPKG_MULTIPLAYER_PVE_DUN_MSG')()
    
    if hash == StringHash.calculate_hash('CSPKG_MULTIPLAYER_PVE_DUN_ROOM_OP_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_MULTIPLAYER_PVE_DUN_ROOM_OP_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_MULTIPLAYER_PVE_DUN_ROOM_OP_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_MULTIPLAYER_PVE_DUN_ROOM_OP_RES')()
    
    if hash == StringHash.calculate_hash('CSDT_MULTIPLAYER_PVE_DUN_PLAYER_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_MULTIPLAYER_PVE_DUN_PLAYER_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_MULTIPLAYER_PVE_DUN_ROLE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_MULTIPLAYER_PVE_DUN_ROLE_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_MULTIPLAYER_PVE_DUNBALANCE'):
        return getattr(guard_proto_pb2, 'SCPKG_MULTIPLAYER_PVE_DUNBALANCE')()
    
    if hash == StringHash.calculate_hash('SCPKG_MULTIPLAYER_PVE_CHALLENGE_DATA'):
        return getattr(guard_proto_pb2, 'SCPKG_MULTIPLAYER_PVE_CHALLENGE_DATA')()
    
    if hash == StringHash.calculate_hash('CSPKG_SET_OFFLINE_BATTLE_TITLE_ID_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_SET_OFFLINE_BATTLE_TITLE_ID_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_SET_OFFLINE_BATTLE_TITLE_ID_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_SET_OFFLINE_BATTLE_TITLE_ID_RES')()
    
    if hash == StringHash.calculate_hash('CSDT_OFFLINE_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_OFFLINE_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_OFFLINE_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_OFFLINE_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_OFFLINE_BATTLE_DEFEATED_LIST_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_OFFLINE_BATTLE_DEFEATED_LIST_REQ')()
    
    if hash == StringHash.calculate_hash('CSDT_OFFLINE_BATTLE_DEFEATED_LIST_ITEM'):
        return getattr(guard_proto_pb2, 'CSDT_OFFLINE_BATTLE_DEFEATED_LIST_ITEM')()
    
    if hash == StringHash.calculate_hash('SCPKG_OFFLINE_BATTLE_DEFEATED_LIST_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_OFFLINE_BATTLE_DEFEATED_LIST_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_OFFLINE_BATTLE_RESULT'):
        return getattr(guard_proto_pb2, 'CSPKG_OFFLINE_BATTLE_RESULT')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_CONF_INFO'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_CONF_INFO')()
    
    if hash == StringHash.calculate_hash('CCDT_CMD_ACTION_PARAM'):
        return getattr(guard_proto_pb2, 'CCDT_CMD_ACTION_PARAM')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_SETACTION'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_SETACTION')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_INPUTMSG'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_INPUTMSG')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_ADDROLE'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_ADDROLE')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_CHOOSE_ROLE_INFO'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_CHOOSE_ROLE_INFO')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_LOADING_PHASE'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_LOADING_PHASE')()
    
    if hash == StringHash.calculate_hash('CCDT_CMD_ROLE_INFO'):
        return getattr(guard_proto_pb2, 'CCDT_CMD_ROLE_INFO')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_ROUND_INFO'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_ROUND_INFO')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_ENTER_DUN'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_ENTER_DUN')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_SET_ROLE_ATTRIBUTE'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_SET_ROLE_ATTRIBUTE')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_ROLE_DEAD'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_ROLE_DEAD')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_STAGE_FINISH'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_STAGE_FINISH')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_COLLISION'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_COLLISION')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_READY'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_READY')()
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_READY_COUNT_DOWN'):
        return getattr(guard_proto_pb2, 'CCPKG_CMD_READY_COUNT_DOWN')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_ENTER_ONLINE_BATTLE_DUN'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PLAYER_ENTER_ONLINE_BATTLE_DUN')()
    
    if hash == StringHash.calculate_hash('CSDT_ONLINE_BATTLE_ROOM_ROLE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_ONLINE_BATTLE_ROOM_ROLE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_ONLINE_BATTLE_ROOM_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_ONLINE_BATTLE_ROOM_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME'):
        return getattr(guard_proto_pb2, 'SCDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME')()
    
    if hash == StringHash.calculate_hash('CSPKG_ONLINE_BATTLE_ROOM_OP_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_ONLINE_BATTLE_ROOM_OP_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_ONLINE_BATTLE_ROOM_OP_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_ONLINE_BATTLE_ROOM_OP_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_ONLINE_BATTLE_SHOP_BOX_BUY_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_ONLINE_BATTLE_SHOP_BOX_BUY_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_ONLINE_BATTLE_SHOP_BOX_BUY_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_ONLINE_BATTLE_SHOP_BOX_BUY_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_ONLINE_BATTLE_ROUND_FINISH'):
        return getattr(guard_proto_pb2, 'CSPKG_ONLINE_BATTLE_ROUND_FINISH')()
    
    if hash == StringHash.calculate_hash('CSPKG_SET_NAME'):
        return getattr(guard_proto_pb2, 'CSPKG_SET_NAME')()
    
    if hash == StringHash.calculate_hash('CSDT_RECOMMAND_NAME'):
        return getattr(guard_proto_pb2, 'CSDT_RECOMMAND_NAME')()
    
    if hash == StringHash.calculate_hash('SCPKG_SET_NAME'):
        return getattr(guard_proto_pb2, 'SCPKG_SET_NAME')()
    
    if hash == StringHash.calculate_hash('CSPKG_CHANGE_HEADPHOTO'):
        return getattr(guard_proto_pb2, 'CSPKG_CHANGE_HEADPHOTO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CHANGE_HEADPHOTO'):
        return getattr(guard_proto_pb2, 'SCPKG_CHANGE_HEADPHOTO')()
    
    if hash == StringHash.calculate_hash('CSPKG_RANDOM_NAME_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_RANDOM_NAME_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_RANDOM_NAME_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_RANDOM_NAME_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_REFRESH_DATA_ATTR'):
        return getattr(guard_proto_pb2, 'SCPKG_REFRESH_DATA_ATTR')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_POWER_RECOVER'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_POWER_RECOVER')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_RESEXCHANGE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_RESEXCHANGE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_RESEXCHANGE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_RESEXCHANGE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_BUY_POWER'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_BUY_POWER')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_BUY_POWER'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_BUY_POWER')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_BUY_SKILL_POINT'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_BUY_SKILL_POINT')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_BUY_SKILL_POINT'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_BUY_SKILL_POINT')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_RES_REFRESH'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_RES_REFRESH')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_POWER_REFRESH'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_POWER_REFRESH')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SKILL_POINT_REFRESH'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_SKILL_POINT_REFRESH')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_POWER_RECOVERBEG'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_POWER_RECOVERBEG')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_POWER_RECOVEREND'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_POWER_RECOVEREND')()
    
    if hash == StringHash.calculate_hash('CSPKG_PRIZE_DRAW_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_PRIZE_DRAW_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_PRIZE_DRAW_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_PRIZE_DRAW_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_PRIZE_DRAW_FREE_INFO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_PRIZE_DRAW_FREE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('SCDT_CUMULATE_COST_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_CUMULATE_COST_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_SECT_RECHARGE_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_SECT_RECHARGE_INFO')()
    
    if hash == StringHash.calculate_hash('SCDT_DAILY_RECHARGE_CNT'):
        return getattr(guard_proto_pb2, 'SCDT_DAILY_RECHARGE_CNT')()
    
    if hash == StringHash.calculate_hash('SCDT_DAILY_RECHARGE_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_DAILY_RECHARGE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_DROP_OBJINFO'):
        return getattr(guard_proto_pb2, 'CSDT_DROP_OBJINFO')()
    
    if hash == StringHash.calculate_hash('CSDT_DROP_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_DROP_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_ONLINE_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_ONLINE_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_EMBLEMINFO_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_EMBLEMINFO_DATA')()
    
    if hash == StringHash.calculate_hash('CSDT_GANGBATTLE_HERO_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GANGBATTLE_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_REFRESH_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_BUY_REFRESH_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_REFRESH_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_BUY_REFRESH_RES')()
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_PRIZE_DRAW_INFO'):
        return getattr(guard_proto_pb2, 'SCDT_ACTIVITY_PRIZE_DRAW_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_PVP_DUN_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_PVP_DUN_DATA')()
    
    if hash == StringHash.calculate_hash('CSDT_PVP_ISLAND_DEFENSE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_PVP_ISLAND_DEFENSE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_PVP_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_PVP_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_PVP_SEARCH_ISLAND_DEFENSE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_PVP_SEARCH_ISLAND_DEFENSE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_PVP_SELF_HERO'):
        return getattr(guard_proto_pb2, 'CSDT_PVP_SELF_HERO')()
    
    if hash == StringHash.calculate_hash('CSDT_PVP_SELF_HERO_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_PVP_SELF_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_PVP_SEARCH_STEAL_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_PVP_SEARCH_STEAL_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_SEARCH_PVP_PLAYER_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_SEARCH_PVP_PLAYER_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_SEARCH_PVP_PLAYER_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_SEARCH_PVP_PLAYER_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_STEAL_TARGET_STATE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_STEAL_TARGET_STATE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_STEAL_TARGET_STATE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_STEAL_TARGET_STATE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_WIPE_OUT_STEAL_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_WIPE_OUT_STEAL_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('ST_WIPE_OUT_STEAL_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'ST_WIPE_OUT_STEAL_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_WIPE_OUT_STEAL_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_WIPE_OUT_STEAL_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_ENTER_STEAL_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_ENTER_STEAL_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_STEAL_BATTLE_TIMES_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_STEAL_BATTLE_TIMES_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_ENTER_STEAL_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_ENTER_STEAL_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_STEAL_BATTLE_ROUND_BEGIN_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_STEAL_BATTLE_ROUND_BEGIN_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_STEAL_BATTLE_ROUND_BEGIN_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_STEAL_BATTLE_ROUND_BEGIN_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_BALANCE_STEAL_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_BALANCE_STEAL_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_BALANCE_STEAL_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_BALANCE_STEAL_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_STEAL_BATTLE_PRIZE_DRAW_GET_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_STEAL_BATTLE_PRIZE_DRAW_GET_REQ')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GET_DAILYTASK_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_GET_DAILYTASK_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GET_DAILYTASK_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_GET_DAILYTASK_REWARD')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_PRACTICEDUN_QUEST'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_PRACTICEDUN_QUEST')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_ACHIEVEMENT'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_ACHIEVEMENT')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_DAILYTASK_ITEM'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_DAILYTASK_ITEM')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_DAILYTASK_SYNC'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_DAILYTASK_SYNC')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_MAIN_TASK_ITEM'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_MAIN_TASK_ITEM')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_MAIN_TASK'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_MAIN_TASK')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_MAIN_TASK_REWARD_REQ'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_MAIN_TASK_REWARD_REQ')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_MAIN_TASK_REWARD_RES'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_MAIN_TASK_REWARD_RES')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_QUEST_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_QUEST_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_NEWBIE_ACTIVITY_ITEM'):
        return getattr(guard_proto_pb2, 'SCPKG_NEWBIE_ACTIVITY_ITEM')()
    
    if hash == StringHash.calculate_hash('SCPKG_NEWBIE_ACTIVITY_STATUS'):
        return getattr(guard_proto_pb2, 'SCPKG_NEWBIE_ACTIVITY_STATUS')()
    
    if hash == StringHash.calculate_hash('CSPKG_NEWBIE_ACTIVITY_CLAIM_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_NEWBIE_ACTIVITY_CLAIM_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_NEWBIE_ACTIVITY_CLAIM_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_NEWBIE_ACTIVITY_CLAIM_RES')()
    
    if hash == StringHash.calculate_hash('CSDT_RANK_VAL'):
        return getattr(guard_proto_pb2, 'CSDT_RANK_VAL')()
    
    if hash == StringHash.calculate_hash('CSDT_RANK_BATTLE_HERO_BRIEF'):
        return getattr(guard_proto_pb2, 'CSDT_RANK_BATTLE_HERO_BRIEF')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_BASE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_GANG_BASE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_GANG_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_RANK_DATA'):
        return getattr(guard_proto_pb2, 'CSDT_RANK_DATA')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_RANKLIST_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_RANKLIST_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_RANKLIST_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_RANKLIST_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_RANKPOS_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_RANKPOS_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_RANKPOS_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_RANKPOS_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_HISTORY_RANK_POS_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_HISTORY_RANK_POS_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_RANK_BASEINFO'):
        return getattr(guard_proto_pb2, 'CSDT_RANK_BASEINFO')()
    
    if hash == StringHash.calculate_hash('CSDT_RANKPOS_SEARCH_KEY'):
        return getattr(guard_proto_pb2, 'CSDT_RANKPOS_SEARCH_KEY')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_REWARD_ITEM'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_REWARD_ITEM')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_REWARD_DISPATCH'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_REWARD_DISPATCH')()
    
    if hash == StringHash.calculate_hash('RANK_RESET_INFO_ITEM'):
        return getattr(guard_proto_pb2, 'RANK_RESET_INFO_ITEM')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_RESET_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_RESET_INFO')()
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_RANK_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_PLAYER_RANK_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_SET_RANK_BATTLE_ORDER'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_SET_RANK_BATTLE_ORDER')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SET_RANK_BATTLE_ORDER'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_SET_RANK_BATTLE_ORDER')()
    
    if hash == StringHash.calculate_hash('CSDT_RANK_BATTLE_LEFT_COUNT'):
        return getattr(guard_proto_pb2, 'CSDT_RANK_BATTLE_LEFT_COUNT')()
    
    if hash == StringHash.calculate_hash('CS_RANK_BATTLE_DEFENSE_DATA'):
        return getattr(guard_proto_pb2, 'CS_RANK_BATTLE_DEFENSE_DATA')()
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_POS_UPDATE'):
        return getattr(guard_proto_pb2, 'CSPKG_RANK_BATTLE_POS_UPDATE')()
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_POS_UPDATE'):
        return getattr(guard_proto_pb2, 'SCPKG_RANK_BATTLE_POS_UPDATE')()
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ')()
    
    if hash == StringHash.calculate_hash('CSDT_RANK_BATTLE_FIGHT_TARGET_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_RANK_BATTLE_FIGHT_TARGET_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_ENTER_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_RANK_BATTLE_ENTER_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_ROUND_BEGIN_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_RANK_BATTLE_ROUND_BEGIN_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_ROUND_BEGIN_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_RANK_BATTLE_ROUND_BEGIN_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_BALANCE_ONEROUND_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_RANK_BATTLE_BALANCE_ONEROUND_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_BALANCE_ONEROUND_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_RANK_BATTLE_BALANCE_ONEROUND_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_BALANCE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_RANK_BATTLE_BALANCE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_BUY_COUNT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_RANK_BATTLE_BUY_COUNT_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_REFRESH_COUNT_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_RANK_BATTLE_REFRESH_COUNT_RES')()
    
    if hash == StringHash.calculate_hash('ResServerLocalization'):
        return getattr(guard_proto_pb2, 'ResServerLocalization')()
    
    if hash == StringHash.calculate_hash('ResDropIndexEx'):
        return getattr(guard_proto_pb2, 'ResDropIndexEx')()
    
    if hash == StringHash.calculate_hash('ResResourceInfo'):
        return getattr(guard_proto_pb2, 'ResResourceInfo')()
    
    if hash == StringHash.calculate_hash('ResPreRole'):
        return getattr(guard_proto_pb2, 'ResPreRole')()
    
    if hash == StringHash.calculate_hash('ResInitSkill'):
        return getattr(guard_proto_pb2, 'ResInitSkill')()
    
    if hash == StringHash.calculate_hash('ResNewRoleBuf'):
        return getattr(guard_proto_pb2, 'ResNewRoleBuf')()
    
    if hash == StringHash.calculate_hash('ResCost'):
        return getattr(guard_proto_pb2, 'ResCost')()
    
    if hash == StringHash.calculate_hash('ResHeadPhoto'):
        return getattr(guard_proto_pb2, 'ResHeadPhoto')()
    
    if hash == StringHash.calculate_hash('ResRoleGL'):
        return getattr(guard_proto_pb2, 'ResRoleGL')()
    
    if hash == StringHash.calculate_hash('ResChat'):
        return getattr(guard_proto_pb2, 'ResChat')()
    
    if hash == StringHash.calculate_hash('ResRoleRelationAddition'):
        return getattr(guard_proto_pb2, 'ResRoleRelationAddition')()
    
    if hash == StringHash.calculate_hash('ResRoleRelationSubtraction'):
        return getattr(guard_proto_pb2, 'ResRoleRelationSubtraction')()
    
    if hash == StringHash.calculate_hash('ResChipNumInfo'):
        return getattr(guard_proto_pb2, 'ResChipNumInfo')()
    
    if hash == StringHash.calculate_hash('ResEmblemSingleRequest'):
        return getattr(guard_proto_pb2, 'ResEmblemSingleRequest')()
    
    if hash == StringHash.calculate_hash('ResEmblem'):
        return getattr(guard_proto_pb2, 'ResEmblem')()
    
    if hash == StringHash.calculate_hash('ResStringArrayInfo'):
        return getattr(guard_proto_pb2, 'ResStringArrayInfo')()
    
    if hash == StringHash.calculate_hash('ResMonsterGL'):
        return getattr(guard_proto_pb2, 'ResMonsterGL')()
    
    if hash == StringHash.calculate_hash('ResPreMonster'):
        return getattr(guard_proto_pb2, 'ResPreMonster')()
    
    if hash == StringHash.calculate_hash('ResGroupMonster'):
        return getattr(guard_proto_pb2, 'ResGroupMonster')()
    
    if hash == StringHash.calculate_hash('ResMonsterLevel'):
        return getattr(guard_proto_pb2, 'ResMonsterLevel')()
    
    if hash == StringHash.calculate_hash('ResMonsterGroupLevel'):
        return getattr(guard_proto_pb2, 'ResMonsterGroupLevel')()
    
    if hash == StringHash.calculate_hash('ResGainSkill'):
        return getattr(guard_proto_pb2, 'ResGainSkill')()
    
    if hash == StringHash.calculate_hash('ResRoleLevelGrowUpAttr'):
        return getattr(guard_proto_pb2, 'ResRoleLevelGrowUpAttr')()
    
    if hash == StringHash.calculate_hash('ResRoleLevel'):
        return getattr(guard_proto_pb2, 'ResRoleLevel')()
    
    if hash == StringHash.calculate_hash('ResBuildingGL'):
        return getattr(guard_proto_pb2, 'ResBuildingGL')()
    
    if hash == StringHash.calculate_hash('ResLevelCost'):
        return getattr(guard_proto_pb2, 'ResLevelCost')()
    
    if hash == StringHash.calculate_hash('ResUnlockBuilding'):
        return getattr(guard_proto_pb2, 'ResUnlockBuilding')()
    
    if hash == StringHash.calculate_hash('ResBuildingLevel'):
        return getattr(guard_proto_pb2, 'ResBuildingLevel')()
    
    if hash == StringHash.calculate_hash('ResHeroTowerLevel'):
        return getattr(guard_proto_pb2, 'ResHeroTowerLevel')()
    
    if hash == StringHash.calculate_hash('ResIslandProduct'):
        return getattr(guard_proto_pb2, 'ResIslandProduct')()
    
    if hash == StringHash.calculate_hash('ResIslandLevel'):
        return getattr(guard_proto_pb2, 'ResIslandLevel')()
    
    if hash == StringHash.calculate_hash('ResResourceStoreLevel'):
        return getattr(guard_proto_pb2, 'ResResourceStoreLevel')()
    
    if hash == StringHash.calculate_hash('ResLevelArr'):
        return getattr(guard_proto_pb2, 'ResLevelArr')()
    
    if hash == StringHash.calculate_hash('ResInitHero'):
        return getattr(guard_proto_pb2, 'ResInitHero')()
    
    if hash == StringHash.calculate_hash('ResInitSlot'):
        return getattr(guard_proto_pb2, 'ResInitSlot')()
    
    if hash == StringHash.calculate_hash('ResOverHitProduction'):
        return getattr(guard_proto_pb2, 'ResOverHitProduction')()
    
    if hash == StringHash.calculate_hash('ResInitMonster'):
        return getattr(guard_proto_pb2, 'ResInitMonster')()
    
    if hash == StringHash.calculate_hash('ResInitUnlockDun'):
        return getattr(guard_proto_pb2, 'ResInitUnlockDun')()
    
    if hash == StringHash.calculate_hash('ResUnlockTrainSlot'):
        return getattr(guard_proto_pb2, 'ResUnlockTrainSlot')()
    
    if hash == StringHash.calculate_hash('ResInitBuildingInfo'):
        return getattr(guard_proto_pb2, 'ResInitBuildingInfo')()
    
    if hash == StringHash.calculate_hash('ResBuyWipeoutItemInfo'):
        return getattr(guard_proto_pb2, 'ResBuyWipeoutItemInfo')()
    
    if hash == StringHash.calculate_hash('ResPveUnlockInfo'):
        return getattr(guard_proto_pb2, 'ResPveUnlockInfo')()
    
    if hash == StringHash.calculate_hash('ResEndlessMonsterScore'):
        return getattr(guard_proto_pb2, 'ResEndlessMonsterScore')()
    
    if hash == StringHash.calculate_hash('ResGamePlayModeDamageRate'):
        return getattr(guard_proto_pb2, 'ResGamePlayModeDamageRate')()
    
    if hash == StringHash.calculate_hash('ResMiscInfo'):
        return getattr(guard_proto_pb2, 'ResMiscInfo')()
    
    if hash == StringHash.calculate_hash('ResGamePlayInfo'):
        return getattr(guard_proto_pb2, 'ResGamePlayInfo')()
    
    if hash == StringHash.calculate_hash('ResWorldBossStrength'):
        return getattr(guard_proto_pb2, 'ResWorldBossStrength')()
    
    if hash == StringHash.calculate_hash('ResWorldBossHeroTask'):
        return getattr(guard_proto_pb2, 'ResWorldBossHeroTask')()
    
    if hash == StringHash.calculate_hash('ResWorldBossRefreshInfo'):
        return getattr(guard_proto_pb2, 'ResWorldBossRefreshInfo')()
    
    if hash == StringHash.calculate_hash('ResWorldBossDamageReward'):
        return getattr(guard_proto_pb2, 'ResWorldBossDamageReward')()
    
    if hash == StringHash.calculate_hash('ResWorldBossNormalReward'):
        return getattr(guard_proto_pb2, 'ResWorldBossNormalReward')()
    
    if hash == StringHash.calculate_hash('ResMultiplayerPVEHeroBuff'):
        return getattr(guard_proto_pb2, 'ResMultiplayerPVEHeroBuff')()
    
    if hash == StringHash.calculate_hash('ResMultiplayerPVEConfig'):
        return getattr(guard_proto_pb2, 'ResMultiplayerPVEConfig')()
    
    if hash == StringHash.calculate_hash('ResMultiplayerPVEDungeonConfig'):
        return getattr(guard_proto_pb2, 'ResMultiplayerPVEDungeonConfig')()
    
    if hash == StringHash.calculate_hash('ResNewbieActivity'):
        return getattr(guard_proto_pb2, 'ResNewbieActivity')()
    
    if hash == StringHash.calculate_hash('ResGamePlayModeActivity'):
        return getattr(guard_proto_pb2, 'ResGamePlayModeActivity')()
    
    if hash == StringHash.calculate_hash('ResRankReward'):
        return getattr(guard_proto_pb2, 'ResRankReward')()
    
    if hash == StringHash.calculate_hash('ResHeroEvaluate'):
        return getattr(guard_proto_pb2, 'ResHeroEvaluate')()
    
    if hash == StringHash.calculate_hash('ResGangMiscInfo'):
        return getattr(guard_proto_pb2, 'ResGangMiscInfo')()
    
    if hash == StringHash.calculate_hash('ResGangBless'):
        return getattr(guard_proto_pb2, 'ResGangBless')()
    
    if hash == StringHash.calculate_hash('ResGangLevelInfo'):
        return getattr(guard_proto_pb2, 'ResGangLevelInfo')()
    
    if hash == StringHash.calculate_hash('ResGangBattleTime'):
        return getattr(guard_proto_pb2, 'ResGangBattleTime')()
    
    if hash == StringHash.calculate_hash('ResGangBattleReward'):
        return getattr(guard_proto_pb2, 'ResGangBattleReward')()
    
    if hash == StringHash.calculate_hash('ResRobotBuild'):
        return getattr(guard_proto_pb2, 'ResRobotBuild')()
    
    if hash == StringHash.calculate_hash('ResPvpRobot'):
        return getattr(guard_proto_pb2, 'ResPvpRobot')()
    
    if hash == StringHash.calculate_hash('ResPvpMisc'):
        return getattr(guard_proto_pb2, 'ResPvpMisc')()
    
    if hash == StringHash.calculate_hash('ResPvpSearchSect'):
        return getattr(guard_proto_pb2, 'ResPvpSearchSect')()
    
    if hash == StringHash.calculate_hash('ResStealBattlePrizeDraw'):
        return getattr(guard_proto_pb2, 'ResStealBattlePrizeDraw')()
    
    if hash == StringHash.calculate_hash('ResDunLimit'):
        return getattr(guard_proto_pb2, 'ResDunLimit')()
    
    if hash == StringHash.calculate_hash('ResDunEvaluate'):
        return getattr(guard_proto_pb2, 'ResDunEvaluate')()
    
    if hash == StringHash.calculate_hash('ResReliveCost'):
        return getattr(guard_proto_pb2, 'ResReliveCost')()
    
    if hash == StringHash.calculate_hash('ResPosInfo'):
        return getattr(guard_proto_pb2, 'ResPosInfo')()
    
    if hash == StringHash.calculate_hash('ResDropIndex'):
        return getattr(guard_proto_pb2, 'ResDropIndex')()
    
    if hash == StringHash.calculate_hash('ResDungeonNeedItem'):
        return getattr(guard_proto_pb2, 'ResDungeonNeedItem')()
    
    if hash == StringHash.calculate_hash('ResEvaluate'):
        return getattr(guard_proto_pb2, 'ResEvaluate')()
    
    if hash == StringHash.calculate_hash('ResDungeonInfo'):
        return getattr(guard_proto_pb2, 'ResDungeonInfo')()
    
    if hash == StringHash.calculate_hash('ResDungeonData'):
        return getattr(guard_proto_pb2, 'ResDungeonData')()
    
    if hash == StringHash.calculate_hash('ResDungeonFightCapacityFix'):
        return getattr(guard_proto_pb2, 'ResDungeonFightCapacityFix')()
    
    if hash == StringHash.calculate_hash('ResDungeonReward'):
        return getattr(guard_proto_pb2, 'ResDungeonReward')()
    
    if hash == StringHash.calculate_hash('ResDungeonCity'):
        return getattr(guard_proto_pb2, 'ResDungeonCity')()
    
    if hash == StringHash.calculate_hash('ResPracticeLimit'):
        return getattr(guard_proto_pb2, 'ResPracticeLimit')()
    
    if hash == StringHash.calculate_hash('ResPracticeTarget'):
        return getattr(guard_proto_pb2, 'ResPracticeTarget')()
    
    if hash == StringHash.calculate_hash('ResPracticeDun'):
        return getattr(guard_proto_pb2, 'ResPracticeDun')()
    
    if hash == StringHash.calculate_hash('ResTargetInfo'):
        return getattr(guard_proto_pb2, 'ResTargetInfo')()
    
    if hash == StringHash.calculate_hash('ResAchievement'):
        return getattr(guard_proto_pb2, 'ResAchievement')()
    
    if hash == StringHash.calculate_hash('ResAchievementGameCenter'):
        return getattr(guard_proto_pb2, 'ResAchievementGameCenter')()
    
    if hash == StringHash.calculate_hash('ResSpecialActivity'):
        return getattr(guard_proto_pb2, 'ResSpecialActivity')()
    
    if hash == StringHash.calculate_hash('ResDailyTask'):
        return getattr(guard_proto_pb2, 'ResDailyTask')()
    
    if hash == StringHash.calculate_hash('ResMainTask'):
        return getattr(guard_proto_pb2, 'ResMainTask')()
    
    if hash == StringHash.calculate_hash('ResLoadingPicParam'):
        return getattr(guard_proto_pb2, 'ResLoadingPicParam')()
    
    if hash == StringHash.calculate_hash('ResLoadingPic'):
        return getattr(guard_proto_pb2, 'ResLoadingPic')()
    
    if hash == StringHash.calculate_hash('ResColorMatchingParam'):
        return getattr(guard_proto_pb2, 'ResColorMatchingParam')()
    
    if hash == StringHash.calculate_hash('ResColorMatching'):
        return getattr(guard_proto_pb2, 'ResColorMatching')()
    
    if hash == StringHash.calculate_hash('ResOnlineBattleTitle'):
        return getattr(guard_proto_pb2, 'ResOnlineBattleTitle')()
    
    if hash == StringHash.calculate_hash('ResOfflineBattleTitle'):
        return getattr(guard_proto_pb2, 'ResOfflineBattleTitle')()
    
    if hash == StringHash.calculate_hash('ResSceneInfo'):
        return getattr(guard_proto_pb2, 'ResSceneInfo')()
    
    if hash == StringHash.calculate_hash('ResDungeonMonster'):
        return getattr(guard_proto_pb2, 'ResDungeonMonster')()
    
    if hash == StringHash.calculate_hash('ResDunMonSpec'):
        return getattr(guard_proto_pb2, 'ResDunMonSpec')()
    
    if hash == StringHash.calculate_hash('ResDungeonRoom'):
        return getattr(guard_proto_pb2, 'ResDungeonRoom')()
    
    if hash == StringHash.calculate_hash('ResConLoginReward'):
        return getattr(guard_proto_pb2, 'ResConLoginReward')()
    
    if hash == StringHash.calculate_hash('ResHeroDropInfo'):
        return getattr(guard_proto_pb2, 'ResHeroDropInfo')()
    
    if hash == StringHash.calculate_hash('ResScoreToResource'):
        return getattr(guard_proto_pb2, 'ResScoreToResource')()
    
    if hash == StringHash.calculate_hash('ResTimeToMoney'):
        return getattr(guard_proto_pb2, 'ResTimeToMoney')()
    
    if hash == StringHash.calculate_hash('ResSkillData'):
        return getattr(guard_proto_pb2, 'ResSkillData')()
    
    if hash == StringHash.calculate_hash('ResSkillTree'):
        return getattr(guard_proto_pb2, 'ResSkillTree')()
    
    if hash == StringHash.calculate_hash('ResRankValInfo'):
        return getattr(guard_proto_pb2, 'ResRankValInfo')()
    
    if hash == StringHash.calculate_hash('ResRankInfo'):
        return getattr(guard_proto_pb2, 'ResRankInfo')()
    
    if hash == StringHash.calculate_hash('ResRankBattleSectInfo'):
        return getattr(guard_proto_pb2, 'ResRankBattleSectInfo')()
    
    if hash == StringHash.calculate_hash('ResRankBattleInfo'):
        return getattr(guard_proto_pb2, 'ResRankBattleInfo')()
    
    if hash == StringHash.calculate_hash('ResRankBattleSect'):
        return getattr(guard_proto_pb2, 'ResRankBattleSect')()
    
    if hash == StringHash.calculate_hash('ResRankBattleReward'):
        return getattr(guard_proto_pb2, 'ResRankBattleReward')()
    
    if hash == StringHash.calculate_hash('ResRankBattleRobotHeroInfo'):
        return getattr(guard_proto_pb2, 'ResRankBattleRobotHeroInfo')()
    
    if hash == StringHash.calculate_hash('ResRankBattleRobot'):
        return getattr(guard_proto_pb2, 'ResRankBattleRobot')()
    
    if hash == StringHash.calculate_hash('ResOnlineBattleRobotHeroInfo'):
        return getattr(guard_proto_pb2, 'ResOnlineBattleRobotHeroInfo')()
    
    if hash == StringHash.calculate_hash('ResOnlineBattleRobot'):
        return getattr(guard_proto_pb2, 'ResOnlineBattleRobot')()
    
    if hash == StringHash.calculate_hash('ResOnlineBattleShopBox'):
        return getattr(guard_proto_pb2, 'ResOnlineBattleShopBox')()
    
    if hash == StringHash.calculate_hash('ResGrowUpCondition'):
        return getattr(guard_proto_pb2, 'ResGrowUpCondition')()
    
    if hash == StringHash.calculate_hash('ResGrowUp'):
        return getattr(guard_proto_pb2, 'ResGrowUp')()
    
    if hash == StringHash.calculate_hash('ResPurchase'):
        return getattr(guard_proto_pb2, 'ResPurchase')()
    
    if hash == StringHash.calculate_hash('ResMonthCard'):
        return getattr(guard_proto_pb2, 'ResMonthCard')()
    
    if hash == StringHash.calculate_hash('ResBusinessRefresh'):
        return getattr(guard_proto_pb2, 'ResBusinessRefresh')()
    
    if hash == StringHash.calculate_hash('ResGroupBuy'):
        return getattr(guard_proto_pb2, 'ResGroupBuy')()
    
    if hash == StringHash.calculate_hash('ResGrowthFundReward'):
        return getattr(guard_proto_pb2, 'ResGrowthFundReward')()
    
    if hash == StringHash.calculate_hash('ResCumulateRecharge'):
        return getattr(guard_proto_pb2, 'ResCumulateRecharge')()
    
    if hash == StringHash.calculate_hash('ResSlotInfo'):
        return getattr(guard_proto_pb2, 'ResSlotInfo')()
    
    if hash == StringHash.calculate_hash('ResParamInfo'):
        return getattr(guard_proto_pb2, 'ResParamInfo')()
    
    if hash == StringHash.calculate_hash('ResGiftGroup'):
        return getattr(guard_proto_pb2, 'ResGiftGroup')()
    
    if hash == StringHash.calculate_hash('ResGift'):
        return getattr(guard_proto_pb2, 'ResGift')()
    
    if hash == StringHash.calculate_hash('ResItem'):
        return getattr(guard_proto_pb2, 'ResItem')()
    
    if hash == StringHash.calculate_hash('ResEquipAttrRatio'):
        return getattr(guard_proto_pb2, 'ResEquipAttrRatio')()
    
    if hash == StringHash.calculate_hash('ResEquipAttr'):
        return getattr(guard_proto_pb2, 'ResEquipAttr')()
    
    if hash == StringHash.calculate_hash('ResEquip'):
        return getattr(guard_proto_pb2, 'ResEquip')()
    
    if hash == StringHash.calculate_hash('ResPurifyAttr'):
        return getattr(guard_proto_pb2, 'ResPurifyAttr')()
    
    if hash == StringHash.calculate_hash('ResPurifyLevel'):
        return getattr(guard_proto_pb2, 'ResPurifyLevel')()
    
    if hash == StringHash.calculate_hash('ResEquipBox'):
        return getattr(guard_proto_pb2, 'ResEquipBox')()
    
    if hash == StringHash.calculate_hash('ResEquipGrowup'):
        return getattr(guard_proto_pb2, 'ResEquipGrowup')()
    
    if hash == StringHash.calculate_hash('ResEquipWakeupCondition'):
        return getattr(guard_proto_pb2, 'ResEquipWakeupCondition')()
    
    if hash == StringHash.calculate_hash('ResEquipGrowupCondition'):
        return getattr(guard_proto_pb2, 'ResEquipGrowupCondition')()
    
    if hash == StringHash.calculate_hash('ResEquipColor'):
        return getattr(guard_proto_pb2, 'ResEquipColor')()
    
    if hash == StringHash.calculate_hash('ResEquipColorLevelup'):
        return getattr(guard_proto_pb2, 'ResEquipColorLevelup')()
    
    if hash == StringHash.calculate_hash('ResEquipColorLevelAttr'):
        return getattr(guard_proto_pb2, 'ResEquipColorLevelAttr')()
    
    if hash == StringHash.calculate_hash('ResEquipRecommend'):
        return getattr(guard_proto_pb2, 'ResEquipRecommend')()
    
    if hash == StringHash.calculate_hash('ResEquipFusionTargetInfo'):
        return getattr(guard_proto_pb2, 'ResEquipFusionTargetInfo')()
    
    if hash == StringHash.calculate_hash('ResEquipFusion'):
        return getattr(guard_proto_pb2, 'ResEquipFusion')()
    
    if hash == StringHash.calculate_hash('ResFactor'):
        return getattr(guard_proto_pb2, 'ResFactor')()
    
    if hash == StringHash.calculate_hash('ResFactorMisc'):
        return getattr(guard_proto_pb2, 'ResFactorMisc')()
    
    if hash == StringHash.calculate_hash('ResFactorTriggerAttr'):
        return getattr(guard_proto_pb2, 'ResFactorTriggerAttr')()
    
    if hash == StringHash.calculate_hash('ResFactorSkill'):
        return getattr(guard_proto_pb2, 'ResFactorSkill')()
    
    if hash == StringHash.calculate_hash('ResDropElem'):
        return getattr(guard_proto_pb2, 'ResDropElem')()
    
    if hash == StringHash.calculate_hash('ResBaseDrop'):
        return getattr(guard_proto_pb2, 'ResBaseDrop')()
    
    if hash == StringHash.calculate_hash('ResWorldDrop'):
        return getattr(guard_proto_pb2, 'ResWorldDrop')()
    
    if hash == StringHash.calculate_hash('ResRetrieveInfo'):
        return getattr(guard_proto_pb2, 'ResRetrieveInfo')()
    
    if hash == StringHash.calculate_hash('ResParam'):
        return getattr(guard_proto_pb2, 'ResParam')()
    
    if hash == StringHash.calculate_hash('ResUserTipData'):
        return getattr(guard_proto_pb2, 'ResUserTipData')()
    
    if hash == StringHash.calculate_hash('ResMailContent'):
        return getattr(guard_proto_pb2, 'ResMailContent')()
    
    if hash == StringHash.calculate_hash('ResPrizeDrawHero'):
        return getattr(guard_proto_pb2, 'ResPrizeDrawHero')()
    
    if hash == StringHash.calculate_hash('ResPrizeDraw'):
        return getattr(guard_proto_pb2, 'ResPrizeDraw')()
    
    if hash == StringHash.calculate_hash('ResShopRefresh'):
        return getattr(guard_proto_pb2, 'ResShopRefresh')()
    
    if hash == StringHash.calculate_hash('ResBuyRate'):
        return getattr(guard_proto_pb2, 'ResBuyRate')()
    
    if hash == StringHash.calculate_hash('ResRefreshPrice'):
        return getattr(guard_proto_pb2, 'ResRefreshPrice')()
    
    if hash == StringHash.calculate_hash('ResShopGoods'):
        return getattr(guard_proto_pb2, 'ResShopGoods')()
    
    if hash == StringHash.calculate_hash('ResShopRandomGoodsInfo'):
        return getattr(guard_proto_pb2, 'ResShopRandomGoodsInfo')()
    
    if hash == StringHash.calculate_hash('ResShopRandom'):
        return getattr(guard_proto_pb2, 'ResShopRandom')()
    
    if hash == StringHash.calculate_hash('ResTutorialRule'):
        return getattr(guard_proto_pb2, 'ResTutorialRule')()
    
    if hash == StringHash.calculate_hash('ResBible'):
        return getattr(guard_proto_pb2, 'ResBible')()
    
    if hash == StringHash.calculate_hash('ResFriendRecommendInfo'):
        return getattr(guard_proto_pb2, 'ResFriendRecommendInfo')()
    
    if hash == StringHash.calculate_hash('ResFriendRecommendSect'):
        return getattr(guard_proto_pb2, 'ResFriendRecommendSect')()
    
    if hash == StringHash.calculate_hash('ResTutorialInfo'):
        return getattr(guard_proto_pb2, 'ResTutorialInfo')()
    
    if hash == StringHash.calculate_hash('ResHeroImageInfo'):
        return getattr(guard_proto_pb2, 'ResHeroImageInfo')()
    
    if hash == StringHash.calculate_hash('ST_ACTION_DESC'):
        return getattr(guard_proto_pb2, 'ST_ACTION_DESC')()
    
    if hash == StringHash.calculate_hash('ST_BATTLE_ROBOT_INFO'):
        return getattr(guard_proto_pb2, 'ST_BATTLE_ROBOT_INFO')()
    
    if hash == StringHash.calculate_hash('ResRoleCommandList'):
        return getattr(guard_proto_pb2, 'ResRoleCommandList')()
    
    if hash == StringHash.calculate_hash('ResDailyTime'):
        return getattr(guard_proto_pb2, 'ResDailyTime')()
    
    if hash == StringHash.calculate_hash('ResActivity'):
        return getattr(guard_proto_pb2, 'ResActivity')()
    
    if hash == StringHash.calculate_hash('ResNameExtra'):
        return getattr(guard_proto_pb2, 'ResNameExtra')()
    
    if hash == StringHash.calculate_hash('ResZoneInfo'):
        return getattr(guard_proto_pb2, 'ResZoneInfo')()
    
    if hash == StringHash.calculate_hash('ResWorldZone'):
        return getattr(guard_proto_pb2, 'ResWorldZone')()
    
    if hash == StringHash.calculate_hash('ResRoleAttribute'):
        return getattr(guard_proto_pb2, 'ResRoleAttribute')()
    
    if hash == StringHash.calculate_hash('ResCumulateCost'):
        return getattr(guard_proto_pb2, 'ResCumulateCost')()
    
    if hash == StringHash.calculate_hash('ResBossRushChapter'):
        return getattr(guard_proto_pb2, 'ResBossRushChapter')()
    
    if hash == StringHash.calculate_hash('ResBossRushDrop'):
        return getattr(guard_proto_pb2, 'ResBossRushDrop')()
    
    if hash == StringHash.calculate_hash('ResBossRushDungeon'):
        return getattr(guard_proto_pb2, 'ResBossRushDungeon')()
    
    if hash == StringHash.calculate_hash('ResFirstRecharge'):
        return getattr(guard_proto_pb2, 'ResFirstRecharge')()
    
    if hash == StringHash.calculate_hash('ResDailyRecharge'):
        return getattr(guard_proto_pb2, 'ResDailyRecharge')()
    
    if hash == StringHash.calculate_hash('ResSectRecharge'):
        return getattr(guard_proto_pb2, 'ResSectRecharge')()
    
    if hash == StringHash.calculate_hash('ResTalentAttr'):
        return getattr(guard_proto_pb2, 'ResTalentAttr')()
    
    if hash == StringHash.calculate_hash('ResTalentActiveInfo'):
        return getattr(guard_proto_pb2, 'ResTalentActiveInfo')()
    
    if hash == StringHash.calculate_hash('ResTalent'):
        return getattr(guard_proto_pb2, 'ResTalent')()
    
    if hash == StringHash.calculate_hash('ResTalentHide'):
        return getattr(guard_proto_pb2, 'ResTalentHide')()
    
    if hash == StringHash.calculate_hash('ResAssistantHeroRent'):
        return getattr(guard_proto_pb2, 'ResAssistantHeroRent')()
    
    if hash == StringHash.calculate_hash('ResCountToReward'):
        return getattr(guard_proto_pb2, 'ResCountToReward')()
    
    if hash == StringHash.calculate_hash('ResWorldActivity'):
        return getattr(guard_proto_pb2, 'ResWorldActivity')()
    
    if hash == StringHash.calculate_hash('ResActivityOrder'):
        return getattr(guard_proto_pb2, 'ResActivityOrder')()
    
    if hash == StringHash.calculate_hash('ResActivityResourceBox'):
        return getattr(guard_proto_pb2, 'ResActivityResourceBox')()
    
    if hash == StringHash.calculate_hash('ResErrorMsg'):
        return getattr(guard_proto_pb2, 'ResErrorMsg')()
    
    if hash == StringHash.calculate_hash('ResActivityDiscount'):
        return getattr(guard_proto_pb2, 'ResActivityDiscount')()
    
    if hash == StringHash.calculate_hash('ResGameModeEntrance'):
        return getattr(guard_proto_pb2, 'ResGameModeEntrance')()
    
    if hash == StringHash.calculate_hash('ResAudioEffect'):
        return getattr(guard_proto_pb2, 'ResAudioEffect')()
    
    if hash == StringHash.calculate_hash('ResAudioEffectSequence'):
        return getattr(guard_proto_pb2, 'ResAudioEffectSequence')()
    
    if hash == StringHash.calculate_hash('ResTopBattleSectInfo'):
        return getattr(guard_proto_pb2, 'ResTopBattleSectInfo')()
    
    if hash == StringHash.calculate_hash('ResTopBattleSect'):
        return getattr(guard_proto_pb2, 'ResTopBattleSect')()
    
    if hash == StringHash.calculate_hash('ResTopBattleMisc'):
        return getattr(guard_proto_pb2, 'ResTopBattleMisc')()
    
    if hash == StringHash.calculate_hash('ResTopBattleReward'):
        return getattr(guard_proto_pb2, 'ResTopBattleReward')()
    
    if hash == StringHash.calculate_hash('ResItemCollect'):
        return getattr(guard_proto_pb2, 'ResItemCollect')()
    
    if hash == StringHash.calculate_hash('ResTimeRecharge'):
        return getattr(guard_proto_pb2, 'ResTimeRecharge')()
    
    if hash == StringHash.calculate_hash('ResOpenRecharge'):
        return getattr(guard_proto_pb2, 'ResOpenRecharge')()
    
    if hash == StringHash.calculate_hash('ResTotalFightCapacityExtraAttr'):
        return getattr(guard_proto_pb2, 'ResTotalFightCapacityExtraAttr')()
    
    if hash == StringHash.calculate_hash('ResRocket'):
        return getattr(guard_proto_pb2, 'ResRocket')()
    
    if hash == StringHash.calculate_hash('ResGamePlayModeFeature'):
        return getattr(guard_proto_pb2, 'ResGamePlayModeFeature')()
    
    if hash == StringHash.calculate_hash('ResReward'):
        return getattr(guard_proto_pb2, 'ResReward')()
    
    if hash == StringHash.calculate_hash('HeroAttr'):
        return getattr(guard_proto_pb2, 'HeroAttr')()
    
    if hash == StringHash.calculate_hash('CSDT_EQUIPED_INFO'):
        return getattr(guard_proto_pb2, 'CSDT_EQUIPED_INFO')()
    
    if hash == StringHash.calculate_hash('ST_REWARD_RES'):
        return getattr(guard_proto_pb2, 'ST_REWARD_RES')()
    
    if hash == StringHash.calculate_hash('ST_BLESS_INFO'):
        return getattr(guard_proto_pb2, 'ST_BLESS_INFO')()
    
    if hash == StringHash.calculate_hash('ST_BATTLE_HERO_ATTR_INFO'):
        return getattr(guard_proto_pb2, 'ST_BATTLE_HERO_ATTR_INFO')()
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_DEFENSE_INFO'):
        return getattr(guard_proto_pb2, 'TOP_BATTLE_DEFENSE_INFO')()
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_ROLE_INFO'):
        return getattr(guard_proto_pb2, 'TOP_BATTLE_ROLE_INFO')()
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_FIGHT_TARGET_INFO'):
        return getattr(guard_proto_pb2, 'TOP_BATTLE_FIGHT_TARGET_INFO')()
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_TOPTHREE_INFO'):
        return getattr(guard_proto_pb2, 'TOP_BATTLE_TOPTHREE_INFO')()
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_QUALIFICATION_INFO'):
        return getattr(guard_proto_pb2, 'TOP_BATTLE_QUALIFICATION_INFO')()
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_ROCKET_INFO'):
        return getattr(guard_proto_pb2, 'TOP_BATTLE_ROCKET_INFO')()
    
    if hash == StringHash.calculate_hash('ResFriendInviteReward'):
        return getattr(guard_proto_pb2, 'ResFriendInviteReward')()
    
    if hash == StringHash.calculate_hash('ResCityReward'):
        return getattr(guard_proto_pb2, 'ResCityReward')()
    
    if hash == StringHash.calculate_hash('ResMaterial'):
        return getattr(guard_proto_pb2, 'ResMaterial')()
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_EMBLEM_INFO'):
        return getattr(guard_proto_pb2, 'ST_HERO_BATTLE_EMBLEM_INFO')()
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_EQUIP_INFO'):
        return getattr(guard_proto_pb2, 'ST_HERO_BATTLE_EQUIP_INFO')()
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_TALENT_HIDE_INFO'):
        return getattr(guard_proto_pb2, 'ST_HERO_BATTLE_TALENT_HIDE_INFO')()
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'ST_HERO_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('ST_BOSSRUSH_HERO_HP_REMAIN'):
        return getattr(guard_proto_pb2, 'ST_BOSSRUSH_HERO_HP_REMAIN')()
    
    if hash == StringHash.calculate_hash('CSDT_DUNGEON_COMBAT_BRIEF'):
        return getattr(guard_proto_pb2, 'CSDT_DUNGEON_COMBAT_BRIEF')()
    
    if hash == StringHash.calculate_hash('ST_SHOP_GOODS_INFO'):
        return getattr(guard_proto_pb2, 'ST_SHOP_GOODS_INFO')()
    
    if hash == StringHash.calculate_hash('ST_SHOP_GOODS'):
        return getattr(guard_proto_pb2, 'ST_SHOP_GOODS')()
    
    if hash == StringHash.calculate_hash('CSPKG_REFRESH_SHOP_GOODS_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_REFRESH_SHOP_GOODS_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_REFRESH_SHOP_GOODS_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_REFRESH_SHOP_GOODS_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_REFRESH_SHOP_COUNT_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_REFRESH_SHOP_COUNT_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_SHOP_GOODS_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_BUY_SHOP_GOODS_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_SHOP_GOODS_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_BUY_SHOP_GOODS_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_SPECIAL_ACTIVITY_ITEM'):
        return getattr(guard_proto_pb2, 'SCPKG_SPECIAL_ACTIVITY_ITEM')()
    
    if hash == StringHash.calculate_hash('SCPKG_SPECIAL_ACTIVITY_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_SPECIAL_ACTIVITY_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_SPECIAL_ACTIVITY_CLAIM_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_SPECIAL_ACTIVITY_CLAIM_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_SPECIAL_ACTIVITY_CLAIM_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_SPECIAL_ACTIVITY_CLAIM_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_SPECIAL_ACTIVITY_SHARE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_SPECIAL_ACTIVITY_SHARE_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_NOTIFY_MSG'):
        return getattr(guard_proto_pb2, 'SSDT_NOTIFY_MSG')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_ONLINE'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_ONLINE')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_QUEST'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_QUEST')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_PACKAGE'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_PACKAGE')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_SKILL'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_SKILL')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DUNGEON_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_DUNGEON_DATA')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_MISC_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_MISC_DATA')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_HERO'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_DATASET_HERO')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_BUILDING'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_DATASET_BUILDING')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_DUNDATA'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_DATASET_DUNDATA')()
    
    if hash == StringHash.calculate_hash('SSDT_NOTIFY_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_NOTIFY_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ATTR_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ATTR_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ITEM_EXTRA_INFO_RECOVER'):
        return getattr(guard_proto_pb2, 'DBBLOB_ITEM_EXTRA_INFO_RECOVER')()
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTPURCHASE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_FIRSTPURCHASE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MONTHCARD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_MONTHCARD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_SUPERVALUECARD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_SUPERVALUECARD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTPURCHASE_LIST'):
        return getattr(guard_proto_pb2, 'DBBLOB_FIRSTPURCHASE_LIST')()
    
    if hash == StringHash.calculate_hash('DBBLOB_EQUIP_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_EQUIP_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_EQUIP_TAB'):
        return getattr(guard_proto_pb2, 'DBBLOB_EQUIP_TAB')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_OBJ'):
        return getattr(guard_proto_pb2, 'DBBLOB_PACKAGE_OBJ')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_TAB'):
        return getattr(guard_proto_pb2, 'DBBLOB_PACKAGE_TAB')()
    
    if hash == StringHash.calculate_hash('DBBLOBHERO_EQUIPED_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOBHERO_EQUIPED_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DATA_HERO_FACTOR_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_DATA_HERO_FACTOR_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_FACTOR_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_FACTOR_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PACKAGE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_TIME_VALUE'):
        return getattr(guard_proto_pb2, 'DBBLOB_TIME_VALUE')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PRACTICEDUN_QUEST'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_PRACTICEDUN_QUEST')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_ACHIEVEMENT'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_ACHIEVEMENT')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_FIRSTPURCHAE'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_FIRSTPURCHAE')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_DAILYTASK_ITEM'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_DAILYTASK_ITEM')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_DAILYTASK'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_DAILYTASK')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MAIN_TASK_ITEM'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_MAIN_TASK_ITEM')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MAIN_TASK'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_MAIN_TASK')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_SHOP'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_SHOP')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PRIZE_DRAW'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_PRIZE_DRAW')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_QUEST'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_QUEST')()
    
    if hash == StringHash.calculate_hash('DBBLOB_GIFT_ACCEPT_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_GIFT_ACCEPT_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_GIFT_CLAIM_ITEM_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_GIFT_CLAIM_ITEM_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_GIFT_CLAIM_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_GIFT_CLAIM_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_OFFLINE_BATTLE_DEFEATED_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_OFFLINE_BATTLE_DEFEATED_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_OFFLINE_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_OFFLINE_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ONLINE_BATTLE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ONLINE_BATTLE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DAILYQUEST_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DAILYQUEST_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_CHALLENGE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUNGEON_CHALLENGE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_UNLOCK_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUNGEON_UNLOCK_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_COUNT_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUNGEON_COUNT_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_DATA_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUNGEON_DATA_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_STAT_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_HERO_STAT_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_SKILL_INFO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_SKILL_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_EMBLEMINFO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_EMBLEMINFO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_INFO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_HERO_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_TRAININGSLOT_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_HERO_TRAININGSLOT_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_CHIP_INFO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_CHIP_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_HERO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_HERO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_HERO_GANGBATTLE_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_HERO_GANGBATTLE_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_TOP_BATTLE_ROCKET'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_TOP_BATTLE_ROCKET')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_RANK_BATTLE_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_RANK_BATTLE_DATA')()
    
    if hash == StringHash.calculate_hash('RANK_BATTLE_DEFENSE_DATA'):
        return getattr(guard_proto_pb2, 'RANK_BATTLE_DEFENSE_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MONSTER_STAT_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_MONSTER_STAT_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MONSTER_INFO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_MONSTER_INFO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MONSTER_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_MONSTER_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUN_UNLOCK_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUN_UNLOCK_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVE_CHALLENGE_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVE_CHALLENGE_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_HERO'):
        return getattr(guard_proto_pb2, 'DBBLOB_TOWER_HERO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_TOWER_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_CHALLENGE_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_TOWER_CHALLENGE_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_BOSS_HERO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_WORLD_BOSS_HERO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_BOSS_CHALLENGE_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_WORLD_BOSS_CHALLENGE_DATA')()
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_UPDATE_WORLD_BOSS'):
        return getattr(guard_proto_pb2, 'SSPKG_CMD_UPDATE_WORLD_BOSS')()
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_DEAD'):
        return getattr(guard_proto_pb2, 'SSPKG_CMD_WORLD_BOSS_DEAD')()
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_DEAD_PLAYER_DAMAGE_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_CMD_WORLD_BOSS_DEAD_PLAYER_DAMAGE_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_HERO_DAMAGE_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_CMD_WORLD_BOSS_HERO_DAMAGE_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_PLAYER_DAMAGE_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_CMD_WORLD_BOSS_PLAYER_DAMAGE_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_DAMAGE_PLAYER'):
        return getattr(guard_proto_pb2, 'SSPKG_CMD_WORLD_BOSS_DAMAGE_PLAYER')()
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_BOSS_HERO_DAMAGE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_WORLD_BOSS_HERO_DAMAGE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_BOSS_PLAYER_DAMAGE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_WORLD_BOSS_PLAYER_DAMAGE_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_DAMAGE_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_CMD_WORLD_BOSS_DAMAGE_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_WORLD_BOSS_QUALIFIED_HERO_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_WORLD_BOSS_QUALIFIED_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_RESET'):
        return getattr(guard_proto_pb2, 'SSPKG_CMD_WORLD_BOSS_RESET')()
    
    if hash == StringHash.calculate_hash('SSPKG_WORLD_BOSS_KILLER_INFO_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_WORLD_BOSS_KILLER_INFO_RES')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MULTIPLAYER_PVE_CHALLENGE_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_MULTIPLAYER_PVE_CHALLENGE_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_NEWBIE_ACTIVITY_ITEM'):
        return getattr(guard_proto_pb2, 'DBBLOB_NEWBIE_ACTIVITY_ITEM')()
    
    if hash == StringHash.calculate_hash('DBBLOB_NEWBIE_ACTIVITY_STATUS'):
        return getattr(guard_proto_pb2, 'DBBLOB_NEWBIE_ACTIVITY_STATUS')()
    
    if hash == StringHash.calculate_hash('DBBLOB_SPECIAL_ACTIVITY_ITEM'):
        return getattr(guard_proto_pb2, 'DBBLOB_SPECIAL_ACTIVITY_ITEM')()
    
    if hash == StringHash.calculate_hash('DBBLOB_SPECIAL_ACTIVITY_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_SPECIAL_ACTIVITY_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_SELFDUN_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_SELFDUN_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_SELF_DUN_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_SELF_DUN_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVPDUN_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVPDUN_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PVPDUN_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_PVPDUN_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ENDLESS_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ENDLESS_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ENDLESS_HERO_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_ENDLESS_HERO_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_DATASET'):
        return getattr(guard_proto_pb2, 'DBBLOB_HERO_DATASET')()
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_BASE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_BUILDING_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_RES_STORE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_RES_STORE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_DEFEND_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ISLAND_DEFEND_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_BORNINFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ISLAND_BORNINFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_GAININFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ISLAND_GAININFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_BUILDING_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVP_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_ISLAND_DEFEND_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVP_ISLAND_DEFEND_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVP_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_BUILD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PVP_BUILD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_DATASET'):
        return getattr(guard_proto_pb2, 'DBBLOB_BUILDING_DATASET')()
    
    if hash == StringHash.calculate_hash('DBBLOB_CITY_REWARD'):
        return getattr(guard_proto_pb2, 'DBBLOB_CITY_REWARD')()
    
    if hash == StringHash.calculate_hash('DBBLOB_CITY_REWARD_SET'):
        return getattr(guard_proto_pb2, 'DBBLOB_CITY_REWARD_SET')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DUN_DATASET'):
        return getattr(guard_proto_pb2, 'DBBLOB_DUN_DATASET')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_BEHAVIOUR'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_BEHAVIOUR')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MONTH_CARD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_MONTH_CARD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_SUPERVALUE_CARD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_SUPERVALUE_CARD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_CONTINUE_LOGIN_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_CONTINUE_LOGIN_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_GROWTH_FUND_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_GROWTH_FUND_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_CUMULATE_RECHARGE_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_CUMULATE_RECHARGE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_GROUP_BUY_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_GROUP_BUY_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTREWARD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_FIRSTREWARD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_BUSINESS_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_BUSINESS_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PRIVATE_CHAT_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PRIVATE_CHAT_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_PRIVATE_CHAT_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_PRIVATE_CHAT_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_PRIVATE_CHAT_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_PRIVATE_CHAT_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_OFFLINE_PRIVATE_CHAT_MSG'):
        return getattr(guard_proto_pb2, 'SSPKG_OFFLINE_PRIVATE_CHAT_MSG')()
    
    if hash == StringHash.calculate_hash('DBBLOB_OFFLIEN_PRIVATE_CHAT'):
        return getattr(guard_proto_pb2, 'DBBLOB_OFFLIEN_PRIVATE_CHAT')()
    
    if hash == StringHash.calculate_hash('DBBLOB_RANK_POS_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_RANK_POS_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_MISC_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_MISC_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_NOTIFY_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_NOTIFY_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOB_RANK_VALINFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_RANK_VALINFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_RANK_DATA'):
        return getattr(guard_proto_pb2, 'DBBLOB_RANK_DATA')()
    
    if hash == StringHash.calculate_hash('DBBLOG_RANK_STAT_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOG_RANK_STAT_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DIRHERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DIRHERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_WORLD_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DIR_WORLD_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_DIR_WORLD_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_WHOLE_GAMEOBJ'):
        return getattr(guard_proto_pb2, 'SSDT_WHOLE_GAMEOBJ')()
    
    if hash == StringHash.calculate_hash('ERR_RESPONSE'):
        return getattr(guard_proto_pb2, 'ERR_RESPONSE')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_BRIEF'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_BRIEF')()
    
    if hash == StringHash.calculate_hash('SUCC_ROLE_LIST_RES'):
        return getattr(guard_proto_pb2, 'SUCC_ROLE_LIST_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_WHOLE_ACCOUNT'):
        return getattr(guard_proto_pb2, 'SSDT_WHOLE_ACCOUNT')()
    
    if hash == StringHash.calculate_hash('SSPKG_SHUTDOWN_ZONESVR'):
        return getattr(guard_proto_pb2, 'SSPKG_SHUTDOWN_ZONESVR')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_SELFDUN_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_SELFDUN_DATA')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_PVEDUN_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_PVEDUN_DATA')()
    
    if hash == StringHash.calculate_hash('SSDT_ENDLESS_HERO_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_ENDLESS_HERO_DATA')()
    
    if hash == StringHash.calculate_hash('SSDT_PVPPLAYER_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PVPPLAYER_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_LOGIN_PVPINFO'):
        return getattr(guard_proto_pb2, 'SSDT_PLAYER_LOGIN_PVPINFO')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGIN_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_LOGIN_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGIN_RES'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_LOGIN_RES')()
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_VIEW_PLAYER_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_GANG_SVR'):
        return getattr(guard_proto_pb2, 'PKG_VIEW_PLAYER_INFO_RSP_FROM_GANG_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_BATTLE_SVR'):
        return getattr(guard_proto_pb2, 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_BATTLE_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_SVR'):
        return getattr(guard_proto_pb2, 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_ROLE_SVR'):
        return getattr(guard_proto_pb2, 'PKG_VIEW_PLAYER_INFO_RSP_FROM_ROLE_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGOUT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_LOGOUT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_REQ_PLAYER_LOGIN'):
        return getattr(guard_proto_pb2, 'PKG_REQ_PLAYER_LOGIN')()
    
    if hash == StringHash.calculate_hash('PKG_RES_PLAYER_LOGIN'):
        return getattr(guard_proto_pb2, 'PKG_RES_PLAYER_LOGIN')()
    
    if hash == StringHash.calculate_hash('PKG_REQ_PLAYER_LOGOUT'):
        return getattr(guard_proto_pb2, 'PKG_REQ_PLAYER_LOGOUT')()
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGIN_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ACCOUNT_LOGIN_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGIN_RES'):
        return getattr(guard_proto_pb2, 'PKG_ACCOUNT_LOGIN_RES')()
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGOUT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ACCOUNT_LOGOUT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_NAME'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_NAME')()
    
    if hash == StringHash.calculate_hash('SSDT_RECOMMAND_NAME'):
        return getattr(guard_proto_pb2, 'SSDT_RECOMMAND_NAME')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_NAME_RES'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_NAME_RES')()
    
    if hash == StringHash.calculate_hash('PKG_RANDOM_NAME_REQ'):
        return getattr(guard_proto_pb2, 'PKG_RANDOM_NAME_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_RANDOM_NAME_RES'):
        return getattr(guard_proto_pb2, 'PKG_RANDOM_NAME_RES')()
    
    if hash == StringHash.calculate_hash('PKG_VERIFY_NAME'):
        return getattr(guard_proto_pb2, 'PKG_VERIFY_NAME')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_WORLDROLE'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_WORLDROLE')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_PLATACCOUNT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_BIND_PLATACCOUNT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_PLATACCOUNT_RES'):
        return getattr(guard_proto_pb2, 'PKG_BIND_PLATACCOUNT_RES')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_CLUSTER_PLATACCOUNT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_BIND_CLUSTER_PLATACCOUNT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_CLUSTER_PLATACCOUNT_RES'):
        return getattr(guard_proto_pb2, 'PKG_BIND_CLUSTER_PLATACCOUNT_RES')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_ROLE_PLATACCOUNT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_BIND_ROLE_PLATACCOUNT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_ROLE_PLATACCOUNT_RES'):
        return getattr(guard_proto_pb2, 'PKG_BIND_ROLE_PLATACCOUNT_RES')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_ACCOUNTSVR_REQ'):
        return getattr(guard_proto_pb2, 'PKG_BIND_ACCOUNTSVR_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BIND_ACCOUNTSVR_RES'):
        return getattr(guard_proto_pb2, 'PKG_BIND_ACCOUNTSVR_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GAMEOBJ_UPDATE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GAMEOBJ_UPDATE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GAMEOBJ_UPDATE_RSP'):
        return getattr(guard_proto_pb2, 'PKG_GAMEOBJ_UPDATE_RSP')()
    
    if hash == StringHash.calculate_hash('SSDT_CMD_PLAYER_SELFDUNINFO'):
        return getattr(guard_proto_pb2, 'SSDT_CMD_PLAYER_SELFDUNINFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ROOMMONSTER_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ROOMMONSTER_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ROOM_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ROOM_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_DUNGEON_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_DUNGEON_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_ENTERDUN_RES'):
        return getattr(guard_proto_pb2, 'SSDT_PLAYER_ENTERDUN_RES')()
    
    if hash == StringHash.calculate_hash('PKG_SELFDUN_ENTER_REQ'):
        return getattr(guard_proto_pb2, 'PKG_SELFDUN_ENTER_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SELFDUN_ENTER_RSP'):
        return getattr(guard_proto_pb2, 'PKG_SELFDUN_ENTER_RSP')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_ROLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_DEL_ROLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_ROLE_RES'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_DEL_ROLE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_KICK_PLAYER'):
        return getattr(guard_proto_pb2, 'PKG_KICK_PLAYER')()
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_INFO_RES'):
        return getattr(guard_proto_pb2, 'PKG_ACCOUNT_INFO_RES')()
    
    if hash == StringHash.calculate_hash('PKG_NEW_ROLE_CLUSTER'):
        return getattr(guard_proto_pb2, 'PKG_NEW_ROLE_CLUSTER')()
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_NAME'):
        return getattr(guard_proto_pb2, 'PKG_ROLE_DEL_NAME')()
    
    if hash == StringHash.calculate_hash('PKG_DISP_PACKAGE'):
        return getattr(guard_proto_pb2, 'PKG_DISP_PACKAGE')()
    
    if hash == StringHash.calculate_hash('SSDT_PVP_ISLAND_DEFENSE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PVP_ISLAND_DEFENSE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PVP_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PVP_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PVP_STEAL_ISLAND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PVP_STEAL_ISLAND_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_ROLE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ONLINE_BATTLE_ROOM_ROLE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ONLINE_BATTLE_ROOM_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME'):
        return getattr(guard_proto_pb2, 'SSDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME')()
    
    if hash == StringHash.calculate_hash('SSPKG_CREATE_ONLINE_BATTLE_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_CREATE_ONLINE_BATTLE_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_QUIT_ONLINE_BATTLE_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_QUIT_ONLINE_BATTLE_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_LIST_ONLINE_BATTLE_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_LIST_ONLINE_BATTLE_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_LIST_ONLINE_BATTLE_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_LIST_ONLINE_BATTLE_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_JOIN_ONLINE_BATTLE_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_JOIN_ONLINE_BATTLE_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_ROOM_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_QUICK_MATCH_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_ONLINE_BATTLE_ROOM_QUICK_MATCH_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_KICK_GUEST_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_ONLINE_BATTLE_ROOM_KICK_GUEST_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_HEART_BEAT_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_ONLINE_BATTLE_ROOM_HEART_BEAT_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_ROOM_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_BEGIN'):
        return getattr(guard_proto_pb2, 'SSPKG_ONLINE_BATTLE_BEGIN')()
    
    if hash == StringHash.calculate_hash('PKG_SEARCH_PVP_PLAYER_REQ'):
        return getattr(guard_proto_pb2, 'PKG_SEARCH_PVP_PLAYER_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SEARCH_PVP_PLAYER_RES'):
        return getattr(guard_proto_pb2, 'PKG_SEARCH_PVP_PLAYER_RES')()
    
    if hash == StringHash.calculate_hash('ST_WIPE_OUT_STEAL_BATTLE_RESULT'):
        return getattr(guard_proto_pb2, 'ST_WIPE_OUT_STEAL_BATTLE_RESULT')()
    
    if hash == StringHash.calculate_hash('PKG_WIPE_OUT_STEAL_BATTLE_BALANCE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_WIPE_OUT_STEAL_BATTLE_BALANCE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BALANCE_STEAL_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_BALANCE_STEAL_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BALANCE_STEAL_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'PKG_BALANCE_STEAL_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_STEAL_BATTLE_RESULT_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_STEAL_BATTLE_RESULT_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_SYSTEM_ACC'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_SYSTEM_ACC')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_SYSTEM_ACC_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_SYSTEM_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_REVENGE_ACC_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_REVENGE_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_ACC_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_BRIEF_MAIL_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_BRIEF_MAIL_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GET_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ROLELOGIN_GET_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GET_MAIL_RES'):
        return getattr(guard_proto_pb2, 'PKG_ROLELOGIN_GET_MAIL_RES')()
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGOUT_TO_MAILSVR'):
        return getattr(guard_proto_pb2, 'PKG_ROLELOGOUT_TO_MAILSVR')()
    
    if hash == StringHash.calculate_hash('PKG_SEND_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_SEND_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SEND_MAIL_RES'):
        return getattr(guard_proto_pb2, 'PKG_SEND_MAIL_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_CLR_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_MAIL_CLR_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_OVERTIME_MAIL_CLR_REQ'):
        return getattr(guard_proto_pb2, 'PKG_OVERTIME_MAIL_CLR_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_OVERTIME_MAIL_CLR_RES'):
        return getattr(guard_proto_pb2, 'PKG_OVERTIME_MAIL_CLR_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_LIST_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_MAIL_LIST_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_LIST_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_MAIL_LIST_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_DETAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_MAIL_DETAIL_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_DETAIL_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_MAIL_DETAIL_RES')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_READ_REQ'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_READ_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_READ_RES'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_READ_RES')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_GET_ACC_REQ'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_GET_ACC_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_GET_ACC_RES'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_GET_ACC_RES')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_DELETE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_DELETE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_MAIL_DELETE_RES'):
        return getattr(guard_proto_pb2, 'PKG_MAIL_DELETE_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_GANGSIMPLE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANGSIMPLE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_SELF_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_SELF_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_MEM_BLOB_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_MEM_BLOB_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANGMEM_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANGMEM_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANGLIST_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANGLIST_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_APPLYLIST_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_APPLYLIST_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_APPLYLIST_DBINFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_APPLYLIST_DBINFO')()
    
    if hash == StringHash.calculate_hash('PKG_GANGLIST_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANGLIST_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANGLIST_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANGLIST_RES')()
    
    if hash == StringHash.calculate_hash('PKG_CMD_SEARCH_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_CMD_SEARCH_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_CMD_SEARCH_GANG_RES'):
        return getattr(guard_proto_pb2, 'PKG_CMD_SEARCH_GANG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ROLELOGIN_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GANG_RES'):
        return getattr(guard_proto_pb2, 'PKG_ROLELOGIN_GANG_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_CREATE_GANG_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_CREATE_GANG_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_NAME_RSP_FROM_NAME_SVR'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_GANG_NAME_RSP_FROM_NAME_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_NAME_RSP_FROM_ACCOUNT_SVR'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_GANG_NAME_RSP_FROM_ACCOUNT_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_RES'):
        return getattr(guard_proto_pb2, 'PKG_CREATE_GANG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_UPDATE_BASIC_INFO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_UPDATE_BASIC_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_UPDATE_BASIC_INFO_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_UPDATE_BASIC_INFO_RES')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_RES'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_AUTOJOIN_RES'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_AUTOJOIN_RES')()
    
    if hash == StringHash.calculate_hash('PKG_TRANSFER_GANG_LEADER_REQ'):
        return getattr(guard_proto_pb2, 'PKG_TRANSFER_GANG_LEADER_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_TRANSFER_GANG_LEADER_RES'):
        return getattr(guard_proto_pb2, 'PKG_TRANSFER_GANG_LEADER_RES')()
    
    if hash == StringHash.calculate_hash('PKG_QUIT_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_QUIT_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_QUIT_GANG_RES'):
        return getattr(guard_proto_pb2, 'PKG_QUIT_GANG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMLIST_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEMLIST_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMLIST_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEMLIST_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_DETAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_DETAIL_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_DETAIL_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_DETAIL_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_LIST_CHG_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEM_LIST_CHG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BLESS_RANK_CLEAR_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BLESS_RANK_CLEAR_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BASIC_INFO_CHG_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BASIC_INFO_CHG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_INFO_CHG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEM_INFO_CHG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMCHG_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEMCHG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPLYLIST_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_APPLYLIST_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPLYLIST_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_APPLYLIST_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_APPROVE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVE_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_APPROVE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVETOMEM_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_APPROVETOMEM_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_CHAT_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_CHAT_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_CHAT_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_CHAT_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_KICK_MEM_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_KICK_MEM_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_KICK_MEM_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_KICK_MEM_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_SET_ELDER_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_SET_ELDER_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_SET_ELDER_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_SET_ELDER_RES')()
    
    if hash == StringHash.calculate_hash('PKG_LOGOUT_UPDZONEID_REQ'):
        return getattr(guard_proto_pb2, 'PKG_LOGOUT_UPDZONEID_REQ')()
    
    if hash == StringHash.calculate_hash('MemZoneInfo'):
        return getattr(guard_proto_pb2, 'MemZoneInfo')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BLESS_CHECK_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BLESS_CHECK_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BLESS_CHECK_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BLESS_CHECK_RES')()
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_PLAYER_HERO_CHG_TO_GANG_REQ'):
        return getattr(guard_proto_pb2, 'PKG_PLAYER_HERO_CHG_TO_GANG_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_CITY_STRONG_POINT_HERO_RES'):
        return getattr(guard_proto_pb2, 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_CITY_INFO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_CITY_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_CITY_INFO_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_CITY_INFO_RES')()
    
    if hash == StringHash.calculate_hash('PKG_BROAD_GANG_BATTTLE_STATE_TO_GANG_SVR'):
        return getattr(guard_proto_pb2, 'PKG_BROAD_GANG_BATTTLE_STATE_TO_GANG_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_REQ_TO_GANG_BATTLE'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_BATTLE_REQ_TO_GANG_BATTLE')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_RES_FROM_GANG_BATTLE'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_BATTLE_RES_FROM_GANG_BATTLE')()
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_RES'):
        return getattr(guard_proto_pb2, 'PKG_APPLY_GANG_BATTLE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_STATE_BROAD'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BATTLE_STATE_BROAD')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_CITY_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_CITY_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_CITY_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_CITY_RES')()
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_ATTACK_MEM_INFO'):
        return getattr(guard_proto_pb2, 'ST_GANG_BATTLE_ATTACK_MEM_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_TOTAL_BALANCE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BATTLE_TOTAL_BALANCE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_BROAD_GANG_BATTTLE_POINT_CHG_TO_GANG_SVR'):
        return getattr(guard_proto_pb2, 'PKG_BROAD_GANG_BATTTLE_POINT_CHG_TO_GANG_SVR')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTTLE_POINT_BROAD'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BATTTLE_POINT_BROAD')()
    
    if hash == StringHash.calculate_hash('PKG_ENTER_GANG_BATTLE_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'PKG_ENTER_GANG_BATTLE_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_ENTER_GANG_BATTLE_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'PKG_ENTER_GANG_BATTLE_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_BALANCE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BATTLE_BALANCE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_BALANCE_RES'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BATTLE_BALANCE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_STRONG_POINT_CHG_TO_GANGBATTLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_STRONG_POINT_CHG_TO_GANGBATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_CHG_TO_GANGBATTLE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_MEM_CHG_TO_GANGBATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_STATE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_INFO_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_STATE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('GANG_BROADCAST_DETAIL'):
        return getattr(guard_proto_pb2, 'GANG_BROADCAST_DETAIL')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_BROADCAST'):
        return getattr(guard_proto_pb2, 'PKG_GANG_BROADCAST')()
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_ATTACK_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DB_GANG_BATTLE_MEM_ATTACK_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_INFO'):
        return getattr(guard_proto_pb2, 'DB_GANG_BATTLE_MEM_INFO')()
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_LIST'):
        return getattr(guard_proto_pb2, 'DB_GANG_BATTLE_MEM_LIST')()
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_HISTORY_MEM_INFO'):
        return getattr(guard_proto_pb2, 'DB_GANG_BATTLE_HISTORY_MEM_INFO')()
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_HISTORY_MEM_LIST'):
        return getattr(guard_proto_pb2, 'DB_GANG_BATTLE_HISTORY_MEM_LIST')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_BATTLE_HISTORY_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_BATTLE_HISTORY_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_STATE_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_STATE_RES')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_HISTORY_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_HISTORY_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_HISTORY_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_GANG_BATTLE_HISTORY_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_MEM_MAIL_USER_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_MEM_MAIL_USER_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_GANG_SEND_MEM_MAIL_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GANG_SEND_MEM_MAIL_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_VAL'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_VAL')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_HERO_BRIEF'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_BATTLE_HERO_BRIEF')()
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_BASE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PLAYER_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GANG_BASE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GANG_BASE_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_DATA'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_DATA')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKLIST_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RANKLIST_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKLIST_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RANKLIST_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKPOS_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RANKPOS_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKPOS_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RANKPOS_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ACHIEVEMENT_SCORE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_ACHIEVEMENT_SCORE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_GANG_SCORE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_GANG_SCORE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_OFFLINE_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_OFFLINE_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_RANK_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_ONLINE_BATTLE_RANK_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_WORLD_BOSS_DAMAGE_RANK_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_WORLD_BOSS_DAMAGE_RANK_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_STEAL_BATTLE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_STEAL_BATTLE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ENDLESS_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_ENDLESS_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_PVE_EVALUATE_STATS_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_PVE_EVALUATE_STATS_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_CHANGE_NAME_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_CHANGE_NAME_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_ONE_UPDATE'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_ONE_UPDATE')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_UPDATE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_UPDATE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_UPDATE_INFO_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_UPDATE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANKDATA_REPORT_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANKDATA_REPORT_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GANG_RANKSTAT_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_GANG_RANKSTAT_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GANG_RANKSTAT_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_GANG_RANKSTAT_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ROLELOGIN_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_ROLELOGIN_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ROLELOGIN_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_ROLELOGIN_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_FIGHT_TARGET_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_BATTLE_FIGHT_TARGET_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ENTER_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_UNLOCK_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_UNLOCK_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_BALANCE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_BALANCE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_BALANCE_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_BALANCE_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_MAIL_USER_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_BATTLE_MAIL_USER_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_REWARD_EVERYDAY_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_REWARD_EVERYDAY_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_REWARD_PROMOTE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_REWARD_PROMOTE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_POS_DOWN_NOTIFY_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_POS_DOWN_NOTIFY_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_GET_NOTIFY_REQ'):
        return getattr(guard_proto_pb2, 'PKG_GET_NOTIFY_REQ')()
    
    if hash == StringHash.calculate_hash('PKG_NOTIFY_DATA'):
        return getattr(guard_proto_pb2, 'PKG_NOTIFY_DATA')()
    
    if hash == StringHash.calculate_hash('PKG_NOTIFY_INFO'):
        return getattr(guard_proto_pb2, 'PKG_NOTIFY_INFO')()
    
    if hash == StringHash.calculate_hash('PKG_GET_NOTIFY_RES'):
        return getattr(guard_proto_pb2, 'PKG_GET_NOTIFY_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_FINISH'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_FINISH')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_FINISH_DISP'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_FINISH_DISP')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQUEST_DELIVERY'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_REQUEST_DELIVERY')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQUEST_DELIVERY_IAP'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_REQUEST_DELIVERY_IAP')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQUEST_DELIVERY_IAP_CHECKED'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_REQUEST_DELIVERY_IAP_CHECKED')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_IAP_FINISHED'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_IAP_FINISHED')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_DONE'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_DONE')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_DISP_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_PURCHASE_DISP_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_PURCHASEACTIVITY_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_PURCHASEACTIVITY_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_PURCHASEACTIVITY_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_PURCHASEACTIVITY_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RECORD_TRADE_SUCCESS'):
        return getattr(guard_proto_pb2, 'SSPKG_RECORD_TRADE_SUCCESS')()
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_CODE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GIFT_CODE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_UPDATE_ACCEPT_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GIFT_UPDATE_ACCEPT_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_CODE_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GIFT_CODE_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_LIST_RES'):
        return getattr(guard_proto_pb2, 'SSDT_ROLE_LIST_RES')()
    
    if hash == StringHash.calculate_hash('UINON_MAIL_ACC_INFO'):
        return getattr(guard_proto_pb2, 'UINON_MAIL_ACC_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BASEINFO'):
        return getattr(guard_proto_pb2, 'SSDT_RANK_BASEINFO')()
    
    if hash == StringHash.calculate_hash('SSDT_RANKPOS_SEARCH_KEY'):
        return getattr(guard_proto_pb2, 'SSDT_RANKPOS_SEARCH_KEY')()
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_STAT_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_GAMESVR_STAT_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_ACC_LOGIN'):
        return getattr(guard_proto_pb2, 'SSPKG_GAMESVR_ACC_LOGIN')()
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_ACC_LOGOUT'):
        return getattr(guard_proto_pb2, 'SSPKG_GAMESVR_ACC_LOGOUT')()
    
    if hash == StringHash.calculate_hash('DB_PLAYER_SHOP_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DB_PLAYER_SHOP_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DB_PLAYER_SHOP_GOODS_INFO'):
        return getattr(guard_proto_pb2, 'DB_PLAYER_SHOP_GOODS_INFO')()
    
    if hash == StringHash.calculate_hash('DB_PlAYER_SHOP_INFO_BLOB'):
        return getattr(guard_proto_pb2, 'DB_PlAYER_SHOP_INFO_BLOB')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGIN_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_LOGIN_REQ')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGOUT_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_LOGOUT_REQ')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGIN_RES'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_LOGIN_RES')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_REFRESH_GOODS_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_REFRESH_GOODS_REQ')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_REFRESH_GOODS_RES'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_REFRESH_GOODS_RES')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_BUY_GOODS_CHECK_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_BUY_GOODS_CHECK_REQ')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PlAYER_BUY_GOODS_CHECK_RES'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PlAYER_BUY_GOODS_CHECK_RES')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_UPDATE_HERO_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_UPDATE_HERO_REQ')()
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_BUY_GOODS_FAILE_ROLLBACK_REQ'):
        return getattr(guard_proto_pb2, 'SS_SHOP_PLAYER_BUY_GOODS_FAILE_ROLLBACK_REQ')()
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_CROSS_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_FRIEND_CROSS_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_BIND_3RD_PLATFORM_ID'):
        return getattr(guard_proto_pb2, 'SSPKG_BIND_3RD_PLATFORM_ID')()
    
    if hash == StringHash.calculate_hash('SSPKG_BIND_3RD_PLATFORM_ID_TO_FRIEND'):
        return getattr(guard_proto_pb2, 'SSPKG_BIND_3RD_PLATFORM_ID_TO_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSPKG_INVITE_STATE_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_INVITE_STATE_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_HANDLE_INVITED_CODE_REWARD'):
        return getattr(guard_proto_pb2, 'SSPKG_HANDLE_INVITED_CODE_REWARD')()
    
    if hash == StringHash.calculate_hash('SSPKG_APPLY_INVITED_CODE'):
        return getattr(guard_proto_pb2, 'SSPKG_APPLY_INVITED_CODE')()
    
    if hash == StringHash.calculate_hash('SSPKG_APPLY_INVITED_CODE_TO_CROSS'):
        return getattr(guard_proto_pb2, 'SSPKG_APPLY_INVITED_CODE_TO_CROSS')()
    
    if hash == StringHash.calculate_hash('SSPKG_APPLY_INVITED_CODE_CROSS_TO_FRIEND'):
        return getattr(guard_proto_pb2, 'SSPKG_APPLY_INVITED_CODE_CROSS_TO_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSPKG_APPLY_INVITED_CODE_RES_TO_CROSS'):
        return getattr(guard_proto_pb2, 'SSPKG_APPLY_INVITED_CODE_RES_TO_CROSS')()
    
    if hash == StringHash.calculate_hash('SSPKG_APPLY_INVITED_CODE_RES_TO_CROSS_TO_FRIEND'):
        return getattr(guard_proto_pb2, 'SSPKG_APPLY_INVITED_CODE_RES_TO_CROSS_TO_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSPKG_NTF_INVITED_ERROR'):
        return getattr(guard_proto_pb2, 'SSPKG_NTF_INVITED_ERROR')()
    
    if hash == StringHash.calculate_hash('SSPKG_INVITED_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SSPKG_INVITED_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_REQUEST_INVITED_FRIEND'):
        return getattr(guard_proto_pb2, 'SSPKG_REQUEST_INVITED_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSDT_INVITED_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_INVITED_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_REQUEST_INVITED_TO_CROSS'):
        return getattr(guard_proto_pb2, 'SSPKG_REQUEST_INVITED_TO_CROSS')()
    
    if hash == StringHash.calculate_hash('SSPKG_REQUES_INVITED_CROSS_TO_FRIEND'):
        return getattr(guard_proto_pb2, 'SSPKG_REQUES_INVITED_CROSS_TO_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSPKG_RESPONSE_INVITED_FRIEND_TO_CROSS'):
        return getattr(guard_proto_pb2, 'SSPKG_RESPONSE_INVITED_FRIEND_TO_CROSS')()
    
    if hash == StringHash.calculate_hash('SSPKG_RESPONSE_INVITED_CROSS_TO_FRIEND'):
        return getattr(guard_proto_pb2, 'SSPKG_RESPONSE_INVITED_CROSS_TO_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSDT_REQUEST_SOCIAL_FRIEND'):
        return getattr(guard_proto_pb2, 'SSDT_REQUEST_SOCIAL_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSPKG_REQUEST_SOCIAL_FRIEND'):
        return getattr(guard_proto_pb2, 'SSPKG_REQUEST_SOCIAL_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSPKG_REQUEST_SOCIAL_FRIEND_CROSS'):
        return getattr(guard_proto_pb2, 'SSPKG_REQUEST_SOCIAL_FRIEND_CROSS')()
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_SOCIAL_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_SOCIAL_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_INFO_CROSS'):
        return getattr(guard_proto_pb2, 'SSDT_FRIEND_INFO_CROSS')()
    
    if hash == StringHash.calculate_hash('SSPKG_REQUEST_INVITE_REWARD'):
        return getattr(guard_proto_pb2, 'SSPKG_REQUEST_INVITE_REWARD')()
    
    if hash == StringHash.calculate_hash('SSPKG_RESPONSE_INVITE_REWARD'):
        return getattr(guard_proto_pb2, 'SSPKG_RESPONSE_INVITE_REWARD')()
    
    if hash == StringHash.calculate_hash('SSPKG_NOTIFY_SOCIAL_FRIEND_ERROR'):
        return getattr(guard_proto_pb2, 'SSPKG_NOTIFY_SOCIAL_FRIEND_ERROR')()
    
    if hash == StringHash.calculate_hash('SSDT_SOCIAL_FRIEND_ID'):
        return getattr(guard_proto_pb2, 'SSDT_SOCIAL_FRIEND_ID')()
    
    if hash == StringHash.calculate_hash('SSPKG_SEND_POWER_TO_SOCIAL_FRIEND'):
        return getattr(guard_proto_pb2, 'SSPKG_SEND_POWER_TO_SOCIAL_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSPKG_SEND_POWER_TO_SOCIAL_FRIEND_FROM_CROSS'):
        return getattr(guard_proto_pb2, 'SSPKG_SEND_POWER_TO_SOCIAL_FRIEND_FROM_CROSS')()
    
    if hash == StringHash.calculate_hash('SSPKG_SEND_POWER_TO_SOCIAL_FRIEND_CROSS'):
        return getattr(guard_proto_pb2, 'SSPKG_SEND_POWER_TO_SOCIAL_FRIEND_CROSS')()
    
    if hash == StringHash.calculate_hash('SSPKG_SOCIAL_FRIEND_POWER_ADD'):
        return getattr(guard_proto_pb2, 'SSPKG_SOCIAL_FRIEND_POWER_ADD')()
    
    if hash == StringHash.calculate_hash('SSDT_SEND_POSER_TO_SOCIAL_FRIEND'):
        return getattr(guard_proto_pb2, 'SSDT_SEND_POSER_TO_SOCIAL_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSPKG_RECV_POWER_FROM_SOCIAL_FRIEND'):
        return getattr(guard_proto_pb2, 'SSPKG_RECV_POWER_FROM_SOCIAL_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSPKG_SOCIAL_FRIEND_INFO_CHANGE'):
        return getattr(guard_proto_pb2, 'SSPKG_SOCIAL_FRIEND_INFO_CHANGE')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_INFO_REQUEST'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_INFO_REQUEST')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_CROSS_INFO_RESPONSE_TO_CROSS'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_CROSS_INFO_RESPONSE_TO_CROSS')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_CROSS_INFO_RESPONSE_TO_CROSS_TO_FRIEND'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_CROSS_INFO_RESPONSE_TO_CROSS_TO_FRIEND')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_CROSS_INFO_RESPONSE'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_CROSS_INFO_RESPONSE')()
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_APPLY_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_FRIEND_APPLY_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_RECOMMAND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_FRIEND_RECOMMAND_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_PLAYER_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_OPT_FRIEND_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_OPT_FRIEND_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_OPT_FRIEND_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_OPT_FRIEND_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_LOGIN_FRIEND_SVR_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_LOGIN_FRIEND_SVR_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_LOGIN_FRIEND_SVR_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_LOGIN_FRIEND_SVR_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_INFO_CHG'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_INFO_CHG')()
    
    if hash == StringHash.calculate_hash('SSDT_RELATION_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_RELATION_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_SOCIAL_RELATION_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_SOCIAL_RELATION_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_INVITED_REWARD_GOT'):
        return getattr(guard_proto_pb2, 'SSDT_INVITED_REWARD_GOT')()
    
    if hash == StringHash.calculate_hash('SSDT_INVITED_FRIEND_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_INVITED_FRIEND_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_INVITED_TOTAL_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_INVITED_TOTAL_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_ASSISTANT_HERO_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_ASSISTANT_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_SEND_POWER_RECORD'):
        return getattr(guard_proto_pb2, 'SSDT_SEND_POWER_RECORD')()
    
    if hash == StringHash.calculate_hash('DB_FRIEND_BLOB'):
        return getattr(guard_proto_pb2, 'DB_FRIEND_BLOB')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_APPLYLIST_CHG'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_NOTIFY_APPLYLIST_CHG')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_RECV_POWER_ALL_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_RECV_POWER_ALL_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_RECV_POWER_ALL_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_RECV_POWER_ALL_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_SEND_POWER_ALL_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_SEND_POWER_ALL_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_SEND_POWER_ALL_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_FRIEND_SEND_POWER_ALL_RES')()
    
    if hash == StringHash.calculate_hash('PKG_FRIEND_DISP_INFO_CHG'):
        return getattr(guard_proto_pb2, 'PKG_FRIEND_DISP_INFO_CHG')()
    
    if hash == StringHash.calculate_hash('FRIEND_BROADCAST_DETAIL'):
        return getattr(guard_proto_pb2, 'FRIEND_BROADCAST_DETAIL')()
    
    if hash == StringHash.calculate_hash('PKG_FRIEND_BROADCAST'):
        return getattr(guard_proto_pb2, 'PKG_FRIEND_BROADCAST')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RECOMMAND_FRIEND_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RECOMMAND_FRIEND_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RECOMMAND_FRIEND_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_RECOMMAND_FRIEND_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_KICK_PLAYER_ALL_ZONE'):
        return getattr(guard_proto_pb2, 'SSPKG_KICK_PLAYER_ALL_ZONE')()
    
    if hash == StringHash.calculate_hash('DBBLOB_ACTIVITY_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_ACTIVITY_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_DAILY_RECHARGE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_DAILY_RECHARGE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_DAILY_RECHARGE_REWARD'):
        return getattr(guard_proto_pb2, 'DBBLOB_DAILY_RECHARGE_REWARD')()
    
    if hash == StringHash.calculate_hash('SSDT_NEWBIE_ACTIVITY_RECHARGE_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_NEWBIE_ACTIVITY_RECHARGE_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_NEWBIE_ACTIVITY_RECHARGE'):
        return getattr(guard_proto_pb2, 'DBBLOB_NEWBIE_ACTIVITY_RECHARGE')()
    
    if hash == StringHash.calculate_hash('SSPKG_NTF_VIP_CHANGE'):
        return getattr(guard_proto_pb2, 'SSPKG_NTF_VIP_CHANGE')()
    
    if hash == StringHash.calculate_hash('DBBLOB_FRIEND_ASSIST_HERO_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_FRIEND_ASSIST_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_BOSSRUSH_INFO'):
        return getattr(guard_proto_pb2, 'DBBLOB_PLAYER_BOSSRUSH_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_CLAIM_ASSISTANT_HERO_REWARD'):
        return getattr(guard_proto_pb2, 'SSPKG_CLAIM_ASSISTANT_HERO_REWARD')()
    
    if hash == StringHash.calculate_hash('SSPKG_BOSSRUSH_HIRE_HERO'):
        return getattr(guard_proto_pb2, 'SSPKG_BOSSRUSH_HIRE_HERO')()
    
    if hash == StringHash.calculate_hash('SSDT_WORLD_ACTIVITY_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_WORLD_ACTIVITY_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_WORLD_DROP_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_WORLD_DROP_INFO')()
    
    if hash == StringHash.calculate_hash('SSDT_GAME_SERVER_MISC_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_GAME_SERVER_MISC_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_GAME_SERVER_MISC_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_UPDATE_GAME_SERVER_MISC_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GAMESVR_MISC_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_GAMESVR_MISC_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GAMESVR_MISC_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_GAMESVR_MISC_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ACTIVITY_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_RANK_BATTLE_ACTIVITY_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_REPORT_PLAYER_CHAT_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_REPORT_PLAYER_CHAT_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_REPORT_PLAYER_CHAT_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_REPORT_PLAYER_CHAT_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_QUALIFICATION_RANK_POS_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_RANK_POS_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_QUALIFICATION_RANK_POS_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_RANK_POS_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_BASE_INFO_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_BASE_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_BASE_INFO_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_BASE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_CHECK_QUALIFICATION_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_CHECK_QUALIFICATION_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_CHECK_QUALIFICATION_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_CHECK_QUALIFICATION_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_TOP_BATTLE_STATE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_TOP_BATTLE_STATE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_GET_TOP_BATTLE_STATE_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_GET_TOP_BATTLE_STATE_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_APPLY_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_APPLY_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_FIGHT_TARGET_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_GET_FIGHT_TARGET_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_FIGHT_TARGET_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_GET_FIGHT_TARGET_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_ENTER_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_ENTER_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_ENTER_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_ENTER_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_UNLOCK_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_UNLOCK_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_BALANCE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_BALANCE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_BALANCE_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_BALANCE_RES')()
    
    if hash == StringHash.calculate_hash('SSDT_TOP_BATTLE_REWARD_INFO'):
        return getattr(guard_proto_pb2, 'SSDT_TOP_BATTLE_REWARD_INFO')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_REWARD_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_REWARD_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_CHALLENGE_NOTIFY_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_CHALLENGE_NOTIFY_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_TOPTHREE_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_GET_TOPTHREE_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_TOPTHREE_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_GET_TOPTHREE_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_SEND_ROCKET_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_SEND_ROCKET_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_SEND_ROCKET_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_SEND_ROCKET_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_NTF_SEND_ROCKET'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_NTF_SEND_ROCKET')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_ROCKET_REWARD_REQ'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_GET_ROCKET_REWARD_REQ')()
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_ROCKET_REWARD_RES'):
        return getattr(guard_proto_pb2, 'SSPKG_TOP_BATTLE_GET_ROCKET_REWARD_RES')()
    
    if hash == StringHash.calculate_hash('SSPKG_NTF_TOP_BATTLE_ROCKET_RESET'):
        return getattr(guard_proto_pb2, 'SSPKG_NTF_TOP_BATTLE_ROCKET_RESET')()
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_GET_FIGHT_TARGET_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_TOP_BATTLE_GET_FIGHT_TARGET_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_GET_FIGHT_TARGET_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_GET_FIGHT_TARGET_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_ENTER_DUNGEON_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_TOP_BATTLE_ENTER_DUNGEON_REQ')()
    
    if hash == StringHash.calculate_hash('CSDT_TOP_BATTLE_DEFENSE_HERO_ATTR'):
        return getattr(guard_proto_pb2, 'CSDT_TOP_BATTLE_DEFENSE_HERO_ATTR')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_ENTER_DUNGEON_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_ENTER_DUNGEON_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_ROUND_BEGIN_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_TOP_BATTLE_ROUND_BEGIN_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_ROUND_BEGIN_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_ROUND_BEGIN_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_BALANCE_ONEROUND_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_TOP_BATTLE_BALANCE_ONEROUND_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_BALANCE_ONEROUND_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_BALANCE_ONEROUND_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_BALANCE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_BALANCE_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_BASE_INFO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_BASE_INFO_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_GET_TOP_BATTLE_STATE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_GET_TOP_BATTLE_STATE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_GET_TOP_BATTLE_STATE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_GET_TOP_BATTLE_STATE_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_GET_TOPTHREE_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_TOP_BATTLE_GET_TOPTHREE_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_GET_TOPTHREE_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_GET_TOPTHREE_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_REFRESH_COUNT_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_REFRESH_COUNT_RES')()
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_BUY_COUNT_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_TOP_BATTLE_BUY_COUNT_REQ')()
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_SEND_ROCKET_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_TOP_BATTLE_SEND_ROCKET_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_SEND_ROCKET_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_SEND_ROCKET_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_TOP_BATTLE_ROCKET'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_TOP_BATTLE_ROCKET')()
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_GET_ROCKET_REWARD'):
        return getattr(guard_proto_pb2, 'CSPKG_TOP_BATTLE_GET_ROCKET_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_GET_ROCKET_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_TOP_BATTLE_GET_ROCKET_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_TOP_BATTLE_ROCKET_CONF'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_TOP_BATTLE_ROCKET_CONF')()
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_TOP_BATTLE_ROCKET_RESET'):
        return getattr(guard_proto_pb2, 'SCPKG_NTF_TOP_BATTLE_ROCKET_RESET')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_VIEW_PLAYER_INFO_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_VIEW_PLAYER_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('ST_VIEW_PlAYER_HERO_INFO'):
        return getattr(guard_proto_pb2, 'ST_VIEW_PlAYER_HERO_INFO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_VIEW_PLAYER_INFO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_VIEW_PLAYER_INFO_RES')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_DUNBALANCE_WORLD_BOSS'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PLAYER_DUNBALANCE_WORLD_BOSS')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_ERROR'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_WORLD_BOSS_ERROR')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_WORLD_BOSS_KILL_REWARD'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_PLAYER_WORLD_BOSS_KILL_REWARD')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_DAMAGE_RANK_PLAYER'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_WORLD_BOSS_DAMAGE_RANK_PLAYER')()
    
    if hash == StringHash.calculate_hash('SCPKG_WORLD_BOSS_KILLER_INFO'):
        return getattr(guard_proto_pb2, 'SCPKG_WORLD_BOSS_KILLER_INFO')()
    
    if hash == StringHash.calculate_hash('CSPKG_WORLD_BOSS_KILLER_INFO_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_WORLD_BOSS_KILLER_INFO_REQ')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_WORLD_BOSS_STATUS_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_WORLD_BOSS_STATUS_REQ')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_WORLD_BOSS_CHANGE_HERO_REQ'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_WORLD_BOSS_CHANGE_HERO_REQ')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_CHANGE_HERO_RES'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_WORLD_BOSS_CHANGE_HERO_RES')()
    
    if hash == StringHash.calculate_hash('CSDT_WORLD_BOSS_HERO'):
        return getattr(guard_proto_pb2, 'CSDT_WORLD_BOSS_HERO')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_CHALLENGE_DATA'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_WORLD_BOSS_CHALLENGE_DATA')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_STATUS'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_WORLD_BOSS_STATUS')()
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_UPDATE_WORLD_BOSS'):
        return getattr(guard_proto_pb2, 'CSPKG_CMD_UPDATE_WORLD_BOSS')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_UPDATE_WORLD_BOSS'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_UPDATE_WORLD_BOSS')()
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_DEAD'):
        return getattr(guard_proto_pb2, 'SCPKG_CMD_WORLD_BOSS_DEAD')()
    
    return None

def get_pb_name(hash):
    if hash == StringHash.calculate_hash('SCDT_ACHIEVEMENT_INFO'):
        return 'SCDT_ACHIEVEMENT_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_ACHIEVEMENT_STATISTICS_SYNC'):
        return 'SCDT_ACHIEVEMENT_STATISTICS_SYNC'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ACHIEVEMENT_STATISTICS_SYNC'):
        return 'SCPKG_CMD_ACHIEVEMENT_STATISTICS_SYNC'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GET_ACHIEVEMENT_REWARD'):
        return 'CSPKG_CMD_GET_ACHIEVEMENT_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GET_ACHIEVEMENT_REWARD'):
        return 'SCPKG_CMD_GET_ACHIEVEMENT_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ACHIEVEMENT_COMPELETE'):
        return 'SCPKG_CMD_ACHIEVEMENT_COMPELETE'
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_RESOURCE_BOX_INFO'):
        return 'SCDT_ACTIVITY_RESOURCE_BOX_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_TIME_RECHARGE_INFO'):
        return 'SCDT_ACTIVITY_TIME_RECHARGE_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_OPEN_RECHARGE_INFO'):
        return 'SCDT_ACTIVITY_OPEN_RECHARGE_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_INFO'):
        return 'SCDT_ACTIVITY_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_CONTROL'):
        return 'SCDT_ACTIVITY_CONTROL'
    
    if hash == StringHash.calculate_hash('CSDT_ACTIVITY_BROADCAST'):
        return 'CSDT_ACTIVITY_BROADCAST'
    
    if hash == StringHash.calculate_hash('CSDT_ACTIVITY_STATUS_BROADCAST'):
        return 'CSDT_ACTIVITY_STATUS_BROADCAST'
    
    if hash == StringHash.calculate_hash('SCPKG_ACTIVITY_CONTROL'):
        return 'SCPKG_ACTIVITY_CONTROL'
    
    if hash == StringHash.calculate_hash('SCPKG_ACTIVITY_INFO'):
        return 'SCPKG_ACTIVITY_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_BROAD_MSG'):
        return 'CSDT_BROAD_MSG'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_BROADCAST'):
        return 'SCPKG_NTF_BROADCAST'
    
    if hash == StringHash.calculate_hash('SCPKG_GAME_PLAY_MODE_ACTIVITY_INFO'):
        return 'SCPKG_GAME_PLAY_MODE_ACTIVITY_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_OPEN_RESOURCE_BOX_REQ'):
        return 'CSPKG_OPEN_RESOURCE_BOX_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_OPEN_RESOURCE_BOX_RES'):
        return 'SCPKG_OPEN_RESOURCE_BOX_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_ACTIVITY_RESOURCE_BOX_INFO'):
        return 'SCPKG_ACTIVITY_RESOURCE_BOX_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_COUNT_TO_REWARD_REQ'):
        return 'CSPKG_GET_COUNT_TO_REWARD_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_COUNT_TO_REWARD_RES'):
        return 'SCPKG_GET_COUNT_TO_REWARD_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_ACTIVITY_DISCOUNT'):
        return 'SCPKG_NTF_ACTIVITY_DISCOUNT'
    
    if hash == StringHash.calculate_hash('SCDT_RECHARGE_REWARD'):
        return 'SCDT_RECHARGE_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_DAILY_RECHARGE'):
        return 'SCPKG_NTF_REWARD_DAILY_RECHARGE'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_SECT_RECHARGE'):
        return 'SCPKG_NTF_REWARD_SECT_RECHARGE'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_PRIZEDROW_COUNT'):
        return 'SCPKG_NTF_REWARD_PRIZEDROW_COUNT'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_RESOURCE_BOX'):
        return 'SCPKG_NTF_REWARD_RESOURCE_BOX'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_TIME_RECHARGE'):
        return 'SCPKG_NTF_REWARD_TIME_RECHARGE'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_REWARD_OPEN_RECHARGE'):
        return 'SCPKG_NTF_REWARD_OPEN_RECHARGE'
    
    if hash == StringHash.calculate_hash('CSPKG_ITEM_COLLECT_REQ'):
        return 'CSPKG_ITEM_COLLECT_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_ITEM_COLLECT_RES'):
        return 'SCPKG_ITEM_COLLECT_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_TIME_RECHARGE_REWARD_REQ'):
        return 'CSPKG_TIME_RECHARGE_REWARD_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_TIME_RECHARGE_REWARD_RES'):
        return 'SCPKG_TIME_RECHARGE_REWARD_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_TIME_RECHARGE'):
        return 'SCPKG_NTF_TIME_RECHARGE'
    
    if hash == StringHash.calculate_hash('CSPKG_OPEN_RECHARGE_REWARD_REQ'):
        return 'CSPKG_OPEN_RECHARGE_REWARD_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_OPEN_RECHARGE_REWARD_RES'):
        return 'SCPKG_OPEN_RECHARGE_REWARD_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_OPEN_RECHARGE'):
        return 'SCPKG_NTF_OPEN_RECHARGE'
    
    if hash == StringHash.calculate_hash('CSPKG_ENTER_BOSSRUSH_ROOM_REQ'):
        return 'CSPKG_ENTER_BOSSRUSH_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_BOSSRUSH_INFO'):
        return 'SCPKG_BOSSRUSH_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_HP_REMAIN_CHANGE'):
        return 'SCPKG_HP_REMAIN_CHANGE'
    
    if hash == StringHash.calculate_hash('SCPKG_BOSSRUSH_HERO_INFO'):
        return 'SCPKG_BOSSRUSH_HERO_INFO'
    
    if hash == StringHash.calculate_hash('ST_BOSS_RUSH_FRIEND_HERO_DETAIL'):
        return 'ST_BOSS_RUSH_FRIEND_HERO_DETAIL'
    
    if hash == StringHash.calculate_hash('SCPKG_ENTER_BOSSRUSH_ROOM_RES'):
        return 'SCPKG_ENTER_BOSSRUSH_ROOM_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_BOSSRUSH_REPLACE_MAIN_HERO'):
        return 'CSPKG_BOSSRUSH_REPLACE_MAIN_HERO'
    
    if hash == StringHash.calculate_hash('CSPKG_BOSSRUSH_REPLACE_PARTNER_HERO'):
        return 'CSPKG_BOSSRUSH_REPLACE_PARTNER_HERO'
    
    if hash == StringHash.calculate_hash('CSPKG_BOSSRUSH_ENTER_DUN'):
        return 'CSPKG_BOSSRUSH_ENTER_DUN'
    
    if hash == StringHash.calculate_hash('SCPKG_BOSSRUSH_ENTER_DUN_RES'):
        return 'SCPKG_BOSSRUSH_ENTER_DUN_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_BOSSRUSH_REPLACE_BOSS'):
        return 'CSPKG_BOSSRUSH_REPLACE_BOSS'
    
    if hash == StringHash.calculate_hash('CSPKG_BOSSRUSH_SELECT_HERO_CONFIRM'):
        return 'CSPKG_BOSSRUSH_SELECT_HERO_CONFIRM'
    
    if hash == StringHash.calculate_hash('SCPKG_BOSSRUSH_REPLACE_BOSS_RES'):
        return 'SCPKG_BOSSRUSH_REPLACE_BOSS_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_REPLACE_ASSISTANT_HERO'):
        return 'CSPKG_REPLACE_ASSISTANT_HERO'
    
    if hash == StringHash.calculate_hash('CSPKG_CLEAR_ASSISTANT_HERO'):
        return 'CSPKG_CLEAR_ASSISTANT_HERO'
    
    if hash == StringHash.calculate_hash('CSPKG_CLAIM_ASSISTANT_HERO_REWARD'):
        return 'CSPKG_CLAIM_ASSISTANT_HERO_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_ASSISTANT_HERO_INFO'):
        return 'SCPKG_ASSISTANT_HERO_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_REQUEST_FRIEND_ASSISTANT_HERO'):
        return 'CSPKG_REQUEST_FRIEND_ASSISTANT_HERO'
    
    if hash == StringHash.calculate_hash('CSPKG_RESET_CURRENT_BOSSRUSH'):
        return 'CSPKG_RESET_CURRENT_BOSSRUSH'
    
    if hash == StringHash.calculate_hash('FRIEND_ASSISTANT_HERO'):
        return 'FRIEND_ASSISTANT_HERO'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_ASSISSTANT_HERO_CAN_USE'):
        return 'SCPKG_FRIEND_ASSISSTANT_HERO_CAN_USE'
    
    if hash == StringHash.calculate_hash('CSPKGG_REPLACE_FRIEND_ASSISTANT_HERO'):
        return 'CSPKGG_REPLACE_FRIEND_ASSISTANT_HERO'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_CURRENT_ASSISSTANT_HERO'):
        return 'SCPKG_FRIEND_CURRENT_ASSISSTANT_HERO'
    
    if hash == StringHash.calculate_hash('CSDT_BUILDING_BASE_INFO'):
        return 'CSDT_BUILDING_BASE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_RES_STORE_INFO'):
        return 'CSDT_RES_STORE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_ISLAND_DEFEND_INFO'):
        return 'CSDT_ISLAND_DEFEND_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_ISLAND_BORNINFO'):
        return 'CSDT_ISLAND_BORNINFO'
    
    if hash == StringHash.calculate_hash('CSDT_ISLAND_INFO'):
        return 'CSDT_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_ISLAND_GAININFO'):
        return 'CSDT_ISLAND_GAININFO'
    
    if hash == StringHash.calculate_hash('CSDT_BUILDING_INFO'):
        return 'CSDT_BUILDING_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_BUILDING_LEVELUP'):
        return 'CSPKG_CMD_BUILDING_LEVELUP'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_BUILDING_LEVELUP_BEG'):
        return 'SCPKG_CMD_BUILDING_LEVELUP_BEG'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_BUILDING_LEVELUP_END'):
        return 'SCPKG_CMD_BUILDING_LEVELUP_END'
    
    if hash == StringHash.calculate_hash('SCDT_BUILDING_SIMPLE_INFO'):
        return 'SCDT_BUILDING_SIMPLE_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_UNLOCK_BUILDING'):
        return 'SCPKG_CMD_UNLOCK_BUILDING'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_BUILDING_LEVELUP_DIRECTLY'):
        return 'CSPKG_CMD_BUILDING_LEVELUP_DIRECTLY'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ISLAND_BORNRES'):
        return 'SCPKG_CMD_ISLAND_BORNRES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_SET_ISLAND_DEFEND'):
        return 'CSPKG_CMD_SET_ISLAND_DEFEND'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SET_ISLAND_DEFEND'):
        return 'SCPKG_CMD_SET_ISLAND_DEFEND'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GET_ISLAND_RESOURCE'):
        return 'CSPKG_CMD_GET_ISLAND_RESOURCE'
    
    if hash == StringHash.calculate_hash('SCDT_ISLAND_RESOURCE'):
        return 'SCDT_ISLAND_RESOURCE'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GET_ISLAND_RESOURCE'):
        return 'SCPKG_CMD_GET_ISLAND_RESOURCE'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_MONTHLY_REWARD'):
        return 'CSPKG_GET_MONTHLY_REWARD'
    
    if hash == StringHash.calculate_hash('CSDT_GROWTH_FUND_INFO'):
        return 'CSDT_GROWTH_FUND_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_CUMULATE_RECHARGE_INFO'):
        return 'CSDT_CUMULATE_RECHARGE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_GROUP_BUY_INFO'):
        return 'CSDT_GROUP_BUY_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_MONTH_CARD_INFO'):
        return 'SCDT_MONTH_CARD_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_SUPERVALUE_CARD_INFO'):
        return 'SCDT_SUPERVALUE_CARD_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_FIRSTREWARD_INFO'):
        return 'CSDT_FIRSTREWARD_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_FIRSTPURCHASE_INFO'):
        return 'CSDT_FIRSTPURCHASE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_MONTHCARD_INFO'):
        return 'CSDT_MONTHCARD_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_FIRSTPURCHASE_RES'):
        return 'SCPKG_GET_FIRSTPURCHASE_RES'
    
    if hash == StringHash.calculate_hash('CSDT_BUSINESS_INFO'):
        return 'CSDT_BUSINESS_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_GROWTH_FUND_INFO'):
        return 'SCPKG_GROWTH_FUND_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_GROWTH_FUND_REWARD'):
        return 'CSPKG_GET_GROWTH_FUND_REWARD'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_CUMULATE_RECHARGE_REWARD'):
        return 'CSPKG_GET_CUMULATE_RECHARGE_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_CUMULATE_RECHARGE_INFO'):
        return 'SCPKG_CUMULATE_RECHARGE_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_CUMULATE_RECHARGE_DAILY_REWARD'):
        return 'CSPKG_GET_CUMULATE_RECHARGE_DAILY_REWARD'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_FIRST_REWARD'):
        return 'CSPKG_GET_FIRST_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_FIRST_REWARD'):
        return 'SCPKG_GET_FIRST_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_MONTH_CARD_RES'):
        return 'SCPKG_BUY_MONTH_CARD_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_SUPERVALUE_CARD_RES'):
        return 'SCPKG_BUY_SUPERVALUE_CARD_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_CUMULATECOST_REWARD'):
        return 'CSPKG_GET_CUMULATECOST_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_CUMULATECOST_REWARD'):
        return 'SCPKG_GET_CUMULATECOST_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_CUMULATECOST'):
        return 'SCPKG_NTF_CUMULATECOST'
    
    if hash == StringHash.calculate_hash('SCPKG_DISP_CHATMSG'):
        return 'SCPKG_DISP_CHATMSG'
    
    if hash == StringHash.calculate_hash('CSPKG_GROUP_BUY_REQ'):
        return 'CSPKG_GROUP_BUY_REQ'
    
    if hash == StringHash.calculate_hash('CSPKG_PRIZE_DRAW_FREE_INFO_REQ'):
        return 'CSPKG_PRIZE_DRAW_FREE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_REMOVE_PRIVATE_MSG'):
        return 'SCPKG_REMOVE_PRIVATE_MSG'
    
    if hash == StringHash.calculate_hash('SCPKG_GROUP_BUY_RES'):
        return 'SCPKG_GROUP_BUY_RES'
    
    if hash == StringHash.calculate_hash('SCDT_VIP_PRIVILEGE'):
        return 'SCDT_VIP_PRIVILEGE'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_VIP_REFRESH'):
        return 'SCPKG_CMD_VIP_REFRESH'
    
    if hash == StringHash.calculate_hash('SCPKG_GROUP_BUY_BEG'):
        return 'SCPKG_GROUP_BUY_BEG'
    
    if hash == StringHash.calculate_hash('SCPKG_GROUP_BUY_END'):
        return 'SCPKG_GROUP_BUY_END'
    
    if hash == StringHash.calculate_hash('SCPKG_GROUP_BUY_REFRESH'):
        return 'SCPKG_GROUP_BUY_REFRESH'
    
    if hash == StringHash.calculate_hash('SCPKG_FIRST_REWARD_ACHIEVEMENT'):
        return 'SCPKG_FIRST_REWARD_ACHIEVEMENT'
    
    if hash == StringHash.calculate_hash('SCPKG_SECT_REWARD_INFO'):
        return 'SCPKG_SECT_REWARD_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_DAILY_REWARD_INFO'):
        return 'SCPKG_DAILY_REWARD_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_SECT_RECHARGE_REWARD'):
        return 'CSPKG_GET_SECT_RECHARGE_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_SECT_RECHARGE_REWARD'):
        return 'SCPKG_GET_SECT_RECHARGE_REWARD'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_DAILY_RECHARGE_REWARD'):
        return 'CSPKG_GET_DAILY_RECHARGE_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_DAILY_RECHARGE_REWARD'):
        return 'SCPKG_GET_DAILY_RECHARGE_REWARD'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_MONTHCARD_REWARD'):
        return 'CSPKG_GET_MONTHCARD_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_MONTHCARD_REWARD'):
        return 'SCPKG_GET_MONTHCARD_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_MONTHCARD_REFRESH'):
        return 'SCPKG_NTF_MONTHCARD_REFRESH'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_SUPERVALUECARD_REWARD'):
        return 'CSPKG_GET_SUPERVALUECARD_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_SUPERVALUECARD_REWARD'):
        return 'SCPKG_GET_SUPERVALUECARD_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_SUPERVALUECARD_REFRESH'):
        return 'SCPKG_NTF_SUPERVALUECARD_REFRESH'
    
    if hash == StringHash.calculate_hash('SCDT_VIP_DISCOUNT_INFO'):
        return 'SCDT_VIP_DISCOUNT_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_VIP_DAILY_BUY_DISCOUNT'):
        return 'SCPKG_VIP_DAILY_BUY_DISCOUNT'
    
    if hash == StringHash.calculate_hash('CSPKG_REMOVE_PRIVATE_MSG'):
        return 'CSPKG_REMOVE_PRIVATE_MSG'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_CHATMSG'):
        return 'CSPKG_CMD_CHATMSG'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_CHATMSG'):
        return 'SCPKG_CMD_CHATMSG'
    
    if hash == StringHash.calculate_hash('SCPKG_CHAT_BAN_ERROR'):
        return 'SCPKG_CHAT_BAN_ERROR'
    
    if hash == StringHash.calculate_hash('SCPKG_CHAT_FAST_ERROR'):
        return 'SCPKG_CHAT_FAST_ERROR'
    
    if hash == StringHash.calculate_hash('CSPKG_REPORT_PLAYER_CHAT_REQ'):
        return 'CSPKG_REPORT_PLAYER_CHAT_REQ'
    
    if hash == StringHash.calculate_hash('NOTIFY_CITY_REWARD_ACQUIRED'):
        return 'NOTIFY_CITY_REWARD_ACQUIRED'
    
    if hash == StringHash.calculate_hash('REQ_CITY_REWARD'):
        return 'REQ_CITY_REWARD'
    
    if hash == StringHash.calculate_hash('RES_CITY_REWARD'):
        return 'RES_CITY_REWARD'
    
    if hash == StringHash.calculate_hash('SCDT_CONTINUE_LOGIN_INFO'):
        return 'SCDT_CONTINUE_LOGIN_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_CONLOGIN_REWARD'):
        return 'CSPKG_GET_CONLOGIN_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_CONLOGIN_REWARD'):
        return 'SCPKG_NTF_CONLOGIN_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_CONLOGIN_REWARD'):
        return 'SCPKG_GET_CONLOGIN_REWARD'
    
    if hash == StringHash.calculate_hash('CS_3RD_PLAFFORM_FRIEND_GET'):
        return 'CS_3RD_PLAFFORM_FRIEND_GET'
    
    if hash == StringHash.calculate_hash('CS_BIND_3RD_PLATFORM_ID'):
        return 'CS_BIND_3RD_PLATFORM_ID'
    
    if hash == StringHash.calculate_hash('MessageData'):
        return 'MessageData'
    
    if hash == StringHash.calculate_hash('MessagePack'):
        return 'MessagePack'
    
    if hash == StringHash.calculate_hash('SCPKG_CONNECT_KEEP'):
        return 'SCPKG_CONNECT_KEEP'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_CLT_SETBITMARK_REQ'):
        return 'CSPKG_CMD_CLT_SETBITMARK_REQ'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_SET_STORYBIT_REQ'):
        return 'CSPKG_CMD_SET_STORYBIT_REQ'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GM_REQ'):
        return 'CSPKG_CMD_GM_REQ'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GM_TEXT_REQ'):
        return 'CSPKG_CMD_GM_TEXT_REQ'
    
    if hash == StringHash.calculate_hash('CSDT_GM_PARAMOBJ'):
        return 'CSDT_GM_PARAMOBJ'
    
    if hash == StringHash.calculate_hash('CSPKG_VERIFY_ROOM_COMPLETE_TIME'):
        return 'CSPKG_VERIFY_ROOM_COMPLETE_TIME'
    
    if hash == StringHash.calculate_hash('SCPKG_VERIFY_ROOM_COMPLETE_TIME_RES'):
        return 'SCPKG_VERIFY_ROOM_COMPLETE_TIME_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_HEARTBEAT'):
        return 'CSPKG_CMD_HEARTBEAT'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_ERROR'):
        return 'SCPKG_NTF_ERROR'
    
    if hash == StringHash.calculate_hash('SCPKG_ERROR_MSG'):
        return 'SCPKG_ERROR_MSG'
    
    if hash == StringHash.calculate_hash('SCDT_NOTIFY_DATA'):
        return 'SCDT_NOTIFY_DATA'
    
    if hash == StringHash.calculate_hash('SCDT_NOTIFY_INFO'):
        return 'SCDT_NOTIFY_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_UNLOCKDUN_UNTILID'):
        return 'SCPKG_CMD_UNLOCKDUN_UNTILID'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_USE_ITEM'):
        return 'CSPKG_CMD_USE_ITEM'
    
    if hash == StringHash.calculate_hash('CSDT_PACKOBJ_CHG_INFO'):
        return 'CSDT_PACKOBJ_CHG_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_ACT_PACKOBJ_CHG'):
        return 'SCPKG_ACT_PACKOBJ_CHG'
    
    if hash == StringHash.calculate_hash('CSDT_POS_COUNT_INFO'):
        return 'CSDT_POS_COUNT_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_PACKAGE_POS_INFO'):
        return 'CSDT_PACKAGE_POS_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_POS_COUNT'):
        return 'CSDT_POS_COUNT'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SLOT_OPEN'):
        return 'SCPKG_CMD_SLOT_OPEN'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_EXP_CHANGE'):
        return 'SCPKG_CMD_EXP_CHANGE'
    
    if hash == StringHash.calculate_hash('CS_RECONNECT'):
        return 'CS_RECONNECT'
    
    if hash == StringHash.calculate_hash('SCNOTIFY_RECONNECT_INFO'):
        return 'SCNOTIFY_RECONNECT_INFO'
    
    if hash == StringHash.calculate_hash('SC_RECONNECT_EXTRA_INFO'):
        return 'SC_RECONNECT_EXTRA_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_GIFT_CODE_REQ'):
        return 'CSPKG_GIFT_CODE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GIFT_CODE_RES'):
        return 'SCPKG_GIFT_CODE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_PURCHASE_REQ'):
        return 'CSPKG_PURCHASE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_PURCHASE_ACCEPT'):
        return 'SCPKG_PURCHASE_ACCEPT'
    
    if hash == StringHash.calculate_hash('CSDT_PURCHASE_REQUEST_DELIVERY'):
        return 'CSDT_PURCHASE_REQUEST_DELIVERY'
    
    if hash == StringHash.calculate_hash('SCDT_PURCHASE_REQUEST_DELIVERY_FINISH'):
        return 'SCDT_PURCHASE_REQUEST_DELIVERY_FINISH'
    
    if hash == StringHash.calculate_hash('CSPkgHead'):
        return 'CSPkgHead'
    
    if hash == StringHash.calculate_hash('CSDT_ERROR'):
        return 'CSDT_ERROR'
    
    if hash == StringHash.calculate_hash('SCPKG_DYNAMIC_CONFIG_REFRESH'):
        return 'SCPKG_DYNAMIC_CONFIG_REFRESH'
    
    if hash == StringHash.calculate_hash('CSDT_UI_OPT'):
        return 'CSDT_UI_OPT'
    
    if hash == StringHash.calculate_hash('CSPKG_USER_ACTION_LOG'):
        return 'CSPKG_USER_ACTION_LOG'
    
    if hash == StringHash.calculate_hash('CSPKG_USER_CONFIG'):
        return 'CSPKG_USER_CONFIG'
    
    if hash == StringHash.calculate_hash('CSPKG_SELL_RUBBISH'):
        return 'CSPKG_SELL_RUBBISH'
    
    if hash == StringHash.calculate_hash('CSPKG_KICK_CLIENT'):
        return 'CSPKG_KICK_CLIENT'
    
    if hash == StringHash.calculate_hash('SCPKG_DO_SOMETHING'):
        return 'SCPKG_DO_SOMETHING'
    
    if hash == StringHash.calculate_hash('CSPKG_DO_SOMETHING_RES'):
        return 'CSPKG_DO_SOMETHING_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_IOS_ACCOUNT'):
        return 'CSPKG_IOS_ACCOUNT'
    
    if hash == StringHash.calculate_hash('CSPKG_DIR_WORLD_INFO'):
        return 'CSPKG_DIR_WORLD_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_WORLD_HERO'):
        return 'SSDT_WORLD_HERO'
    
    if hash == StringHash.calculate_hash('SCDT_WORLD_STAT'):
        return 'SCDT_WORLD_STAT'
    
    if hash == StringHash.calculate_hash('SCPKG_DIR_WORLD_INFO'):
        return 'SCPKG_DIR_WORLD_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_IOS_BIND_GAMECENTER'):
        return 'CSPKG_IOS_BIND_GAMECENTER'
    
    if hash == StringHash.calculate_hash('SCPKG_IOS_BIND_GAMECENTER_RES'):
        return 'SCPKG_IOS_BIND_GAMECENTER_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_ACT_ALOGIN'):
        return 'CSPKG_ACT_ALOGIN'
    
    if hash == StringHash.calculate_hash('CSPKG_ACT_ALOGIN_ADDITIONAL'):
        return 'CSPKG_ACT_ALOGIN_ADDITIONAL'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ALOGIN'):
        return 'SCPKG_CMD_ALOGIN'
    
    if hash == StringHash.calculate_hash('CSPKG_GAMECENTER_PRELOGIN'):
        return 'CSPKG_GAMECENTER_PRELOGIN'
    
    if hash == StringHash.calculate_hash('SCPKG_GAMECENTER_PRELOGIN_RES'):
        return 'SCPKG_GAMECENTER_PRELOGIN_RES'
    
    if hash == StringHash.calculate_hash('CSDT_DUN_UNLOCK_DATA'):
        return 'CSDT_DUN_UNLOCK_DATA'
    
    if hash == StringHash.calculate_hash('CSDT_PVE_CHALLENGE_DATA'):
        return 'CSDT_PVE_CHALLENGE_DATA'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_RELIVE_REQ'):
        return 'CSPKG_CMD_RELIVE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_RELIVE_RES'):
        return 'SCPKG_CMD_RELIVE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_PAUSE_GAME'):
        return 'CSPKG_CMD_PAUSE_GAME'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_CONTINUE_GAME'):
        return 'CSPKG_CMD_CONTINUE_GAME'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_CONTINUE_GAME'):
        return 'SCPKG_CMD_CONTINUE_GAME'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_ENTER_ROOM'):
        return 'CSPKG_CMD_ENTER_ROOM'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENTER_ROOM'):
        return 'SCPKG_CMD_ENTER_ROOM'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROOM_TIMEOUT'):
        return 'SCPKG_CMD_ROOM_TIMEOUT'
    
    if hash == StringHash.calculate_hash('CSPKG_DUNGEON_UNLOCK'):
        return 'CSPKG_DUNGEON_UNLOCK'
    
    if hash == StringHash.calculate_hash('SCPKG_UNLOCK_DUNGEON'):
        return 'SCPKG_UNLOCK_DUNGEON'
    
    if hash == StringHash.calculate_hash('CSPKG_WIPE_OUT_PVE_DUNGEON_REQ'):
        return 'CSPKG_WIPE_OUT_PVE_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_WIPE_OUT_PVE_DUNGEON_RES'):
        return 'SCPKG_WIPE_OUT_PVE_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_WIPE_OUT_ITEM_REQ'):
        return 'CSPKG_BUY_WIPE_OUT_ITEM_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_WIPE_OUT_ITEM_RES'):
        return 'SCPKG_BUY_WIPE_OUT_ITEM_RES'
    
    if hash == StringHash.calculate_hash('SCDT_PVEUNLOCK_INFO'):
        return 'SCDT_PVEUNLOCK_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PVEUNLOCK'):
        return 'SCPKG_CMD_PVEUNLOCK'
    
    if hash == StringHash.calculate_hash('ST_ELITE_DUNGEON_CHANCE_INFO'):
        return 'ST_ELITE_DUNGEON_CHANCE_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_REFRESH_ELITE_DUNGEON_INFO'):
        return 'SCPKG_REFRESH_ELITE_DUNGEON_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_ELITE_COUNT_REQ'):
        return 'CSPKG_BUY_ELITE_COUNT_REQ'
    
    if hash == StringHash.calculate_hash('CSDT_ENTER_ONLINE_BATTLE_DUN_PARAM'):
        return 'CSDT_ENTER_ONLINE_BATTLE_DUN_PARAM'
    
    if hash == StringHash.calculate_hash('CSDT_ENTER_ENDLESS_DUN_PARAM'):
        return 'CSDT_ENTER_ENDLESS_DUN_PARAM'
    
    if hash == StringHash.calculate_hash('CSDT_ENTER_MULTIPLAYER_PVE_DUN_PARAM'):
        return 'CSDT_ENTER_MULTIPLAYER_PVE_DUN_PARAM'
    
    if hash == StringHash.calculate_hash('CSDT_ENTER_DUN_PARAM'):
        return 'CSDT_ENTER_DUN_PARAM'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_PLAYER_ENTERDUN'):
        return 'CSPKG_CMD_PLAYER_ENTERDUN'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_PLAYER_ENTERDUN_INDUN'):
        return 'CSPKG_CMD_PLAYER_ENTERDUN_INDUN'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_QUIT_DUN'):
        return 'CSPKG_CMD_QUIT_DUN'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_QUIT_DUN'):
        return 'SCPKG_CMD_QUIT_DUN'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_ENTER_PRACTICEDUN'):
        return 'CSPKG_CMD_ENTER_PRACTICEDUN'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENTER_PRACTICEDUN'):
        return 'SCPKG_CMD_ENTER_PRACTICEDUN'
    
    if hash == StringHash.calculate_hash('CSDT_CMD_DUN_EVALUATEINFO'):
        return 'CSDT_CMD_DUN_EVALUATEINFO'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_PVE_DUNBALANCE'):
        return 'CSDT_PLAYER_PVE_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_BOSSRUSH_DUNBALANCE'):
        return 'CSDT_PLAYER_BOSSRUSH_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_ENDLESS_DUNBALANCE'):
        return 'CSDT_PLAYER_ENDLESS_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_PRACTICE_DUNBALANCE'):
        return 'CSDT_PLAYER_PRACTICE_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_ONLINE_BATTLE_DUNBALANCE'):
        return 'CSDT_PLAYER_ONLINE_BATTLE_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_WORLD_BOSS_DUNBALANCE'):
        return 'CSDT_PLAYER_WORLD_BOSS_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_MULTIPLAYER_PVE_DUNBALANCE'):
        return 'CSDT_PLAYER_MULTIPLAYER_PVE_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('SCPKG_DUNGEON_COMBAT_SWITCH'):
        return 'SCPKG_DUNGEON_COMBAT_SWITCH'
    
    if hash == StringHash.calculate_hash('CSDT_DUNGEON_COMBAT_RECORD'):
        return 'CSDT_DUNGEON_COMBAT_RECORD'
    
    if hash == StringHash.calculate_hash('CSPKG_DUNGEON_COMBAT_REPORT'):
        return 'CSPKG_DUNGEON_COMBAT_REPORT'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_DUNBALANCE'):
        return 'CSDT_PLAYER_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_PLAYER_DUNBALANCE'):
        return 'CSPKG_CMD_PLAYER_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PRACTICE_DUNBALANCE'):
        return 'SCPKG_CMD_PRACTICE_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_DUNBALANCE_ENDLESS'):
        return 'SCPKG_CMD_PLAYER_DUNBALANCE_ENDLESS'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_DUNBALANCE_ONLINE_BATTLE'):
        return 'SCPKG_CMD_PLAYER_DUNBALANCE_ONLINE_BATTLE'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_DUNBALANCE'):
        return 'SCPKG_CMD_PLAYER_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_ENTERDUN'):
        return 'SCPKG_CMD_PLAYER_ENTERDUN'
    
    if hash == StringHash.calculate_hash('CSDT_TOWER_HERO'):
        return 'CSDT_TOWER_HERO'
    
    if hash == StringHash.calculate_hash('CSDT_TOWER_HERO_INFO'):
        return 'CSDT_TOWER_HERO_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_TOWER_CHALLENGE_DATA'):
        return 'CSDT_TOWER_CHALLENGE_DATA'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENDLESS_INFO'):
        return 'SCPKG_CMD_ENDLESS_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_REPORT_MST_INFO'):
        return 'CSDT_REPORT_MST_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_REPORT_ENDLESS_ROOM_SCORE'):
        return 'CSPKG_REPORT_ENDLESS_ROOM_SCORE'
    
    if hash == StringHash.calculate_hash('SCPKG_REPORT_ENDLESS_ROOM_SCORE'):
        return 'SCPKG_REPORT_ENDLESS_ROOM_SCORE'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENDLESS_INTERVAL_BEG'):
        return 'SCPKG_CMD_ENDLESS_INTERVAL_BEG'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENDLESS_INTERVAL_END'):
        return 'SCPKG_CMD_ENDLESS_INTERVAL_END'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_RESET_ENDLESS_ROOM'):
        return 'CSPKG_CMD_RESET_ENDLESS_ROOM'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_RESET_ENDLESS_ROOM'):
        return 'SCPKG_CMD_RESET_ENDLESS_ROOM'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ENDLESS_REFRESH'):
        return 'SCPKG_CMD_ENDLESS_REFRESH'
    
    if hash == StringHash.calculate_hash('CSPKG_WIPE_OUT_ENDLESS_REQ'):
        return 'CSPKG_WIPE_OUT_ENDLESS_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_WIPE_OUT_ENDLESS_RES'):
        return 'SCPKG_WIPE_OUT_ENDLESS_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_AFTER_WIPE_OUT_CANCEL_ENDLESS_REQ'):
        return 'CSPKG_AFTER_WIPE_OUT_CANCEL_ENDLESS_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_AFTER_WIPE_OUT_CANCEL_ENDLESS_RES'):
        return 'SCPKG_AFTER_WIPE_OUT_CANCEL_ENDLESS_RES'
    
    if hash == StringHash.calculate_hash('CSDT_EQUIP_CHG_INFO'):
        return 'CSDT_EQUIP_CHG_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_ALL'):
        return 'SCPKG_EQUIP_ALL'
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_CHG'):
        return 'SCPKG_EQUIP_CHG'
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_GOT_RECORD'):
        return 'SCPKG_EQUIP_GOT_RECORD'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_WEAR_FROM_PACKAGE'):
        return 'CSPKG_EQUIP_WEAR_FROM_PACKAGE'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_UNWEAR'):
        return 'CSPKG_EQUIP_UNWEAR'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_HERO_ATTR'):
        return 'SCPKG_NTF_HERO_ATTR'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_REARRANGE'):
        return 'CSPKG_EQUIP_REARRANGE'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_LEVELUP'):
        return 'CSPKG_EQUIP_LEVELUP'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_WAKEUP'):
        return 'CSPKG_EQUIP_WAKEUP'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_GROWUP_MATERIAL'):
        return 'CSPKG_EQUIP_GROWUP_MATERIAL'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_GROWUP'):
        return 'CSPKG_EQUIP_GROWUP'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_SELL'):
        return 'CSPKG_EQUIP_SELL'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_BATCH_SELL'):
        return 'CSPKG_EQUIP_BATCH_SELL'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIPED_INFO'):
        return 'CSPKG_EQUIPED_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_USE_EQUIP_BOX'):
        return 'CSPKG_USE_EQUIP_BOX'
    
    if hash == StringHash.calculate_hash('SCPKG_USE_EQUIP_BOX'):
        return 'SCPKG_USE_EQUIP_BOX'
    
    if hash == StringHash.calculate_hash('CSDT_EQUIP_POS_INFO'):
        return 'CSDT_EQUIP_POS_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_PURIFY_EQUIP_POS'):
        return 'CSPKG_PURIFY_EQUIP_POS'
    
    if hash == StringHash.calculate_hash('SCPKG_PURIFY_EQUIP_POS'):
        return 'SCPKG_PURIFY_EQUIP_POS'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_FUSION_REQ'):
        return 'CSPKG_EQUIP_FUSION_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_FUSION_RES'):
        return 'SCPKG_EQUIP_FUSION_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_EQUIP_FUSION_ADDTION_REQ'):
        return 'CSPKG_BUY_EQUIP_FUSION_ADDTION_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_EQUIP_FUSION_ADDTION_RES'):
        return 'SCPKG_BUY_EQUIP_FUSION_ADDTION_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_RESET_RESULT_REQ'):
        return 'CSPKG_EQUIP_RESET_RESULT_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_RESET_RESULT_RES'):
        return 'SCPKG_EQUIP_RESET_RESULT_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_EQUIP_RESET_CONFIRM_REQ'):
        return 'CSPKG_EQUIP_RESET_CONFIRM_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_EQUIP_RESET_CONFIRM_RES'):
        return 'SCPKG_EQUIP_RESET_CONFIRM_RES'
    
    if hash == StringHash.calculate_hash('SCDT_NOTIFY_FACTOR_DATA'):
        return 'SCDT_NOTIFY_FACTOR_DATA'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_FACTOR_CHANGE'):
        return 'SCPKG_NTF_FACTOR_CHANGE'
    
    if hash == StringHash.calculate_hash('SCDT_NOTIFY_HERO_FACTOR_DATA'):
        return 'SCDT_NOTIFY_HERO_FACTOR_DATA'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_HERO_FACTOR'):
        return 'SCPKG_NTF_HERO_FACTOR'
    
    if hash == StringHash.calculate_hash('CSPKG_REMOVE_EMBEDED_FACTOR'):
        return 'CSPKG_REMOVE_EMBEDED_FACTOR'
    
    if hash == StringHash.calculate_hash('CSPKG_EMBED_FACTOR'):
        return 'CSPKG_EMBED_FACTOR'
    
    if hash == StringHash.calculate_hash('CSPKG_REMOVE_ALL_EMBEDED_FACTORS'):
        return 'CSPKG_REMOVE_ALL_EMBEDED_FACTORS'
    
    if hash == StringHash.calculate_hash('CSPKG_UPGRADE_ALL_FACTORS'):
        return 'CSPKG_UPGRADE_ALL_FACTORS'
    
    if hash == StringHash.calculate_hash('CSPKG_UPGRADE_FACTOR'):
        return 'CSPKG_UPGRADE_FACTOR'
    
    if hash == StringHash.calculate_hash('SCDT_FRIEND_BASE_INFO'):
        return 'SCDT_FRIEND_BASE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_FRIEND_ID'):
        return 'CSDT_FRIEND_ID'
    
    if hash == StringHash.calculate_hash('CSDT_FRIEND_HERO_INFO'):
        return 'CSDT_FRIEND_HERO_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_FRIEND_INFO'):
        return 'CSDT_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_OPT_FRIEND_REQ'):
        return 'CSPKG_OPT_FRIEND_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_OPT_FRIEND_RES'):
        return 'SCPKG_OPT_FRIEND_RES'
    
    if hash == StringHash.calculate_hash('SCDT_FRIEND_INFO'):
        return 'SCDT_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_FRIEND_APPLY_INFO'):
        return 'SCDT_FRIEND_APPLY_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_FRIEND_RECOMMAND_INFO'):
        return 'SCDT_FRIEND_RECOMMAND_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_PLAYER_FRIEND_INFO'):
        return 'SCDT_PLAYER_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_LOGIN_INFO'):
        return 'SCPKG_FRIEND_LOGIN_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_SOCIAL_FRIEND_INFO'):
        return 'SCDT_SOCIAL_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_SOCIAL_FRIEND_INFO'):
        return 'SCPKG_SOCIAL_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_SOCIAL_FRIEND_INFO_CHANGE'):
        return 'SCPKG_SOCIAL_FRIEND_INFO_CHANGE'
    
    if hash == StringHash.calculate_hash('CSPKG_RECV_POWER_FROM_SOCIAL_FRIEND'):
        return 'CSPKG_RECV_POWER_FROM_SOCIAL_FRIEND'
    
    if hash == StringHash.calculate_hash('SCPKG_NOTIFY_SOCIAL_FRIEND_ERROR'):
        return 'SCPKG_NOTIFY_SOCIAL_FRIEND_ERROR'
    
    if hash == StringHash.calculate_hash('CSPKG_SEND_POWER_TO_SOCIAL_FRIEND'):
        return 'CSPKG_SEND_POWER_TO_SOCIAL_FRIEND'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_RECOMMAND_FRIEND_REQ'):
        return 'CSPKG_GET_RECOMMAND_FRIEND_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_RECOMMAND_FRIEND_RES'):
        return 'SCPKG_GET_RECOMMAND_FRIEND_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_NOTIFY_APPLYLIST_CHG_RES'):
        return 'SCPKG_FRIEND_NOTIFY_APPLYLIST_CHG_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG_RES'):
        return 'SCPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER'):
        return 'SCPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER'):
        return 'SCPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY'):
        return 'SCPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY'
    
    if hash == StringHash.calculate_hash('CSPKG_FRIEND_RECV_POWER_ALL_REQ'):
        return 'CSPKG_FRIEND_RECV_POWER_ALL_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_RECV_POWER_ALL_RES'):
        return 'SCPKG_FRIEND_RECV_POWER_ALL_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_FRIEND_SEND_POWER_ALL_REQ'):
        return 'CSPKG_FRIEND_SEND_POWER_ALL_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_SEND_POWER_ALL_RES'):
        return 'SCPKG_FRIEND_SEND_POWER_ALL_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_FRIEND_DISP_INFO_CHG'):
        return 'SCPKG_FRIEND_DISP_INFO_CHG'
    
    if hash == StringHash.calculate_hash('SCDT_INVITE_STATE_INFO'):
        return 'SCDT_INVITE_STATE_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_INVITE_STATE_INFO'):
        return 'SCPKG_INVITE_STATE_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_REQUEST_INVITED_FRIEND'):
        return 'CSPKG_REQUEST_INVITED_FRIEND'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_INVITED_ERROR'):
        return 'SCPKG_NTF_INVITED_ERROR'
    
    if hash == StringHash.calculate_hash('SCPKG_INVITED_FRIEND_INFO'):
        return 'SCPKG_INVITED_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_REQUEST_INVITE_REWARD'):
        return 'CSPKG_REQUEST_INVITE_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_APPLY_INVITED_CODE'):
        return 'SCPKG_APPLY_INVITED_CODE'
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_STRONG_POINT_HERO_INFO'):
        return 'ST_GANG_CITY_STRONG_POINT_HERO_INFO'
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_STRONG_POINT'):
        return 'ST_GANG_CITY_STRONG_POINT'
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY_INFO'):
        return 'ST_GANG_CITY_INFO'
    
    if hash == StringHash.calculate_hash('ST_GANG_CITY'):
        return 'ST_GANG_CITY'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_INFO'):
        return 'ST_GANG_BATTLE_MEM_INFO'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_LIST'):
        return 'ST_GANG_BATTLE_MEM_LIST'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_ATTACK_POINT_INFO'):
        return 'ST_GANG_BATTLE_ATTACK_POINT_INFO'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_ATTACK_INFO'):
        return 'ST_GANG_BATTLE_MEM_ATTACK_INFO'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_MEM_ATTACK_LIST'):
        return 'ST_GANG_BATTLE_MEM_ATTACK_LIST'
    
    if hash == StringHash.calculate_hash('CSDT_GANG_APPLYLIST_INFO'):
        return 'CSDT_GANG_APPLYLIST_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_GANGSIMPLE_INFO'):
        return 'CSDT_GANGSIMPLE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_GANGLIST_INFO'):
        return 'CSDT_GANGLIST_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_GANGMEM_INFO'):
        return 'CSDT_GANGMEM_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_GANG_SELF_INFO'):
        return 'CSDT_GANG_SELF_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_GANG_BATTLE_HISTORY_MEM_INFO'):
        return 'CSDT_GANG_BATTLE_HISTORY_MEM_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_GANG_BATTLE_HISTORY_MEM_LIST'):
        return 'CSDT_GANG_BATTLE_HISTORY_MEM_LIST'
    
    if hash == StringHash.calculate_hash('CSDT_GANG_BATTLE_HISTORY_INFO'):
        return 'CSDT_GANG_BATTLE_HISTORY_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_CREATEGANG_REQ'):
        return 'CSPKG_CMD_CREATEGANG_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_CREATEGANG_RES'):
        return 'SCPKG_CMD_CREATEGANG_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANGLIST_REQ'):
        return 'CSPKG_CMD_GANGLIST_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANGLIST_RES'):
        return 'SCPKG_CMD_GANGLIST_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_GANG'):
        return 'SCPKG_CMD_ROLELOGIN_GANG'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_APPLY_GANG_REQ'):
        return 'CSPKG_CMD_APPLY_GANG_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_APPLY_GANG_RES'):
        return 'SCPKG_CMD_APPLY_GANG_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_QUIT_GANG_REQ'):
        return 'CSPKG_CMD_QUIT_GANG_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_QUIT_GANG_RES'):
        return 'SCPKG_CMD_QUIT_GANG_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_TRANSFER_GANG_LEADER_REQ'):
        return 'CSPKG_TRANSFER_GANG_LEADER_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_TRANSFER_GANG_LEADER_RES'):
        return 'SCPKG_TRANSFER_GANG_LEADER_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_MEMLIST_REQ'):
        return 'CSPKG_CMD_GANG_MEMLIST_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_MEMLIST_RES'):
        return 'SCPKG_CMD_GANG_MEMLIST_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_DETAIL_REQ'):
        return 'CSPKG_CMD_GANG_DETAIL_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_DETAIL_RES'):
        return 'SCPKG_CMD_GANG_DETAIL_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_MEM_LIST_CHG_RES'):
        return 'SCPKG_CMD_GANG_MEM_LIST_CHG_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BLESS_RANK_CLEAR_RES'):
        return 'SCPKG_GANG_BLESS_RANK_CLEAR_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_UPDATE_BASIC_INFO_REQ'):
        return 'CSPKG_CMD_GANG_UPDATE_BASIC_INFO_REQ'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_SEARCH_GANG_REQ'):
        return 'CSPKG_CMD_SEARCH_GANG_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SEARCH_GANG_RES'):
        return 'SCPKG_CMD_SEARCH_GANG_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_UPDATE_BASIC_INFO_RES'):
        return 'SCPKG_CMD_GANG_UPDATE_BASIC_INFO_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_APPROVE_REQ'):
        return 'CSPKG_CMD_GANG_APPROVE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_APPROVE_RES'):
        return 'SCPKG_CMD_GANG_APPROVE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_CHAT_REQ'):
        return 'CSPKG_CMD_GANG_CHAT_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_CHAT_RES'):
        return 'SCPKG_CMD_GANG_CHAT_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_APPLYLIST_REQ'):
        return 'CSPKG_CMD_GANG_APPLYLIST_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_APPLYLIST_RES'):
        return 'SCPKG_CMD_GANG_APPLYLIST_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_APPROVETOMEM_RES'):
        return 'SCPKG_CMD_GANG_APPROVETOMEM_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_BASIC_INFO_CHG_RES'):
        return 'SCPKG_CMD_GANG_BASIC_INFO_CHG_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_KICK_MEM_REQ'):
        return 'CSPKG_CMD_GANG_KICK_MEM_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_KICK_MEM_RES'):
        return 'SCPKG_CMD_GANG_KICK_MEM_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GANG_SET_ELDER_REQ'):
        return 'CSPKG_CMD_GANG_SET_ELDER_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GANG_SET_ELDER_RES'):
        return 'SCPKG_CMD_GANG_SET_ELDER_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GANG_BLESS_REQ'):
        return 'CSPKG_GANG_BLESS_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BLESS_RES'):
        return 'SCPKG_GANG_BLESS_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_GANG_BLESS_COUNT_REQ'):
        return 'CSPKG_BUY_GANG_BLESS_COUNT_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_REFRESH_GANG_BLESS_INFO_RES'):
        return 'SCPKG_REFRESH_GANG_BLESS_INFO_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ'):
        return 'CSPKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES'):
        return 'SCPKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ'):
        return 'CSPKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_SET_GANG_CITY_STRONG_POINT_HERO_RES'):
        return 'SCPKG_SET_GANG_CITY_STRONG_POINT_HERO_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES'):
        return 'SCPKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_GANG_CITY_INFO_REQ'):
        return 'CSPKG_GET_GANG_CITY_INFO_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_GANG_CITY_INFO_RES'):
        return 'SCPKG_GET_GANG_CITY_INFO_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_APPLY_GANG_BATTLE_REQ'):
        return 'CSPKG_APPLY_GANG_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_APPLY_GANG_BATTLE_RES'):
        return 'SCPKG_APPLY_GANG_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BATTLE_STATE_BROAD'):
        return 'SCPKG_GANG_BATTLE_STATE_BROAD'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_GANG_BATTLE_CITY_REQ'):
        return 'CSPKG_GET_GANG_BATTLE_CITY_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_GANG_BATTLE_CITY_RES'):
        return 'SCPKG_GET_GANG_BATTLE_CITY_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BATTTLE_POINT_BROAD'):
        return 'SCPKG_GANG_BATTTLE_POINT_BROAD'
    
    if hash == StringHash.calculate_hash('CSPKG_ENTER_GANG_BATTLE_DUNGEON_REQ'):
        return 'CSPKG_ENTER_GANG_BATTLE_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_DEFENSE_HERO_INFO'):
        return 'ST_GANG_BATTLE_DEFENSE_HERO_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_ENTER_GANG_BATTLE_DUNGEON_RES'):
        return 'SCPKG_ENTER_GANG_BATTLE_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GANG_BATTLE_DUNGEON_ROUND_BEGIN_REQ'):
        return 'CSPKG_GANG_BATTLE_DUNGEON_ROUND_BEGIN_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BATTLE_DUNGEON_ROUND_BEGIN_RES'):
        return 'SCPKG_GANG_BATTLE_DUNGEON_ROUND_BEGIN_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GANG_BATTLE_BALANCE_REQ'):
        return 'CSPKG_GANG_BATTLE_BALANCE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GANG_BATTLE_BALANCE_RES'):
        return 'SCPKG_GANG_BATTLE_BALANCE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GET_GANG_BATTLE_STATE_REQ'):
        return 'CSPKG_CMD_GET_GANG_BATTLE_STATE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GET_GANG_BATTLE_STATE_RES'):
        return 'SCPKG_CMD_GET_GANG_BATTLE_STATE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GET_GANG_BATTLE_HISTORY_REQ'):
        return 'CSPKG_CMD_GET_GANG_BATTLE_HISTORY_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GET_GANG_BATTLE_HISTORY_RES'):
        return 'SCPKG_CMD_GET_GANG_BATTLE_HISTORY_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ'):
        return 'CSPKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES'):
        return 'SCPKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_GANG_BATTLE_STATE_INFO_REQ'):
        return 'CSPKG_GET_GANG_BATTLE_STATE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_GANG_BATTLE_STATE_INFO_RES'):
        return 'SCPKG_GET_GANG_BATTLE_STATE_INFO_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_NAME_REQ'):
        return 'GM_GET_PLAYER_ACCOUNT_BY_NAME_REQ'
    
    if hash == StringHash.calculate_hash('PLAYER_ACCOUNT_NAME_INFO'):
        return 'PLAYER_ACCOUNT_NAME_INFO'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_NAME_RES'):
        return 'GM_GET_PLAYER_ACCOUNT_BY_NAME_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_UID_REQ'):
        return 'GM_GET_PLAYER_ACCOUNT_BY_UID_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_ACCOUNT_BY_UID_RES'):
        return 'GM_GET_PLAYER_ACCOUNT_BY_UID_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_WORLD_INFO_REQ'):
        return 'GM_GET_PLAYER_WORLD_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PLAYER_WORLD_INFO'):
        return 'PLAYER_WORLD_INFO'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_WORLD_INFO_RES'):
        return 'GM_GET_PLAYER_WORLD_INFO_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BASE_INFO_REQ'):
        return 'GM_GET_PLAYER_BASE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('HERO_EMBLEM_INFO'):
        return 'HERO_EMBLEM_INFO'
    
    if hash == StringHash.calculate_hash('HERO_BASE_INFO'):
        return 'HERO_BASE_INFO'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BASE_INFO_RES'):
        return 'GM_GET_PLAYER_BASE_INFO_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_LIST_REQ'):
        return 'GM_GET_RANK_LIST_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_LIST_RES'):
        return 'GM_GET_RANK_LIST_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_POS_BY_UID_REQ'):
        return 'GM_GET_RANK_POS_BY_UID_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_RANK_POS_BY_UID_RES'):
        return 'GM_GET_RANK_POS_BY_UID_RES'
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_FROM_RANK_REQ'):
        return 'GM_DEL_PLAYER_FROM_RANK_REQ'
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_FROM_RANK_RES'):
        return 'GM_DEL_PLAYER_FROM_RANK_RES'
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_FROM_GANG_REQ'):
        return 'GM_DEL_PLAYER_FROM_GANG_REQ'
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_FROM_GANG_RES'):
        return 'GM_DEL_PLAYER_FROM_GANG_RES'
    
    if hash == StringHash.calculate_hash('GM_GANG_BASE_INFO'):
        return 'GM_GANG_BASE_INFO'
    
    if hash == StringHash.calculate_hash('GM_GANG_MEM_BASE_INFO'):
        return 'GM_GANG_MEM_BASE_INFO'
    
    if hash == StringHash.calculate_hash('GM_GET_GANG_BASE_INFO_REQ'):
        return 'GM_GET_GANG_BASE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_GANG_BASE_INFO_RES'):
        return 'GM_GET_GANG_BASE_INFO_RES'
    
    if hash == StringHash.calculate_hash('GM_MODIFY_GANG_BASE_INFO_REQ'):
        return 'GM_MODIFY_GANG_BASE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('GM_MODIFY_GANG_BASE_INFO_RES'):
        return 'GM_MODIFY_GANG_BASE_INFO_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_PVE_INFO_REQ'):
        return 'GM_GET_PLAYER_PVE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('GM_PLAYER_PVE_INFO'):
        return 'GM_PLAYER_PVE_INFO'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_PVE_INFO_RES'):
        return 'GM_GET_PLAYER_PVE_INFO_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BUILDING_AND_PACKAGE_REQ'):
        return 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_FIRST_PURCHASE'):
        return 'GM_GET_PLAYER_FIRST_PURCHASE'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_FIRST_PURCHASE_RES'):
        return 'GM_GET_PLAYER_FIRST_PURCHASE_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_BUILDING_AND_PACKAGE_RES'):
        return 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_TOTAL_RECHARGE_REQ'):
        return 'GM_GET_PLAYER_TOTAL_RECHARGE_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_TOTAL_RECHARGE_RES'):
        return 'GM_GET_PLAYER_TOTAL_RECHARGE_RES'
    
    if hash == StringHash.calculate_hash('GM_LOCK_PLAYER_REQ'):
        return 'GM_LOCK_PLAYER_REQ'
    
    if hash == StringHash.calculate_hash('GM_LOCK_PLAYER_RES'):
        return 'GM_LOCK_PLAYER_RES'
    
    if hash == StringHash.calculate_hash('GM_BAN_PLAYER_CHAT_REQ'):
        return 'GM_BAN_PLAYER_CHAT_REQ'
    
    if hash == StringHash.calculate_hash('GM_BAN_PLAYER_CHAT_RES'):
        return 'GM_BAN_PLAYER_CHAT_RES'
    
    if hash == StringHash.calculate_hash('GM_KICK_PLAYER_REQ'):
        return 'GM_KICK_PLAYER_REQ'
    
    if hash == StringHash.calculate_hash('GM_KICK_PLAYER_RES'):
        return 'GM_KICK_PLAYER_RES'
    
    if hash == StringHash.calculate_hash('GM_MAIL_ACC'):
        return 'GM_MAIL_ACC'
    
    if hash == StringHash.calculate_hash('GM_MAIL_INFO'):
        return 'GM_MAIL_INFO'
    
    if hash == StringHash.calculate_hash('GM_SEND_MAIL_REQ'):
        return 'GM_SEND_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('GM_MAIL_RES_INFO'):
        return 'GM_MAIL_RES_INFO'
    
    if hash == StringHash.calculate_hash('GM_SEND_MAIL_RES'):
        return 'GM_SEND_MAIL_RES'
    
    if hash == StringHash.calculate_hash('GM_GAMESERVER_MAIL_CONDITION'):
        return 'GM_GAMESERVER_MAIL_CONDITION'
    
    if hash == StringHash.calculate_hash('GM_SEND_GAMESERVER_MAIL_REQ'):
        return 'GM_SEND_GAMESERVER_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('GM_SEND_GAMESERVER_MAIL_RES'):
        return 'GM_SEND_GAMESERVER_MAIL_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_GAMESERVER_MAIL_INFO_REQ'):
        return 'GM_GET_GAMESERVER_MAIL_INFO_REQ'
    
    if hash == StringHash.calculate_hash('GM_GAMESERVER_MAIL_INFO'):
        return 'GM_GAMESERVER_MAIL_INFO'
    
    if hash == StringHash.calculate_hash('GM_GET_GAMESERVER_MAIL_INFO_RES'):
        return 'GM_GET_GAMESERVER_MAIL_INFO_RES'
    
    if hash == StringHash.calculate_hash('GM_DEL_GAMESERVER_MAIL_REQ'):
        return 'GM_DEL_GAMESERVER_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('GM_DEL_GAMESERVER_MAIL_RES'):
        return 'GM_DEL_GAMESERVER_MAIL_RES'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_ATTR_REQ'):
        return 'GM_CHG_PLAYER_ATTR_REQ'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_ATTR_RES'):
        return 'GM_CHG_PLAYER_ATTR_RES'
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_EQUIPED_EQUIP_REQ'):
        return 'GM_DEL_PLAYER_EQUIPED_EQUIP_REQ'
    
    if hash == StringHash.calculate_hash('GM_DEL_PLAYER_EQUIPED_EQUIP_RES'):
        return 'GM_DEL_PLAYER_EQUIPED_EQUIP_RES'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_HERO_LEVEL_REQ'):
        return 'GM_CHG_PLAYER_HERO_LEVEL_REQ'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_HERO_LEVEL_RES'):
        return 'GM_CHG_PLAYER_HERO_LEVEL_RES'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_VIP_LEVEL_REQ'):
        return 'GM_CHG_PLAYER_VIP_LEVEL_REQ'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_VIP_LEVEL_RES'):
        return 'GM_CHG_PLAYER_VIP_LEVEL_RES'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_UNLOCK_DUNGEON_REQ'):
        return 'GM_CHG_PLAYER_UNLOCK_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_UNLOCK_DUNGEON_RES'):
        return 'GM_CHG_PLAYER_UNLOCK_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_MONTH_CARD_REQ'):
        return 'GM_GET_PLAYER_MONTH_CARD_REQ'
    
    if hash == StringHash.calculate_hash('GM_GET_PLAYER_MONTH_CARD_RES'):
        return 'GM_GET_PLAYER_MONTH_CARD_RES'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_MONTH_CARD_REQ'):
        return 'GM_CHG_PLAYER_MONTH_CARD_REQ'
    
    if hash == StringHash.calculate_hash('GM_CHG_PLAYER_MONTH_CARD_RES'):
        return 'GM_CHG_PLAYER_MONTH_CARD_RES'
    
    if hash == StringHash.calculate_hash('GUARD_MSG_GAME_SVR'):
        return 'GUARD_MSG_GAME_SVR'
    
    if hash == StringHash.calculate_hash('GUARD_COPY_GM_TEXT_REQ'):
        return 'GUARD_COPY_GM_TEXT_REQ'
    
    if hash == StringHash.calculate_hash('GUARD_COPY_GM_TEXT_RES'):
        return 'GUARD_COPY_GM_TEXT_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_HERO_GROWUP'):
        return 'CSPKG_CMD_HERO_GROWUP'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_HERO_GROWUP'):
        return 'SCPKG_CMD_HERO_GROWUP'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_HERO_GROWUP_END'):
        return 'SCPKG_CMD_HERO_GROWUP_END'
    
    if hash == StringHash.calculate_hash('SCDT_HERO_ATT_EFFECTED'):
        return 'SCDT_HERO_ATT_EFFECTED'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_EMBLEM_LEVELUP'):
        return 'SCPKG_CMD_EMBLEM_LEVELUP'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_EMBLEM_UNLOCK'):
        return 'SCPKG_CMD_EMBLEM_UNLOCK'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_UNLOCK_HERO'):
        return 'CSPKG_CMD_UNLOCK_HERO'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_LEVELUP_DIRECTLY'):
        return 'CSPKG_CMD_LEVELUP_DIRECTLY'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SPBORN_BEGIN'):
        return 'SCPKG_CMD_SPBORN_BEGIN'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SPBORN_END'):
        return 'SCPKG_CMD_SPBORN_END'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_SKILL_LEVELUP'):
        return 'CSPKG_CMD_SKILL_LEVELUP'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SKILL_LEVELUP'):
        return 'SCPKG_CMD_SKILL_LEVELUP'
    
    if hash == StringHash.calculate_hash('NOTIFY_HERO_NEW_ROLE_BUFF'):
        return 'NOTIFY_HERO_NEW_ROLE_BUFF'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_EMBLEM_LEVELUP'):
        return 'CSPKG_CMD_EMBLEM_LEVELUP'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_ACTIVE_TALENT_REQ'):
        return 'CSPKG_CMD_ACTIVE_TALENT_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ACTIVE_TALENT_RES'):
        return 'SCPKG_CMD_ACTIVE_TALENT_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_ACTIVE_TALENT_HIDE_REQ'):
        return 'CSPKG_CMD_ACTIVE_TALENT_HIDE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ACTIVE_TALENT_HIDE_RES'):
        return 'SCPKG_CMD_ACTIVE_TALENT_HIDE_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_TOTALABILITY_LEVEL'):
        return 'SCPKG_NTF_TOTALABILITY_LEVEL'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_PLAYER_LEVELUP'):
        return 'CSPKG_CMD_PLAYER_LEVELUP'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_LEVELUP'):
        return 'SCPKG_CMD_PLAYER_LEVELUP'
    
    if hash == StringHash.calculate_hash('SCDT_ATT_INFO'):
        return 'SCDT_ATT_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_LEVELUPEDN'):
        return 'SCPKG_CMD_PLAYER_LEVELUPEDN'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_BEHAVIOUR'):
        return 'CSDT_PLAYER_BEHAVIOUR'
    
    if hash == StringHash.calculate_hash('CSDT_MISC_DATA'):
        return 'CSDT_MISC_DATA'
    
    if hash == StringHash.calculate_hash('SCDT_PASSIVEHERO_INFO'):
        return 'SCDT_PASSIVEHERO_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_HERO_ATTINFO'):
        return 'SCDT_HERO_ATTINFO'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_UNLOCK_HERO'):
        return 'SCPKG_CMD_UNLOCK_HERO'
    
    if hash == StringHash.calculate_hash('CSDT_SKILL_INFO_DATA'):
        return 'CSDT_SKILL_INFO_DATA'
    
    if hash == StringHash.calculate_hash('CSDT_HERO_INFO_DATA'):
        return 'CSDT_HERO_INFO_DATA'
    
    if hash == StringHash.calculate_hash('CSDT_HERO_INFO'):
        return 'CSDT_HERO_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_ROLE_ONLINE'):
        return 'CSDT_ROLE_ONLINE'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_ONLINE'):
        return 'SCPKG_CMD_ROLELOGIN_ONLINE'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_BUILDING'):
        return 'SCPKG_CMD_ROLELOGIN_BUILDING'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_HERO'):
        return 'SCPKG_CMD_ROLELOGIN_HERO'
    
    if hash == StringHash.calculate_hash('CSDT_SELFDUN_HERO_INFO'):
        return 'CSDT_SELFDUN_HERO_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_SELF_DUN_DATA'):
        return 'CSDT_SELF_DUN_DATA'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLE_DUNGEON_INFO'):
        return 'SCPKG_CMD_ROLE_DUNGEON_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_GANGBATTLE_HERO'):
        return 'SCPKG_CMD_ROLELOGIN_GANGBATTLE_HERO'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_RANK_BATTLE_INFO'):
        return 'SCPKG_CMD_ROLELOGIN_RANK_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_MISC'):
        return 'SCPKG_CMD_ROLELOGIN_MISC'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_FINISH'):
        return 'SCPKG_CMD_ROLELOGIN_FINISH'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_ROLELOGIN_ACCEPT'):
        return 'SCPKG_CMD_ROLELOGIN_ACCEPT'
    
    if hash == StringHash.calculate_hash('CSDT_MAIL_SYSTEM_ACC'):
        return 'CSDT_MAIL_SYSTEM_ACC'
    
    if hash == StringHash.calculate_hash('CSDT_MAIL_SYSTEM_ACC_INFO'):
        return 'CSDT_MAIL_SYSTEM_ACC_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_MAIL_REVENGE_ACC_INFO'):
        return 'CSDT_MAIL_REVENGE_ACC_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_MAIL_ACC_INFO'):
        return 'CSDT_MAIL_ACC_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_MAIL_INFO'):
        return 'CSDT_MAIL_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_BRIEF_MAIL_INFO'):
        return 'CSDT_BRIEF_MAIL_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_ROLELOGIN_GET_MAIL_RES'):
        return 'SCPKG_ROLELOGIN_GET_MAIL_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_SEND_MAIL_RES'):
        return 'SCPKG_SEND_MAIL_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_MAIL_LIST_REQ'):
        return 'CSPKG_GET_MAIL_LIST_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_MAIL_LIST_RES'):
        return 'SCPKG_GET_MAIL_LIST_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_MAIL_DETAIL_REQ'):
        return 'CSPKG_GET_MAIL_DETAIL_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_MAIL_DETAIL_RES'):
        return 'SCPKG_GET_MAIL_DETAIL_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_MAIL_READ_REQ'):
        return 'CSPKG_MAIL_READ_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_MAIL_READ_RES'):
        return 'SCPKG_MAIL_READ_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_MAIL_DELETE_REQ'):
        return 'CSPKG_MAIL_DELETE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_MAIL_DELETE_RES'):
        return 'SCPKG_MAIL_DELETE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_MAIL_GET_ACC_REQ'):
        return 'CSPKG_MAIL_GET_ACC_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_MAIL_GET_ACC_RES'):
        return 'SCPKG_MAIL_GET_ACC_RES'
    
    if hash == StringHash.calculate_hash('CSDT_OVERTIME_MAIL_ID'):
        return 'CSDT_OVERTIME_MAIL_ID'
    
    if hash == StringHash.calculate_hash('SCPKG_OVERTIME_MAIL_CLR_RES'):
        return 'SCPKG_OVERTIME_MAIL_CLR_RES'
    
    if hash == StringHash.calculate_hash('CS_UINON_MAIL_ACC_INFO'):
        return 'CS_UINON_MAIL_ACC_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_MONSTER_STAT_DATA'):
        return 'CSDT_MONSTER_STAT_DATA'
    
    if hash == StringHash.calculate_hash('CSDT_MONSTER_JOB_INFO'):
        return 'CSDT_MONSTER_JOB_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_MONSTER_INFO_DATA'):
        return 'CSDT_MONSTER_INFO_DATA'
    
    if hash == StringHash.calculate_hash('CSDT_MONSTER_INFO'):
        return 'CSDT_MONSTER_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_MONSTER_ATTINFO'):
        return 'SCDT_MONSTER_ATTINFO'
    
    if hash == StringHash.calculate_hash('SCDT_ROOMMONSTER_INFO'):
        return 'SCDT_ROOMMONSTER_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_ROOM_INFO'):
        return 'SCDT_ROOM_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_UNLOCK_MONSTER_ATTINFO'):
        return 'SCDT_UNLOCK_MONSTER_ATTINFO'
    
    if hash == StringHash.calculate_hash('CSPKG_ONLINE_BATTLE_MATCH_MSG'):
        return 'CSPKG_ONLINE_BATTLE_MATCH_MSG'
    
    if hash == StringHash.calculate_hash('CSPKG_MULTIPLAYER_PVE_DUN_MSG'):
        return 'CSPKG_MULTIPLAYER_PVE_DUN_MSG'
    
    if hash == StringHash.calculate_hash('CSPKG_MULTIPLAYER_PVE_DUN_ROOM_OP_REQ'):
        return 'CSPKG_MULTIPLAYER_PVE_DUN_ROOM_OP_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_MULTIPLAYER_PVE_DUN_ROOM_OP_RES'):
        return 'SCPKG_MULTIPLAYER_PVE_DUN_ROOM_OP_RES'
    
    if hash == StringHash.calculate_hash('CSDT_MULTIPLAYER_PVE_DUN_PLAYER_INFO'):
        return 'CSDT_MULTIPLAYER_PVE_DUN_PLAYER_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_MULTIPLAYER_PVE_DUN_ROLE_INFO'):
        return 'CSDT_MULTIPLAYER_PVE_DUN_ROLE_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_MULTIPLAYER_PVE_DUNBALANCE'):
        return 'SCPKG_MULTIPLAYER_PVE_DUNBALANCE'
    
    if hash == StringHash.calculate_hash('SCPKG_MULTIPLAYER_PVE_CHALLENGE_DATA'):
        return 'SCPKG_MULTIPLAYER_PVE_CHALLENGE_DATA'
    
    if hash == StringHash.calculate_hash('CSPKG_SET_OFFLINE_BATTLE_TITLE_ID_REQ'):
        return 'CSPKG_SET_OFFLINE_BATTLE_TITLE_ID_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_SET_OFFLINE_BATTLE_TITLE_ID_RES'):
        return 'SCPKG_SET_OFFLINE_BATTLE_TITLE_ID_RES'
    
    if hash == StringHash.calculate_hash('CSDT_OFFLINE_BATTLE_INFO'):
        return 'CSDT_OFFLINE_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_OFFLINE_BATTLE_INFO'):
        return 'SCPKG_OFFLINE_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_OFFLINE_BATTLE_DEFEATED_LIST_REQ'):
        return 'CSPKG_OFFLINE_BATTLE_DEFEATED_LIST_REQ'
    
    if hash == StringHash.calculate_hash('CSDT_OFFLINE_BATTLE_DEFEATED_LIST_ITEM'):
        return 'CSDT_OFFLINE_BATTLE_DEFEATED_LIST_ITEM'
    
    if hash == StringHash.calculate_hash('SCPKG_OFFLINE_BATTLE_DEFEATED_LIST_RES'):
        return 'SCPKG_OFFLINE_BATTLE_DEFEATED_LIST_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_OFFLINE_BATTLE_RESULT'):
        return 'CSPKG_OFFLINE_BATTLE_RESULT'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_CONF_INFO'):
        return 'CCPKG_CMD_CONF_INFO'
    
    if hash == StringHash.calculate_hash('CCDT_CMD_ACTION_PARAM'):
        return 'CCDT_CMD_ACTION_PARAM'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_SETACTION'):
        return 'CCPKG_CMD_SETACTION'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_INPUTMSG'):
        return 'CCPKG_CMD_INPUTMSG'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_ADDROLE'):
        return 'CCPKG_CMD_ADDROLE'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_CHOOSE_ROLE_INFO'):
        return 'CCPKG_CMD_CHOOSE_ROLE_INFO'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_LOADING_PHASE'):
        return 'CCPKG_CMD_LOADING_PHASE'
    
    if hash == StringHash.calculate_hash('CCDT_CMD_ROLE_INFO'):
        return 'CCDT_CMD_ROLE_INFO'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_ROUND_INFO'):
        return 'CCPKG_CMD_ROUND_INFO'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_ENTER_DUN'):
        return 'CCPKG_CMD_ENTER_DUN'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_SET_ROLE_ATTRIBUTE'):
        return 'CCPKG_CMD_SET_ROLE_ATTRIBUTE'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_ROLE_DEAD'):
        return 'CCPKG_CMD_ROLE_DEAD'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_STAGE_FINISH'):
        return 'CCPKG_CMD_STAGE_FINISH'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_COLLISION'):
        return 'CCPKG_CMD_COLLISION'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_READY'):
        return 'CCPKG_CMD_READY'
    
    if hash == StringHash.calculate_hash('CCPKG_CMD_READY_COUNT_DOWN'):
        return 'CCPKG_CMD_READY_COUNT_DOWN'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_ENTER_ONLINE_BATTLE_DUN'):
        return 'SCPKG_CMD_PLAYER_ENTER_ONLINE_BATTLE_DUN'
    
    if hash == StringHash.calculate_hash('CSDT_ONLINE_BATTLE_ROOM_ROLE_INFO'):
        return 'CSDT_ONLINE_BATTLE_ROOM_ROLE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO'):
        return 'CSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_ONLINE_BATTLE_ROOM_INFO'):
        return 'CSDT_ONLINE_BATTLE_ROOM_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME'):
        return 'SCDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME'
    
    if hash == StringHash.calculate_hash('CSPKG_ONLINE_BATTLE_ROOM_OP_REQ'):
        return 'CSPKG_ONLINE_BATTLE_ROOM_OP_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_ONLINE_BATTLE_ROOM_OP_RES'):
        return 'SCPKG_ONLINE_BATTLE_ROOM_OP_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_ONLINE_BATTLE_SHOP_BOX_BUY_REQ'):
        return 'CSPKG_ONLINE_BATTLE_SHOP_BOX_BUY_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_ONLINE_BATTLE_SHOP_BOX_BUY_RES'):
        return 'SCPKG_ONLINE_BATTLE_SHOP_BOX_BUY_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_ONLINE_BATTLE_ROUND_FINISH'):
        return 'CSPKG_ONLINE_BATTLE_ROUND_FINISH'
    
    if hash == StringHash.calculate_hash('CSPKG_SET_NAME'):
        return 'CSPKG_SET_NAME'
    
    if hash == StringHash.calculate_hash('CSDT_RECOMMAND_NAME'):
        return 'CSDT_RECOMMAND_NAME'
    
    if hash == StringHash.calculate_hash('SCPKG_SET_NAME'):
        return 'SCPKG_SET_NAME'
    
    if hash == StringHash.calculate_hash('CSPKG_CHANGE_HEADPHOTO'):
        return 'CSPKG_CHANGE_HEADPHOTO'
    
    if hash == StringHash.calculate_hash('SCPKG_CHANGE_HEADPHOTO'):
        return 'SCPKG_CHANGE_HEADPHOTO'
    
    if hash == StringHash.calculate_hash('CSPKG_RANDOM_NAME_REQ'):
        return 'CSPKG_RANDOM_NAME_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_RANDOM_NAME_RES'):
        return 'SCPKG_RANDOM_NAME_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_REFRESH_DATA_ATTR'):
        return 'SCPKG_REFRESH_DATA_ATTR'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_POWER_RECOVER'):
        return 'SCPKG_CMD_POWER_RECOVER'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_RESEXCHANGE_REQ'):
        return 'CSPKG_CMD_RESEXCHANGE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_RESEXCHANGE_RES'):
        return 'SCPKG_CMD_RESEXCHANGE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_BUY_POWER'):
        return 'CSPKG_CMD_BUY_POWER'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_BUY_POWER'):
        return 'SCPKG_CMD_BUY_POWER'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_BUY_SKILL_POINT'):
        return 'CSPKG_CMD_BUY_SKILL_POINT'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_BUY_SKILL_POINT'):
        return 'SCPKG_CMD_BUY_SKILL_POINT'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_RES_REFRESH'):
        return 'SCPKG_CMD_RES_REFRESH'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_POWER_REFRESH'):
        return 'SCPKG_CMD_POWER_REFRESH'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SKILL_POINT_REFRESH'):
        return 'SCPKG_CMD_SKILL_POINT_REFRESH'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_POWER_RECOVERBEG'):
        return 'SCPKG_CMD_POWER_RECOVERBEG'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_POWER_RECOVEREND'):
        return 'SCPKG_CMD_POWER_RECOVEREND'
    
    if hash == StringHash.calculate_hash('CSPKG_PRIZE_DRAW_REQ'):
        return 'CSPKG_PRIZE_DRAW_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_PRIZE_DRAW_RES'):
        return 'SCPKG_PRIZE_DRAW_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_PRIZE_DRAW_FREE_INFO_RES'):
        return 'SCPKG_PRIZE_DRAW_FREE_INFO_RES'
    
    if hash == StringHash.calculate_hash('SCDT_CUMULATE_COST_INFO'):
        return 'SCDT_CUMULATE_COST_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_SECT_RECHARGE_INFO'):
        return 'SCDT_SECT_RECHARGE_INFO'
    
    if hash == StringHash.calculate_hash('SCDT_DAILY_RECHARGE_CNT'):
        return 'SCDT_DAILY_RECHARGE_CNT'
    
    if hash == StringHash.calculate_hash('SCDT_DAILY_RECHARGE_INFO'):
        return 'SCDT_DAILY_RECHARGE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_DROP_OBJINFO'):
        return 'CSDT_DROP_OBJINFO'
    
    if hash == StringHash.calculate_hash('CSDT_DROP_INFO'):
        return 'CSDT_DROP_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_ONLINE_BATTLE_INFO'):
        return 'CSDT_ONLINE_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_EMBLEMINFO_DATA'):
        return 'CSDT_EMBLEMINFO_DATA'
    
    if hash == StringHash.calculate_hash('CSDT_GANGBATTLE_HERO_INFO'):
        return 'CSDT_GANGBATTLE_HERO_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_REFRESH_REQ'):
        return 'CSPKG_BUY_REFRESH_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_REFRESH_RES'):
        return 'SCPKG_BUY_REFRESH_RES'
    
    if hash == StringHash.calculate_hash('SCDT_ACTIVITY_PRIZE_DRAW_INFO'):
        return 'SCDT_ACTIVITY_PRIZE_DRAW_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_PVP_DUN_DATA'):
        return 'CSDT_PVP_DUN_DATA'
    
    if hash == StringHash.calculate_hash('CSDT_PVP_ISLAND_DEFENSE_INFO'):
        return 'CSDT_PVP_ISLAND_DEFENSE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_PVP_ISLAND_INFO'):
        return 'CSDT_PVP_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_PVP_SEARCH_ISLAND_DEFENSE_INFO'):
        return 'CSDT_PVP_SEARCH_ISLAND_DEFENSE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_PVP_SELF_HERO'):
        return 'CSDT_PVP_SELF_HERO'
    
    if hash == StringHash.calculate_hash('CSDT_PVP_SELF_HERO_INFO'):
        return 'CSDT_PVP_SELF_HERO_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_PVP_SEARCH_STEAL_ISLAND_INFO'):
        return 'CSDT_PVP_SEARCH_STEAL_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_SEARCH_PVP_PLAYER_REQ'):
        return 'CSPKG_SEARCH_PVP_PLAYER_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_SEARCH_PVP_PLAYER_RES'):
        return 'SCPKG_SEARCH_PVP_PLAYER_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_STEAL_TARGET_STATE_REQ'):
        return 'CSPKG_GET_STEAL_TARGET_STATE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_STEAL_TARGET_STATE_RES'):
        return 'SCPKG_GET_STEAL_TARGET_STATE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_WIPE_OUT_STEAL_BATTLE_REQ'):
        return 'CSPKG_WIPE_OUT_STEAL_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('ST_WIPE_OUT_STEAL_BATTLE_INFO'):
        return 'ST_WIPE_OUT_STEAL_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_WIPE_OUT_STEAL_BATTLE_RES'):
        return 'SCPKG_WIPE_OUT_STEAL_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_ENTER_STEAL_BATTLE_REQ'):
        return 'CSPKG_ENTER_STEAL_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_STEAL_BATTLE_TIMES_RES'):
        return 'SCPKG_STEAL_BATTLE_TIMES_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_ENTER_STEAL_BATTLE_RES'):
        return 'SCPKG_ENTER_STEAL_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_STEAL_BATTLE_ROUND_BEGIN_REQ'):
        return 'CSPKG_STEAL_BATTLE_ROUND_BEGIN_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_STEAL_BATTLE_ROUND_BEGIN_RES'):
        return 'SCPKG_STEAL_BATTLE_ROUND_BEGIN_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_BALANCE_STEAL_BATTLE_REQ'):
        return 'CSPKG_BALANCE_STEAL_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_BALANCE_STEAL_BATTLE_RES'):
        return 'SCPKG_BALANCE_STEAL_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_STEAL_BATTLE_PRIZE_DRAW_GET_REQ'):
        return 'CSPKG_STEAL_BATTLE_PRIZE_DRAW_GET_REQ'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_GET_DAILYTASK_REWARD'):
        return 'CSPKG_CMD_GET_DAILYTASK_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_GET_DAILYTASK_REWARD'):
        return 'SCPKG_CMD_GET_DAILYTASK_REWARD'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_PRACTICEDUN_QUEST'):
        return 'CSDT_PLAYER_PRACTICEDUN_QUEST'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_ACHIEVEMENT'):
        return 'CSDT_PLAYER_ACHIEVEMENT'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_DAILYTASK_ITEM'):
        return 'CSDT_PLAYER_DAILYTASK_ITEM'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_DAILYTASK_SYNC'):
        return 'SCPKG_CMD_DAILYTASK_SYNC'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_MAIN_TASK_ITEM'):
        return 'CSDT_PLAYER_MAIN_TASK_ITEM'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_MAIN_TASK'):
        return 'CSDT_PLAYER_MAIN_TASK'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_MAIN_TASK_REWARD_REQ'):
        return 'CSDT_PLAYER_MAIN_TASK_REWARD_REQ'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_MAIN_TASK_REWARD_RES'):
        return 'CSDT_PLAYER_MAIN_TASK_REWARD_RES'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_QUEST_INFO'):
        return 'CSDT_PLAYER_QUEST_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_NEWBIE_ACTIVITY_ITEM'):
        return 'SCPKG_NEWBIE_ACTIVITY_ITEM'
    
    if hash == StringHash.calculate_hash('SCPKG_NEWBIE_ACTIVITY_STATUS'):
        return 'SCPKG_NEWBIE_ACTIVITY_STATUS'
    
    if hash == StringHash.calculate_hash('CSPKG_NEWBIE_ACTIVITY_CLAIM_REQ'):
        return 'CSPKG_NEWBIE_ACTIVITY_CLAIM_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_NEWBIE_ACTIVITY_CLAIM_RES'):
        return 'SCPKG_NEWBIE_ACTIVITY_CLAIM_RES'
    
    if hash == StringHash.calculate_hash('CSDT_RANK_VAL'):
        return 'CSDT_RANK_VAL'
    
    if hash == StringHash.calculate_hash('CSDT_RANK_BATTLE_HERO_BRIEF'):
        return 'CSDT_RANK_BATTLE_HERO_BRIEF'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_BASE_INFO'):
        return 'CSDT_PLAYER_BASE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_GANG_BASE_INFO'):
        return 'CSDT_GANG_BASE_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_RANK_DATA'):
        return 'CSDT_RANK_DATA'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_RANKLIST_REQ'):
        return 'CSPKG_GET_RANKLIST_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_RANKLIST_RES'):
        return 'SCPKG_GET_RANKLIST_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_RANKPOS_REQ'):
        return 'CSPKG_GET_RANKPOS_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_RANKPOS_RES'):
        return 'SCPKG_GET_RANKPOS_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_HISTORY_RANK_POS_INFO'):
        return 'SCPKG_HISTORY_RANK_POS_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_RANK_BASEINFO'):
        return 'CSDT_RANK_BASEINFO'
    
    if hash == StringHash.calculate_hash('CSDT_RANKPOS_SEARCH_KEY'):
        return 'CSDT_RANKPOS_SEARCH_KEY'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_REWARD_ITEM'):
        return 'SSPKG_RANK_REWARD_ITEM'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_REWARD_DISPATCH'):
        return 'SSPKG_RANK_REWARD_DISPATCH'
    
    if hash == StringHash.calculate_hash('RANK_RESET_INFO_ITEM'):
        return 'RANK_RESET_INFO_ITEM'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_RESET_INFO'):
        return 'SSPKG_RANK_RESET_INFO'
    
    if hash == StringHash.calculate_hash('CSDT_PLAYER_RANK_BATTLE_INFO'):
        return 'CSDT_PLAYER_RANK_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_SET_RANK_BATTLE_ORDER'):
        return 'CSPKG_CMD_SET_RANK_BATTLE_ORDER'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_SET_RANK_BATTLE_ORDER'):
        return 'SCPKG_CMD_SET_RANK_BATTLE_ORDER'
    
    if hash == StringHash.calculate_hash('CSDT_RANK_BATTLE_LEFT_COUNT'):
        return 'CSDT_RANK_BATTLE_LEFT_COUNT'
    
    if hash == StringHash.calculate_hash('CS_RANK_BATTLE_DEFENSE_DATA'):
        return 'CS_RANK_BATTLE_DEFENSE_DATA'
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_POS_UPDATE'):
        return 'CSPKG_RANK_BATTLE_POS_UPDATE'
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_POS_UPDATE'):
        return 'SCPKG_RANK_BATTLE_POS_UPDATE'
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ'):
        return 'CSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ'
    
    if hash == StringHash.calculate_hash('CSDT_RANK_BATTLE_FIGHT_TARGET_INFO'):
        return 'CSDT_RANK_BATTLE_FIGHT_TARGET_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES'):
        return 'SCPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ'):
        return 'CSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_ENTER_DUNGEON_RES'):
        return 'SCPKG_RANK_BATTLE_ENTER_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_ROUND_BEGIN_REQ'):
        return 'CSPKG_RANK_BATTLE_ROUND_BEGIN_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_ROUND_BEGIN_RES'):
        return 'SCPKG_RANK_BATTLE_ROUND_BEGIN_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_BALANCE_ONEROUND_REQ'):
        return 'CSPKG_RANK_BATTLE_BALANCE_ONEROUND_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_BALANCE_ONEROUND_RES'):
        return 'SCPKG_RANK_BATTLE_BALANCE_ONEROUND_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_BALANCE_RES'):
        return 'SCPKG_RANK_BATTLE_BALANCE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_RANK_BATTLE_BUY_COUNT_REQ'):
        return 'CSPKG_RANK_BATTLE_BUY_COUNT_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_RANK_BATTLE_REFRESH_COUNT_RES'):
        return 'SCPKG_RANK_BATTLE_REFRESH_COUNT_RES'
    
    if hash == StringHash.calculate_hash('ResServerLocalization'):
        return 'ResServerLocalization'
    
    if hash == StringHash.calculate_hash('ResDropIndexEx'):
        return 'ResDropIndexEx'
    
    if hash == StringHash.calculate_hash('ResResourceInfo'):
        return 'ResResourceInfo'
    
    if hash == StringHash.calculate_hash('ResPreRole'):
        return 'ResPreRole'
    
    if hash == StringHash.calculate_hash('ResInitSkill'):
        return 'ResInitSkill'
    
    if hash == StringHash.calculate_hash('ResNewRoleBuf'):
        return 'ResNewRoleBuf'
    
    if hash == StringHash.calculate_hash('ResCost'):
        return 'ResCost'
    
    if hash == StringHash.calculate_hash('ResHeadPhoto'):
        return 'ResHeadPhoto'
    
    if hash == StringHash.calculate_hash('ResRoleGL'):
        return 'ResRoleGL'
    
    if hash == StringHash.calculate_hash('ResChat'):
        return 'ResChat'
    
    if hash == StringHash.calculate_hash('ResRoleRelationAddition'):
        return 'ResRoleRelationAddition'
    
    if hash == StringHash.calculate_hash('ResRoleRelationSubtraction'):
        return 'ResRoleRelationSubtraction'
    
    if hash == StringHash.calculate_hash('ResChipNumInfo'):
        return 'ResChipNumInfo'
    
    if hash == StringHash.calculate_hash('ResEmblemSingleRequest'):
        return 'ResEmblemSingleRequest'
    
    if hash == StringHash.calculate_hash('ResEmblem'):
        return 'ResEmblem'
    
    if hash == StringHash.calculate_hash('ResStringArrayInfo'):
        return 'ResStringArrayInfo'
    
    if hash == StringHash.calculate_hash('ResMonsterGL'):
        return 'ResMonsterGL'
    
    if hash == StringHash.calculate_hash('ResPreMonster'):
        return 'ResPreMonster'
    
    if hash == StringHash.calculate_hash('ResGroupMonster'):
        return 'ResGroupMonster'
    
    if hash == StringHash.calculate_hash('ResMonsterLevel'):
        return 'ResMonsterLevel'
    
    if hash == StringHash.calculate_hash('ResMonsterGroupLevel'):
        return 'ResMonsterGroupLevel'
    
    if hash == StringHash.calculate_hash('ResGainSkill'):
        return 'ResGainSkill'
    
    if hash == StringHash.calculate_hash('ResRoleLevelGrowUpAttr'):
        return 'ResRoleLevelGrowUpAttr'
    
    if hash == StringHash.calculate_hash('ResRoleLevel'):
        return 'ResRoleLevel'
    
    if hash == StringHash.calculate_hash('ResBuildingGL'):
        return 'ResBuildingGL'
    
    if hash == StringHash.calculate_hash('ResLevelCost'):
        return 'ResLevelCost'
    
    if hash == StringHash.calculate_hash('ResUnlockBuilding'):
        return 'ResUnlockBuilding'
    
    if hash == StringHash.calculate_hash('ResBuildingLevel'):
        return 'ResBuildingLevel'
    
    if hash == StringHash.calculate_hash('ResHeroTowerLevel'):
        return 'ResHeroTowerLevel'
    
    if hash == StringHash.calculate_hash('ResIslandProduct'):
        return 'ResIslandProduct'
    
    if hash == StringHash.calculate_hash('ResIslandLevel'):
        return 'ResIslandLevel'
    
    if hash == StringHash.calculate_hash('ResResourceStoreLevel'):
        return 'ResResourceStoreLevel'
    
    if hash == StringHash.calculate_hash('ResLevelArr'):
        return 'ResLevelArr'
    
    if hash == StringHash.calculate_hash('ResInitHero'):
        return 'ResInitHero'
    
    if hash == StringHash.calculate_hash('ResInitSlot'):
        return 'ResInitSlot'
    
    if hash == StringHash.calculate_hash('ResOverHitProduction'):
        return 'ResOverHitProduction'
    
    if hash == StringHash.calculate_hash('ResInitMonster'):
        return 'ResInitMonster'
    
    if hash == StringHash.calculate_hash('ResInitUnlockDun'):
        return 'ResInitUnlockDun'
    
    if hash == StringHash.calculate_hash('ResUnlockTrainSlot'):
        return 'ResUnlockTrainSlot'
    
    if hash == StringHash.calculate_hash('ResInitBuildingInfo'):
        return 'ResInitBuildingInfo'
    
    if hash == StringHash.calculate_hash('ResBuyWipeoutItemInfo'):
        return 'ResBuyWipeoutItemInfo'
    
    if hash == StringHash.calculate_hash('ResPveUnlockInfo'):
        return 'ResPveUnlockInfo'
    
    if hash == StringHash.calculate_hash('ResEndlessMonsterScore'):
        return 'ResEndlessMonsterScore'
    
    if hash == StringHash.calculate_hash('ResGamePlayModeDamageRate'):
        return 'ResGamePlayModeDamageRate'
    
    if hash == StringHash.calculate_hash('ResMiscInfo'):
        return 'ResMiscInfo'
    
    if hash == StringHash.calculate_hash('ResGamePlayInfo'):
        return 'ResGamePlayInfo'
    
    if hash == StringHash.calculate_hash('ResWorldBossStrength'):
        return 'ResWorldBossStrength'
    
    if hash == StringHash.calculate_hash('ResWorldBossHeroTask'):
        return 'ResWorldBossHeroTask'
    
    if hash == StringHash.calculate_hash('ResWorldBossRefreshInfo'):
        return 'ResWorldBossRefreshInfo'
    
    if hash == StringHash.calculate_hash('ResWorldBossDamageReward'):
        return 'ResWorldBossDamageReward'
    
    if hash == StringHash.calculate_hash('ResWorldBossNormalReward'):
        return 'ResWorldBossNormalReward'
    
    if hash == StringHash.calculate_hash('ResMultiplayerPVEHeroBuff'):
        return 'ResMultiplayerPVEHeroBuff'
    
    if hash == StringHash.calculate_hash('ResMultiplayerPVEConfig'):
        return 'ResMultiplayerPVEConfig'
    
    if hash == StringHash.calculate_hash('ResMultiplayerPVEDungeonConfig'):
        return 'ResMultiplayerPVEDungeonConfig'
    
    if hash == StringHash.calculate_hash('ResNewbieActivity'):
        return 'ResNewbieActivity'
    
    if hash == StringHash.calculate_hash('ResGamePlayModeActivity'):
        return 'ResGamePlayModeActivity'
    
    if hash == StringHash.calculate_hash('ResRankReward'):
        return 'ResRankReward'
    
    if hash == StringHash.calculate_hash('ResHeroEvaluate'):
        return 'ResHeroEvaluate'
    
    if hash == StringHash.calculate_hash('ResGangMiscInfo'):
        return 'ResGangMiscInfo'
    
    if hash == StringHash.calculate_hash('ResGangBless'):
        return 'ResGangBless'
    
    if hash == StringHash.calculate_hash('ResGangLevelInfo'):
        return 'ResGangLevelInfo'
    
    if hash == StringHash.calculate_hash('ResGangBattleTime'):
        return 'ResGangBattleTime'
    
    if hash == StringHash.calculate_hash('ResGangBattleReward'):
        return 'ResGangBattleReward'
    
    if hash == StringHash.calculate_hash('ResRobotBuild'):
        return 'ResRobotBuild'
    
    if hash == StringHash.calculate_hash('ResPvpRobot'):
        return 'ResPvpRobot'
    
    if hash == StringHash.calculate_hash('ResPvpMisc'):
        return 'ResPvpMisc'
    
    if hash == StringHash.calculate_hash('ResPvpSearchSect'):
        return 'ResPvpSearchSect'
    
    if hash == StringHash.calculate_hash('ResStealBattlePrizeDraw'):
        return 'ResStealBattlePrizeDraw'
    
    if hash == StringHash.calculate_hash('ResDunLimit'):
        return 'ResDunLimit'
    
    if hash == StringHash.calculate_hash('ResDunEvaluate'):
        return 'ResDunEvaluate'
    
    if hash == StringHash.calculate_hash('ResReliveCost'):
        return 'ResReliveCost'
    
    if hash == StringHash.calculate_hash('ResPosInfo'):
        return 'ResPosInfo'
    
    if hash == StringHash.calculate_hash('ResDropIndex'):
        return 'ResDropIndex'
    
    if hash == StringHash.calculate_hash('ResDungeonNeedItem'):
        return 'ResDungeonNeedItem'
    
    if hash == StringHash.calculate_hash('ResEvaluate'):
        return 'ResEvaluate'
    
    if hash == StringHash.calculate_hash('ResDungeonInfo'):
        return 'ResDungeonInfo'
    
    if hash == StringHash.calculate_hash('ResDungeonData'):
        return 'ResDungeonData'
    
    if hash == StringHash.calculate_hash('ResDungeonFightCapacityFix'):
        return 'ResDungeonFightCapacityFix'
    
    if hash == StringHash.calculate_hash('ResDungeonReward'):
        return 'ResDungeonReward'
    
    if hash == StringHash.calculate_hash('ResDungeonCity'):
        return 'ResDungeonCity'
    
    if hash == StringHash.calculate_hash('ResPracticeLimit'):
        return 'ResPracticeLimit'
    
    if hash == StringHash.calculate_hash('ResPracticeTarget'):
        return 'ResPracticeTarget'
    
    if hash == StringHash.calculate_hash('ResPracticeDun'):
        return 'ResPracticeDun'
    
    if hash == StringHash.calculate_hash('ResTargetInfo'):
        return 'ResTargetInfo'
    
    if hash == StringHash.calculate_hash('ResAchievement'):
        return 'ResAchievement'
    
    if hash == StringHash.calculate_hash('ResAchievementGameCenter'):
        return 'ResAchievementGameCenter'
    
    if hash == StringHash.calculate_hash('ResSpecialActivity'):
        return 'ResSpecialActivity'
    
    if hash == StringHash.calculate_hash('ResDailyTask'):
        return 'ResDailyTask'
    
    if hash == StringHash.calculate_hash('ResMainTask'):
        return 'ResMainTask'
    
    if hash == StringHash.calculate_hash('ResLoadingPicParam'):
        return 'ResLoadingPicParam'
    
    if hash == StringHash.calculate_hash('ResLoadingPic'):
        return 'ResLoadingPic'
    
    if hash == StringHash.calculate_hash('ResColorMatchingParam'):
        return 'ResColorMatchingParam'
    
    if hash == StringHash.calculate_hash('ResColorMatching'):
        return 'ResColorMatching'
    
    if hash == StringHash.calculate_hash('ResOnlineBattleTitle'):
        return 'ResOnlineBattleTitle'
    
    if hash == StringHash.calculate_hash('ResOfflineBattleTitle'):
        return 'ResOfflineBattleTitle'
    
    if hash == StringHash.calculate_hash('ResSceneInfo'):
        return 'ResSceneInfo'
    
    if hash == StringHash.calculate_hash('ResDungeonMonster'):
        return 'ResDungeonMonster'
    
    if hash == StringHash.calculate_hash('ResDunMonSpec'):
        return 'ResDunMonSpec'
    
    if hash == StringHash.calculate_hash('ResDungeonRoom'):
        return 'ResDungeonRoom'
    
    if hash == StringHash.calculate_hash('ResConLoginReward'):
        return 'ResConLoginReward'
    
    if hash == StringHash.calculate_hash('ResHeroDropInfo'):
        return 'ResHeroDropInfo'
    
    if hash == StringHash.calculate_hash('ResScoreToResource'):
        return 'ResScoreToResource'
    
    if hash == StringHash.calculate_hash('ResTimeToMoney'):
        return 'ResTimeToMoney'
    
    if hash == StringHash.calculate_hash('ResSkillData'):
        return 'ResSkillData'
    
    if hash == StringHash.calculate_hash('ResSkillTree'):
        return 'ResSkillTree'
    
    if hash == StringHash.calculate_hash('ResRankValInfo'):
        return 'ResRankValInfo'
    
    if hash == StringHash.calculate_hash('ResRankInfo'):
        return 'ResRankInfo'
    
    if hash == StringHash.calculate_hash('ResRankBattleSectInfo'):
        return 'ResRankBattleSectInfo'
    
    if hash == StringHash.calculate_hash('ResRankBattleInfo'):
        return 'ResRankBattleInfo'
    
    if hash == StringHash.calculate_hash('ResRankBattleSect'):
        return 'ResRankBattleSect'
    
    if hash == StringHash.calculate_hash('ResRankBattleReward'):
        return 'ResRankBattleReward'
    
    if hash == StringHash.calculate_hash('ResRankBattleRobotHeroInfo'):
        return 'ResRankBattleRobotHeroInfo'
    
    if hash == StringHash.calculate_hash('ResRankBattleRobot'):
        return 'ResRankBattleRobot'
    
    if hash == StringHash.calculate_hash('ResOnlineBattleRobotHeroInfo'):
        return 'ResOnlineBattleRobotHeroInfo'
    
    if hash == StringHash.calculate_hash('ResOnlineBattleRobot'):
        return 'ResOnlineBattleRobot'
    
    if hash == StringHash.calculate_hash('ResOnlineBattleShopBox'):
        return 'ResOnlineBattleShopBox'
    
    if hash == StringHash.calculate_hash('ResGrowUpCondition'):
        return 'ResGrowUpCondition'
    
    if hash == StringHash.calculate_hash('ResGrowUp'):
        return 'ResGrowUp'
    
    if hash == StringHash.calculate_hash('ResPurchase'):
        return 'ResPurchase'
    
    if hash == StringHash.calculate_hash('ResMonthCard'):
        return 'ResMonthCard'
    
    if hash == StringHash.calculate_hash('ResBusinessRefresh'):
        return 'ResBusinessRefresh'
    
    if hash == StringHash.calculate_hash('ResGroupBuy'):
        return 'ResGroupBuy'
    
    if hash == StringHash.calculate_hash('ResGrowthFundReward'):
        return 'ResGrowthFundReward'
    
    if hash == StringHash.calculate_hash('ResCumulateRecharge'):
        return 'ResCumulateRecharge'
    
    if hash == StringHash.calculate_hash('ResSlotInfo'):
        return 'ResSlotInfo'
    
    if hash == StringHash.calculate_hash('ResParamInfo'):
        return 'ResParamInfo'
    
    if hash == StringHash.calculate_hash('ResGiftGroup'):
        return 'ResGiftGroup'
    
    if hash == StringHash.calculate_hash('ResGift'):
        return 'ResGift'
    
    if hash == StringHash.calculate_hash('ResItem'):
        return 'ResItem'
    
    if hash == StringHash.calculate_hash('ResEquipAttrRatio'):
        return 'ResEquipAttrRatio'
    
    if hash == StringHash.calculate_hash('ResEquipAttr'):
        return 'ResEquipAttr'
    
    if hash == StringHash.calculate_hash('ResEquip'):
        return 'ResEquip'
    
    if hash == StringHash.calculate_hash('ResPurifyAttr'):
        return 'ResPurifyAttr'
    
    if hash == StringHash.calculate_hash('ResPurifyLevel'):
        return 'ResPurifyLevel'
    
    if hash == StringHash.calculate_hash('ResEquipBox'):
        return 'ResEquipBox'
    
    if hash == StringHash.calculate_hash('ResEquipGrowup'):
        return 'ResEquipGrowup'
    
    if hash == StringHash.calculate_hash('ResEquipWakeupCondition'):
        return 'ResEquipWakeupCondition'
    
    if hash == StringHash.calculate_hash('ResEquipGrowupCondition'):
        return 'ResEquipGrowupCondition'
    
    if hash == StringHash.calculate_hash('ResEquipColor'):
        return 'ResEquipColor'
    
    if hash == StringHash.calculate_hash('ResEquipColorLevelup'):
        return 'ResEquipColorLevelup'
    
    if hash == StringHash.calculate_hash('ResEquipColorLevelAttr'):
        return 'ResEquipColorLevelAttr'
    
    if hash == StringHash.calculate_hash('ResEquipRecommend'):
        return 'ResEquipRecommend'
    
    if hash == StringHash.calculate_hash('ResEquipFusionTargetInfo'):
        return 'ResEquipFusionTargetInfo'
    
    if hash == StringHash.calculate_hash('ResEquipFusion'):
        return 'ResEquipFusion'
    
    if hash == StringHash.calculate_hash('ResFactor'):
        return 'ResFactor'
    
    if hash == StringHash.calculate_hash('ResFactorMisc'):
        return 'ResFactorMisc'
    
    if hash == StringHash.calculate_hash('ResFactorTriggerAttr'):
        return 'ResFactorTriggerAttr'
    
    if hash == StringHash.calculate_hash('ResFactorSkill'):
        return 'ResFactorSkill'
    
    if hash == StringHash.calculate_hash('ResDropElem'):
        return 'ResDropElem'
    
    if hash == StringHash.calculate_hash('ResBaseDrop'):
        return 'ResBaseDrop'
    
    if hash == StringHash.calculate_hash('ResWorldDrop'):
        return 'ResWorldDrop'
    
    if hash == StringHash.calculate_hash('ResRetrieveInfo'):
        return 'ResRetrieveInfo'
    
    if hash == StringHash.calculate_hash('ResParam'):
        return 'ResParam'
    
    if hash == StringHash.calculate_hash('ResUserTipData'):
        return 'ResUserTipData'
    
    if hash == StringHash.calculate_hash('ResMailContent'):
        return 'ResMailContent'
    
    if hash == StringHash.calculate_hash('ResPrizeDrawHero'):
        return 'ResPrizeDrawHero'
    
    if hash == StringHash.calculate_hash('ResPrizeDraw'):
        return 'ResPrizeDraw'
    
    if hash == StringHash.calculate_hash('ResShopRefresh'):
        return 'ResShopRefresh'
    
    if hash == StringHash.calculate_hash('ResBuyRate'):
        return 'ResBuyRate'
    
    if hash == StringHash.calculate_hash('ResRefreshPrice'):
        return 'ResRefreshPrice'
    
    if hash == StringHash.calculate_hash('ResShopGoods'):
        return 'ResShopGoods'
    
    if hash == StringHash.calculate_hash('ResShopRandomGoodsInfo'):
        return 'ResShopRandomGoodsInfo'
    
    if hash == StringHash.calculate_hash('ResShopRandom'):
        return 'ResShopRandom'
    
    if hash == StringHash.calculate_hash('ResTutorialRule'):
        return 'ResTutorialRule'
    
    if hash == StringHash.calculate_hash('ResBible'):
        return 'ResBible'
    
    if hash == StringHash.calculate_hash('ResFriendRecommendInfo'):
        return 'ResFriendRecommendInfo'
    
    if hash == StringHash.calculate_hash('ResFriendRecommendSect'):
        return 'ResFriendRecommendSect'
    
    if hash == StringHash.calculate_hash('ResTutorialInfo'):
        return 'ResTutorialInfo'
    
    if hash == StringHash.calculate_hash('ResHeroImageInfo'):
        return 'ResHeroImageInfo'
    
    if hash == StringHash.calculate_hash('ST_ACTION_DESC'):
        return 'ST_ACTION_DESC'
    
    if hash == StringHash.calculate_hash('ST_BATTLE_ROBOT_INFO'):
        return 'ST_BATTLE_ROBOT_INFO'
    
    if hash == StringHash.calculate_hash('ResRoleCommandList'):
        return 'ResRoleCommandList'
    
    if hash == StringHash.calculate_hash('ResDailyTime'):
        return 'ResDailyTime'
    
    if hash == StringHash.calculate_hash('ResActivity'):
        return 'ResActivity'
    
    if hash == StringHash.calculate_hash('ResNameExtra'):
        return 'ResNameExtra'
    
    if hash == StringHash.calculate_hash('ResZoneInfo'):
        return 'ResZoneInfo'
    
    if hash == StringHash.calculate_hash('ResWorldZone'):
        return 'ResWorldZone'
    
    if hash == StringHash.calculate_hash('ResRoleAttribute'):
        return 'ResRoleAttribute'
    
    if hash == StringHash.calculate_hash('ResCumulateCost'):
        return 'ResCumulateCost'
    
    if hash == StringHash.calculate_hash('ResBossRushChapter'):
        return 'ResBossRushChapter'
    
    if hash == StringHash.calculate_hash('ResBossRushDrop'):
        return 'ResBossRushDrop'
    
    if hash == StringHash.calculate_hash('ResBossRushDungeon'):
        return 'ResBossRushDungeon'
    
    if hash == StringHash.calculate_hash('ResFirstRecharge'):
        return 'ResFirstRecharge'
    
    if hash == StringHash.calculate_hash('ResDailyRecharge'):
        return 'ResDailyRecharge'
    
    if hash == StringHash.calculate_hash('ResSectRecharge'):
        return 'ResSectRecharge'
    
    if hash == StringHash.calculate_hash('ResTalentAttr'):
        return 'ResTalentAttr'
    
    if hash == StringHash.calculate_hash('ResTalentActiveInfo'):
        return 'ResTalentActiveInfo'
    
    if hash == StringHash.calculate_hash('ResTalent'):
        return 'ResTalent'
    
    if hash == StringHash.calculate_hash('ResTalentHide'):
        return 'ResTalentHide'
    
    if hash == StringHash.calculate_hash('ResAssistantHeroRent'):
        return 'ResAssistantHeroRent'
    
    if hash == StringHash.calculate_hash('ResCountToReward'):
        return 'ResCountToReward'
    
    if hash == StringHash.calculate_hash('ResWorldActivity'):
        return 'ResWorldActivity'
    
    if hash == StringHash.calculate_hash('ResActivityOrder'):
        return 'ResActivityOrder'
    
    if hash == StringHash.calculate_hash('ResActivityResourceBox'):
        return 'ResActivityResourceBox'
    
    if hash == StringHash.calculate_hash('ResErrorMsg'):
        return 'ResErrorMsg'
    
    if hash == StringHash.calculate_hash('ResActivityDiscount'):
        return 'ResActivityDiscount'
    
    if hash == StringHash.calculate_hash('ResGameModeEntrance'):
        return 'ResGameModeEntrance'
    
    if hash == StringHash.calculate_hash('ResAudioEffect'):
        return 'ResAudioEffect'
    
    if hash == StringHash.calculate_hash('ResAudioEffectSequence'):
        return 'ResAudioEffectSequence'
    
    if hash == StringHash.calculate_hash('ResTopBattleSectInfo'):
        return 'ResTopBattleSectInfo'
    
    if hash == StringHash.calculate_hash('ResTopBattleSect'):
        return 'ResTopBattleSect'
    
    if hash == StringHash.calculate_hash('ResTopBattleMisc'):
        return 'ResTopBattleMisc'
    
    if hash == StringHash.calculate_hash('ResTopBattleReward'):
        return 'ResTopBattleReward'
    
    if hash == StringHash.calculate_hash('ResItemCollect'):
        return 'ResItemCollect'
    
    if hash == StringHash.calculate_hash('ResTimeRecharge'):
        return 'ResTimeRecharge'
    
    if hash == StringHash.calculate_hash('ResOpenRecharge'):
        return 'ResOpenRecharge'
    
    if hash == StringHash.calculate_hash('ResTotalFightCapacityExtraAttr'):
        return 'ResTotalFightCapacityExtraAttr'
    
    if hash == StringHash.calculate_hash('ResRocket'):
        return 'ResRocket'
    
    if hash == StringHash.calculate_hash('ResGamePlayModeFeature'):
        return 'ResGamePlayModeFeature'
    
    if hash == StringHash.calculate_hash('ResReward'):
        return 'ResReward'
    
    if hash == StringHash.calculate_hash('HeroAttr'):
        return 'HeroAttr'
    
    if hash == StringHash.calculate_hash('CSDT_EQUIPED_INFO'):
        return 'CSDT_EQUIPED_INFO'
    
    if hash == StringHash.calculate_hash('ST_REWARD_RES'):
        return 'ST_REWARD_RES'
    
    if hash == StringHash.calculate_hash('ST_BLESS_INFO'):
        return 'ST_BLESS_INFO'
    
    if hash == StringHash.calculate_hash('ST_BATTLE_HERO_ATTR_INFO'):
        return 'ST_BATTLE_HERO_ATTR_INFO'
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_DEFENSE_INFO'):
        return 'TOP_BATTLE_DEFENSE_INFO'
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_ROLE_INFO'):
        return 'TOP_BATTLE_ROLE_INFO'
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_FIGHT_TARGET_INFO'):
        return 'TOP_BATTLE_FIGHT_TARGET_INFO'
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_TOPTHREE_INFO'):
        return 'TOP_BATTLE_TOPTHREE_INFO'
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_QUALIFICATION_INFO'):
        return 'TOP_BATTLE_QUALIFICATION_INFO'
    
    if hash == StringHash.calculate_hash('TOP_BATTLE_ROCKET_INFO'):
        return 'TOP_BATTLE_ROCKET_INFO'
    
    if hash == StringHash.calculate_hash('ResFriendInviteReward'):
        return 'ResFriendInviteReward'
    
    if hash == StringHash.calculate_hash('ResCityReward'):
        return 'ResCityReward'
    
    if hash == StringHash.calculate_hash('ResMaterial'):
        return 'ResMaterial'
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_EMBLEM_INFO'):
        return 'ST_HERO_BATTLE_EMBLEM_INFO'
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_EQUIP_INFO'):
        return 'ST_HERO_BATTLE_EQUIP_INFO'
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_TALENT_HIDE_INFO'):
        return 'ST_HERO_BATTLE_TALENT_HIDE_INFO'
    
    if hash == StringHash.calculate_hash('ST_HERO_BATTLE_INFO'):
        return 'ST_HERO_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('ST_BOSSRUSH_HERO_HP_REMAIN'):
        return 'ST_BOSSRUSH_HERO_HP_REMAIN'
    
    if hash == StringHash.calculate_hash('CSDT_DUNGEON_COMBAT_BRIEF'):
        return 'CSDT_DUNGEON_COMBAT_BRIEF'
    
    if hash == StringHash.calculate_hash('ST_SHOP_GOODS_INFO'):
        return 'ST_SHOP_GOODS_INFO'
    
    if hash == StringHash.calculate_hash('ST_SHOP_GOODS'):
        return 'ST_SHOP_GOODS'
    
    if hash == StringHash.calculate_hash('CSPKG_REFRESH_SHOP_GOODS_REQ'):
        return 'CSPKG_REFRESH_SHOP_GOODS_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_REFRESH_SHOP_GOODS_RES'):
        return 'SCPKG_REFRESH_SHOP_GOODS_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_REFRESH_SHOP_COUNT_RES'):
        return 'SCPKG_REFRESH_SHOP_COUNT_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_BUY_SHOP_GOODS_REQ'):
        return 'CSPKG_BUY_SHOP_GOODS_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_BUY_SHOP_GOODS_RES'):
        return 'SCPKG_BUY_SHOP_GOODS_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_SPECIAL_ACTIVITY_ITEM'):
        return 'SCPKG_SPECIAL_ACTIVITY_ITEM'
    
    if hash == StringHash.calculate_hash('SCPKG_SPECIAL_ACTIVITY_INFO'):
        return 'SCPKG_SPECIAL_ACTIVITY_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_SPECIAL_ACTIVITY_CLAIM_REQ'):
        return 'CSPKG_SPECIAL_ACTIVITY_CLAIM_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_SPECIAL_ACTIVITY_CLAIM_RES'):
        return 'SCPKG_SPECIAL_ACTIVITY_CLAIM_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_SPECIAL_ACTIVITY_SHARE_REQ'):
        return 'CSPKG_SPECIAL_ACTIVITY_SHARE_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_NOTIFY_MSG'):
        return 'SSDT_NOTIFY_MSG'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_ONLINE'):
        return 'SSDT_ROLE_ONLINE'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_QUEST'):
        return 'SSDT_ROLE_QUEST'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_PACKAGE'):
        return 'SSDT_ROLE_PACKAGE'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_SKILL'):
        return 'SSDT_ROLE_SKILL'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DUNGEON_DATA'):
        return 'SSDT_ROLE_DUNGEON_DATA'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_MISC_DATA'):
        return 'SSDT_ROLE_MISC_DATA'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_HERO'):
        return 'SSDT_ROLE_DATASET_HERO'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_BUILDING'):
        return 'SSDT_ROLE_DATASET_BUILDING'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_DATASET_DUNDATA'):
        return 'SSDT_ROLE_DATASET_DUNDATA'
    
    if hash == StringHash.calculate_hash('SSDT_NOTIFY_DATA'):
        return 'SSDT_NOTIFY_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_ATTR_INFO'):
        return 'DBBLOB_ATTR_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ITEM_EXTRA_INFO_RECOVER'):
        return 'DBBLOB_ITEM_EXTRA_INFO_RECOVER'
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTPURCHASE_INFO'):
        return 'DBBLOB_FIRSTPURCHASE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_MONTHCARD_INFO'):
        return 'DBBLOB_MONTHCARD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_SUPERVALUECARD_INFO'):
        return 'DBBLOB_SUPERVALUECARD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTPURCHASE_LIST'):
        return 'DBBLOB_FIRSTPURCHASE_LIST'
    
    if hash == StringHash.calculate_hash('DBBLOB_EQUIP_INFO'):
        return 'DBBLOB_EQUIP_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_EQUIP_TAB'):
        return 'DBBLOB_EQUIP_TAB'
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_OBJ'):
        return 'DBBLOB_PACKAGE_OBJ'
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_TAB'):
        return 'DBBLOB_PACKAGE_TAB'
    
    if hash == StringHash.calculate_hash('DBBLOBHERO_EQUIPED_INFO'):
        return 'DBBLOBHERO_EQUIPED_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DATA_HERO_FACTOR_DATA'):
        return 'DBBLOB_DATA_HERO_FACTOR_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_FACTOR_INFO'):
        return 'DBBLOB_FACTOR_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PACKAGE_INFO'):
        return 'DBBLOB_PACKAGE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_TIME_VALUE'):
        return 'DBBLOB_TIME_VALUE'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PRACTICEDUN_QUEST'):
        return 'DBBLOB_PLAYER_PRACTICEDUN_QUEST'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_ACHIEVEMENT'):
        return 'DBBLOB_PLAYER_ACHIEVEMENT'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_FIRSTPURCHAE'):
        return 'DBBLOB_PLAYER_FIRSTPURCHAE'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_DAILYTASK_ITEM'):
        return 'DBBLOB_PLAYER_DAILYTASK_ITEM'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_DAILYTASK'):
        return 'DBBLOB_PLAYER_DAILYTASK'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MAIN_TASK_ITEM'):
        return 'DBBLOB_PLAYER_MAIN_TASK_ITEM'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MAIN_TASK'):
        return 'DBBLOB_PLAYER_MAIN_TASK'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_SHOP'):
        return 'DBBLOB_PLAYER_SHOP'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PRIZE_DRAW'):
        return 'DBBLOB_PLAYER_PRIZE_DRAW'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_QUEST'):
        return 'DBBLOB_PLAYER_QUEST'
    
    if hash == StringHash.calculate_hash('DBBLOB_GIFT_ACCEPT_INFO'):
        return 'DBBLOB_GIFT_ACCEPT_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_GIFT_CLAIM_ITEM_INFO'):
        return 'DBBLOB_GIFT_CLAIM_ITEM_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_GIFT_CLAIM_INFO'):
        return 'DBBLOB_GIFT_CLAIM_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_OFFLINE_BATTLE_DEFEATED_INFO'):
        return 'DBBLOB_OFFLINE_BATTLE_DEFEATED_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_OFFLINE_BATTLE_INFO'):
        return 'DBBLOB_OFFLINE_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ONLINE_BATTLE_INFO'):
        return 'DBBLOB_ONLINE_BATTLE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DAILYQUEST_INFO'):
        return 'DBBLOB_DAILYQUEST_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_CHALLENGE_INFO'):
        return 'DBBLOB_DUNGEON_CHALLENGE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_UNLOCK_INFO'):
        return 'DBBLOB_DUNGEON_UNLOCK_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_COUNT_INFO'):
        return 'DBBLOB_DUNGEON_COUNT_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUNGEON_DATA_INFO'):
        return 'DBBLOB_DUNGEON_DATA_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_STAT_DATA'):
        return 'DBBLOB_HERO_STAT_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_SKILL_INFO_DATA'):
        return 'DBBLOB_SKILL_INFO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_EMBLEMINFO_DATA'):
        return 'DBBLOB_EMBLEMINFO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_INFO_DATA'):
        return 'DBBLOB_HERO_INFO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_TRAININGSLOT_INFO'):
        return 'DBBLOB_HERO_TRAININGSLOT_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_CHIP_INFO_DATA'):
        return 'DBBLOB_CHIP_INFO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_HERO_DATA'):
        return 'DBBLOB_PLAYER_HERO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_HERO_GANGBATTLE_DATA'):
        return 'DBBLOB_PLAYER_HERO_GANGBATTLE_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_TOP_BATTLE_ROCKET'):
        return 'DBBLOB_PLAYER_TOP_BATTLE_ROCKET'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_RANK_BATTLE_DATA'):
        return 'DBBLOB_PLAYER_RANK_BATTLE_DATA'
    
    if hash == StringHash.calculate_hash('RANK_BATTLE_DEFENSE_DATA'):
        return 'RANK_BATTLE_DEFENSE_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_MONSTER_STAT_DATA'):
        return 'DBBLOB_MONSTER_STAT_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_MONSTER_INFO_DATA'):
        return 'DBBLOB_MONSTER_INFO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_MONSTER_DATA'):
        return 'DBBLOB_PLAYER_MONSTER_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUN_UNLOCK_DATA'):
        return 'DBBLOB_DUN_UNLOCK_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVE_CHALLENGE_DATA'):
        return 'DBBLOB_PVE_CHALLENGE_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_HERO'):
        return 'DBBLOB_TOWER_HERO'
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_HERO_INFO'):
        return 'DBBLOB_TOWER_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_TOWER_CHALLENGE_DATA'):
        return 'DBBLOB_TOWER_CHALLENGE_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_BOSS_HERO_DATA'):
        return 'DBBLOB_WORLD_BOSS_HERO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_BOSS_CHALLENGE_DATA'):
        return 'DBBLOB_WORLD_BOSS_CHALLENGE_DATA'
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_UPDATE_WORLD_BOSS'):
        return 'SSPKG_CMD_UPDATE_WORLD_BOSS'
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_DEAD'):
        return 'SSPKG_CMD_WORLD_BOSS_DEAD'
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_DEAD_PLAYER_DAMAGE_INFO'):
        return 'SSPKG_CMD_WORLD_BOSS_DEAD_PLAYER_DAMAGE_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_HERO_DAMAGE_INFO'):
        return 'SSPKG_CMD_WORLD_BOSS_HERO_DAMAGE_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_PLAYER_DAMAGE_INFO'):
        return 'SSPKG_CMD_WORLD_BOSS_PLAYER_DAMAGE_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_DAMAGE_PLAYER'):
        return 'SSPKG_CMD_WORLD_BOSS_DAMAGE_PLAYER'
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_BOSS_HERO_DAMAGE_INFO'):
        return 'DBBLOB_WORLD_BOSS_HERO_DAMAGE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_BOSS_PLAYER_DAMAGE_INFO'):
        return 'DBBLOB_WORLD_BOSS_PLAYER_DAMAGE_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_DAMAGE_INFO'):
        return 'SSPKG_CMD_WORLD_BOSS_DAMAGE_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_WORLD_BOSS_QUALIFIED_HERO_INFO'):
        return 'SSPKG_WORLD_BOSS_QUALIFIED_HERO_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_CMD_WORLD_BOSS_RESET'):
        return 'SSPKG_CMD_WORLD_BOSS_RESET'
    
    if hash == StringHash.calculate_hash('SSPKG_WORLD_BOSS_KILLER_INFO_RES'):
        return 'SSPKG_WORLD_BOSS_KILLER_INFO_RES'
    
    if hash == StringHash.calculate_hash('DBBLOB_MULTIPLAYER_PVE_CHALLENGE_DATA'):
        return 'DBBLOB_MULTIPLAYER_PVE_CHALLENGE_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_NEWBIE_ACTIVITY_ITEM'):
        return 'DBBLOB_NEWBIE_ACTIVITY_ITEM'
    
    if hash == StringHash.calculate_hash('DBBLOB_NEWBIE_ACTIVITY_STATUS'):
        return 'DBBLOB_NEWBIE_ACTIVITY_STATUS'
    
    if hash == StringHash.calculate_hash('DBBLOB_SPECIAL_ACTIVITY_ITEM'):
        return 'DBBLOB_SPECIAL_ACTIVITY_ITEM'
    
    if hash == StringHash.calculate_hash('DBBLOB_SPECIAL_ACTIVITY_INFO'):
        return 'DBBLOB_SPECIAL_ACTIVITY_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_SELFDUN_HERO_INFO'):
        return 'DBBLOB_SELFDUN_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_SELF_DUN_DATA'):
        return 'DBBLOB_SELF_DUN_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVPDUN_INFO'):
        return 'DBBLOB_PVPDUN_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_PVPDUN_DATA'):
        return 'DBBLOB_PLAYER_PVPDUN_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_ENDLESS_HERO_INFO'):
        return 'DBBLOB_ENDLESS_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ENDLESS_HERO_DATA'):
        return 'DBBLOB_ENDLESS_HERO_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_HERO_DATASET'):
        return 'DBBLOB_HERO_DATASET'
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_BASE_INFO'):
        return 'DBBLOB_BUILDING_BASE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_RES_STORE_INFO'):
        return 'DBBLOB_RES_STORE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_DEFEND_INFO'):
        return 'DBBLOB_ISLAND_DEFEND_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_BORNINFO'):
        return 'DBBLOB_ISLAND_BORNINFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_INFO'):
        return 'DBBLOB_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_ISLAND_GAININFO'):
        return 'DBBLOB_ISLAND_GAININFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_INFO'):
        return 'DBBLOB_BUILDING_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_HERO_INFO'):
        return 'DBBLOB_PVP_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_ISLAND_DEFEND_INFO'):
        return 'DBBLOB_PVP_ISLAND_DEFEND_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_ISLAND_INFO'):
        return 'DBBLOB_PVP_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PVP_BUILD_INFO'):
        return 'DBBLOB_PVP_BUILD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_BUILDING_DATASET'):
        return 'DBBLOB_BUILDING_DATASET'
    
    if hash == StringHash.calculate_hash('DBBLOB_CITY_REWARD'):
        return 'DBBLOB_CITY_REWARD'
    
    if hash == StringHash.calculate_hash('DBBLOB_CITY_REWARD_SET'):
        return 'DBBLOB_CITY_REWARD_SET'
    
    if hash == StringHash.calculate_hash('DBBLOB_DUN_DATASET'):
        return 'DBBLOB_DUN_DATASET'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_BEHAVIOUR'):
        return 'DBBLOB_PLAYER_BEHAVIOUR'
    
    if hash == StringHash.calculate_hash('DBBLOB_MONTH_CARD_INFO'):
        return 'DBBLOB_MONTH_CARD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_SUPERVALUE_CARD_INFO'):
        return 'DBBLOB_SUPERVALUE_CARD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_CONTINUE_LOGIN_INFO'):
        return 'DBBLOB_CONTINUE_LOGIN_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_GROWTH_FUND_INFO'):
        return 'DBBLOB_GROWTH_FUND_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_CUMULATE_RECHARGE_INFO'):
        return 'DBBLOB_CUMULATE_RECHARGE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_GROUP_BUY_INFO'):
        return 'DBBLOB_GROUP_BUY_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_FIRSTREWARD_INFO'):
        return 'DBBLOB_FIRSTREWARD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_BUSINESS_INFO'):
        return 'DBBLOB_BUSINESS_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PRIVATE_CHAT_INFO'):
        return 'SSDT_PRIVATE_CHAT_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_PRIVATE_CHAT_REQ'):
        return 'SSPKG_PRIVATE_CHAT_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_PRIVATE_CHAT_RES'):
        return 'SSPKG_PRIVATE_CHAT_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_OFFLINE_PRIVATE_CHAT_MSG'):
        return 'SSPKG_OFFLINE_PRIVATE_CHAT_MSG'
    
    if hash == StringHash.calculate_hash('DBBLOB_OFFLIEN_PRIVATE_CHAT'):
        return 'DBBLOB_OFFLIEN_PRIVATE_CHAT'
    
    if hash == StringHash.calculate_hash('DBBLOB_RANK_POS_INFO'):
        return 'DBBLOB_RANK_POS_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_MISC_DATA'):
        return 'DBBLOB_MISC_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_NOTIFY_DATA'):
        return 'DBBLOB_NOTIFY_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOB_RANK_VALINFO'):
        return 'DBBLOB_RANK_VALINFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_RANK_DATA'):
        return 'DBBLOB_RANK_DATA'
    
    if hash == StringHash.calculate_hash('DBBLOG_RANK_STAT_INFO'):
        return 'DBBLOG_RANK_STAT_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DIRHERO_INFO'):
        return 'DBBLOB_DIRHERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_WORLD_INFO'):
        return 'DBBLOB_WORLD_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DIR_WORLD_INFO'):
        return 'DBBLOB_DIR_WORLD_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_WHOLE_GAMEOBJ'):
        return 'SSDT_WHOLE_GAMEOBJ'
    
    if hash == StringHash.calculate_hash('ERR_RESPONSE'):
        return 'ERR_RESPONSE'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_BRIEF'):
        return 'SSDT_ROLE_BRIEF'
    
    if hash == StringHash.calculate_hash('SUCC_ROLE_LIST_RES'):
        return 'SUCC_ROLE_LIST_RES'
    
    if hash == StringHash.calculate_hash('SSDT_WHOLE_ACCOUNT'):
        return 'SSDT_WHOLE_ACCOUNT'
    
    if hash == StringHash.calculate_hash('SSPKG_SHUTDOWN_ZONESVR'):
        return 'SSPKG_SHUTDOWN_ZONESVR'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_SELFDUN_DATA'):
        return 'SSDT_ROLE_SELFDUN_DATA'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_PVEDUN_DATA'):
        return 'SSDT_ROLE_PVEDUN_DATA'
    
    if hash == StringHash.calculate_hash('SSDT_ENDLESS_HERO_DATA'):
        return 'SSDT_ENDLESS_HERO_DATA'
    
    if hash == StringHash.calculate_hash('SSDT_PVPPLAYER_INFO'):
        return 'SSDT_PVPPLAYER_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_LOGIN_PVPINFO'):
        return 'SSDT_PLAYER_LOGIN_PVPINFO'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGIN_REQ'):
        return 'PKG_ROLE_LOGIN_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGIN_RES'):
        return 'PKG_ROLE_LOGIN_RES'
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_REQ'):
        return 'PKG_VIEW_PLAYER_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_GANG_SVR'):
        return 'PKG_VIEW_PLAYER_INFO_RSP_FROM_GANG_SVR'
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_BATTLE_SVR'):
        return 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_BATTLE_SVR'
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_SVR'):
        return 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_SVR'
    
    if hash == StringHash.calculate_hash('PKG_VIEW_PLAYER_INFO_RSP_FROM_ROLE_SVR'):
        return 'PKG_VIEW_PLAYER_INFO_RSP_FROM_ROLE_SVR'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_LOGOUT_REQ'):
        return 'PKG_ROLE_LOGOUT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_REQ_PLAYER_LOGIN'):
        return 'PKG_REQ_PLAYER_LOGIN'
    
    if hash == StringHash.calculate_hash('PKG_RES_PLAYER_LOGIN'):
        return 'PKG_RES_PLAYER_LOGIN'
    
    if hash == StringHash.calculate_hash('PKG_REQ_PLAYER_LOGOUT'):
        return 'PKG_REQ_PLAYER_LOGOUT'
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGIN_REQ'):
        return 'PKG_ACCOUNT_LOGIN_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGIN_RES'):
        return 'PKG_ACCOUNT_LOGIN_RES'
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_LOGOUT_REQ'):
        return 'PKG_ACCOUNT_LOGOUT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_NAME'):
        return 'PKG_CREATE_NAME'
    
    if hash == StringHash.calculate_hash('SSDT_RECOMMAND_NAME'):
        return 'SSDT_RECOMMAND_NAME'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_NAME_RES'):
        return 'PKG_CREATE_NAME_RES'
    
    if hash == StringHash.calculate_hash('PKG_RANDOM_NAME_REQ'):
        return 'PKG_RANDOM_NAME_REQ'
    
    if hash == StringHash.calculate_hash('PKG_RANDOM_NAME_RES'):
        return 'PKG_RANDOM_NAME_RES'
    
    if hash == StringHash.calculate_hash('PKG_VERIFY_NAME'):
        return 'PKG_VERIFY_NAME'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_WORLDROLE'):
        return 'PKG_CREATE_WORLDROLE'
    
    if hash == StringHash.calculate_hash('PKG_BIND_PLATACCOUNT_REQ'):
        return 'PKG_BIND_PLATACCOUNT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BIND_PLATACCOUNT_RES'):
        return 'PKG_BIND_PLATACCOUNT_RES'
    
    if hash == StringHash.calculate_hash('PKG_BIND_CLUSTER_PLATACCOUNT_REQ'):
        return 'PKG_BIND_CLUSTER_PLATACCOUNT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BIND_CLUSTER_PLATACCOUNT_RES'):
        return 'PKG_BIND_CLUSTER_PLATACCOUNT_RES'
    
    if hash == StringHash.calculate_hash('PKG_BIND_ROLE_PLATACCOUNT_REQ'):
        return 'PKG_BIND_ROLE_PLATACCOUNT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BIND_ROLE_PLATACCOUNT_RES'):
        return 'PKG_BIND_ROLE_PLATACCOUNT_RES'
    
    if hash == StringHash.calculate_hash('PKG_BIND_ACCOUNTSVR_REQ'):
        return 'PKG_BIND_ACCOUNTSVR_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BIND_ACCOUNTSVR_RES'):
        return 'PKG_BIND_ACCOUNTSVR_RES'
    
    if hash == StringHash.calculate_hash('PKG_GAMEOBJ_UPDATE_REQ'):
        return 'PKG_GAMEOBJ_UPDATE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GAMEOBJ_UPDATE_RSP'):
        return 'PKG_GAMEOBJ_UPDATE_RSP'
    
    if hash == StringHash.calculate_hash('SSDT_CMD_PLAYER_SELFDUNINFO'):
        return 'SSDT_CMD_PLAYER_SELFDUNINFO'
    
    if hash == StringHash.calculate_hash('SSDT_ROOMMONSTER_INFO'):
        return 'SSDT_ROOMMONSTER_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ROOM_INFO'):
        return 'SSDT_ROOM_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_DUNGEON_INFO'):
        return 'SSDT_DUNGEON_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_ENTERDUN_RES'):
        return 'SSDT_PLAYER_ENTERDUN_RES'
    
    if hash == StringHash.calculate_hash('PKG_SELFDUN_ENTER_REQ'):
        return 'PKG_SELFDUN_ENTER_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SELFDUN_ENTER_RSP'):
        return 'PKG_SELFDUN_ENTER_RSP'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_ROLE_REQ'):
        return 'PKG_ROLE_DEL_ROLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_ROLE_RES'):
        return 'PKG_ROLE_DEL_ROLE_RES'
    
    if hash == StringHash.calculate_hash('PKG_KICK_PLAYER'):
        return 'PKG_KICK_PLAYER'
    
    if hash == StringHash.calculate_hash('PKG_ACCOUNT_INFO_RES'):
        return 'PKG_ACCOUNT_INFO_RES'
    
    if hash == StringHash.calculate_hash('PKG_NEW_ROLE_CLUSTER'):
        return 'PKG_NEW_ROLE_CLUSTER'
    
    if hash == StringHash.calculate_hash('PKG_ROLE_DEL_NAME'):
        return 'PKG_ROLE_DEL_NAME'
    
    if hash == StringHash.calculate_hash('PKG_DISP_PACKAGE'):
        return 'PKG_DISP_PACKAGE'
    
    if hash == StringHash.calculate_hash('SSDT_PVP_ISLAND_DEFENSE_INFO'):
        return 'SSDT_PVP_ISLAND_DEFENSE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PVP_ISLAND_INFO'):
        return 'SSDT_PVP_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PVP_STEAL_ISLAND_INFO'):
        return 'SSDT_PVP_STEAL_ISLAND_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_ROLE_INFO'):
        return 'SSDT_ONLINE_BATTLE_ROOM_ROLE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO'):
        return 'SSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_INFO'):
        return 'SSDT_ONLINE_BATTLE_ROOM_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME'):
        return 'SSDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME'
    
    if hash == StringHash.calculate_hash('SSPKG_CREATE_ONLINE_BATTLE_ROOM_REQ'):
        return 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_CREATE_ONLINE_BATTLE_ROOM_RES'):
        return 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_QUIT_ONLINE_BATTLE_ROOM_REQ'):
        return 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_QUIT_ONLINE_BATTLE_ROOM_RES'):
        return 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_LIST_ONLINE_BATTLE_ROOM_REQ'):
        return 'SSPKG_LIST_ONLINE_BATTLE_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_LIST_ONLINE_BATTLE_ROOM_RES'):
        return 'SSPKG_LIST_ONLINE_BATTLE_ROOM_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_JOIN_ONLINE_BATTLE_ROOM_REQ'):
        return 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_JOIN_ONLINE_BATTLE_ROOM_RES'):
        return 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_ROOM_REQ'):
        return 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_QUICK_MATCH_REQ'):
        return 'SSPKG_ONLINE_BATTLE_ROOM_QUICK_MATCH_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_KICK_GUEST_REQ'):
        return 'SSPKG_ONLINE_BATTLE_ROOM_KICK_GUEST_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_ROOM_HEART_BEAT_REQ'):
        return 'SSPKG_ONLINE_BATTLE_ROOM_HEART_BEAT_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_ROOM_RES'):
        return 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_ONLINE_BATTLE_BEGIN'):
        return 'SSPKG_ONLINE_BATTLE_BEGIN'
    
    if hash == StringHash.calculate_hash('PKG_SEARCH_PVP_PLAYER_REQ'):
        return 'PKG_SEARCH_PVP_PLAYER_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SEARCH_PVP_PLAYER_RES'):
        return 'PKG_SEARCH_PVP_PLAYER_RES'
    
    if hash == StringHash.calculate_hash('ST_WIPE_OUT_STEAL_BATTLE_RESULT'):
        return 'ST_WIPE_OUT_STEAL_BATTLE_RESULT'
    
    if hash == StringHash.calculate_hash('PKG_WIPE_OUT_STEAL_BATTLE_BALANCE_REQ'):
        return 'PKG_WIPE_OUT_STEAL_BATTLE_BALANCE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BALANCE_STEAL_BATTLE_REQ'):
        return 'PKG_BALANCE_STEAL_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BALANCE_STEAL_BATTLE_RES'):
        return 'PKG_BALANCE_STEAL_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('PKG_STEAL_BATTLE_RESULT_MAIL_REQ'):
        return 'PKG_STEAL_BATTLE_RESULT_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_SYSTEM_ACC'):
        return 'SSDT_MAIL_SYSTEM_ACC'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_SYSTEM_ACC_INFO'):
        return 'SSDT_MAIL_SYSTEM_ACC_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_REVENGE_ACC_INFO'):
        return 'SSDT_MAIL_REVENGE_ACC_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_ACC_INFO'):
        return 'SSDT_MAIL_ACC_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_INFO'):
        return 'SSDT_MAIL_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_BRIEF_MAIL_INFO'):
        return 'SSDT_BRIEF_MAIL_INFO'
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GET_MAIL_REQ'):
        return 'PKG_ROLELOGIN_GET_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GET_MAIL_RES'):
        return 'PKG_ROLELOGIN_GET_MAIL_RES'
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGOUT_TO_MAILSVR'):
        return 'PKG_ROLELOGOUT_TO_MAILSVR'
    
    if hash == StringHash.calculate_hash('PKG_SEND_MAIL_REQ'):
        return 'PKG_SEND_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SEND_MAIL_RES'):
        return 'PKG_SEND_MAIL_RES'
    
    if hash == StringHash.calculate_hash('SSDT_MAIL_CLR_INFO'):
        return 'SSDT_MAIL_CLR_INFO'
    
    if hash == StringHash.calculate_hash('PKG_OVERTIME_MAIL_CLR_REQ'):
        return 'PKG_OVERTIME_MAIL_CLR_REQ'
    
    if hash == StringHash.calculate_hash('PKG_OVERTIME_MAIL_CLR_RES'):
        return 'PKG_OVERTIME_MAIL_CLR_RES'
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_LIST_REQ'):
        return 'PKG_GET_MAIL_LIST_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_LIST_RES'):
        return 'PKG_GET_MAIL_LIST_RES'
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_DETAIL_REQ'):
        return 'PKG_GET_MAIL_DETAIL_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_MAIL_DETAIL_RES'):
        return 'PKG_GET_MAIL_DETAIL_RES'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_READ_REQ'):
        return 'PKG_MAIL_READ_REQ'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_READ_RES'):
        return 'PKG_MAIL_READ_RES'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_GET_ACC_REQ'):
        return 'PKG_MAIL_GET_ACC_REQ'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_GET_ACC_RES'):
        return 'PKG_MAIL_GET_ACC_RES'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_DELETE_REQ'):
        return 'PKG_MAIL_DELETE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_MAIL_DELETE_RES'):
        return 'PKG_MAIL_DELETE_RES'
    
    if hash == StringHash.calculate_hash('SSDT_GANGSIMPLE_INFO'):
        return 'SSDT_GANGSIMPLE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_SELF_INFO'):
        return 'SSDT_GANG_SELF_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_MEM_BLOB_INFO'):
        return 'SSDT_GANG_MEM_BLOB_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANGMEM_INFO'):
        return 'SSDT_GANGMEM_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANGLIST_INFO'):
        return 'SSDT_GANGLIST_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_APPLYLIST_INFO'):
        return 'SSDT_GANG_APPLYLIST_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_APPLYLIST_DBINFO'):
        return 'SSDT_GANG_APPLYLIST_DBINFO'
    
    if hash == StringHash.calculate_hash('PKG_GANGLIST_REQ'):
        return 'PKG_GANGLIST_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANGLIST_RES'):
        return 'PKG_GANGLIST_RES'
    
    if hash == StringHash.calculate_hash('PKG_CMD_SEARCH_GANG_REQ'):
        return 'PKG_CMD_SEARCH_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_CMD_SEARCH_GANG_RES'):
        return 'PKG_CMD_SEARCH_GANG_RES'
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GANG_REQ'):
        return 'PKG_ROLELOGIN_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ROLELOGIN_GANG_RES'):
        return 'PKG_ROLELOGIN_GANG_RES'
    
    if hash == StringHash.calculate_hash('SSDT_CREATE_GANG_INFO'):
        return 'SSDT_CREATE_GANG_INFO'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_REQ'):
        return 'PKG_CREATE_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_NAME_RSP_FROM_NAME_SVR'):
        return 'PKG_CREATE_GANG_NAME_RSP_FROM_NAME_SVR'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_NAME_RSP_FROM_ACCOUNT_SVR'):
        return 'PKG_CREATE_GANG_NAME_RSP_FROM_ACCOUNT_SVR'
    
    if hash == StringHash.calculate_hash('PKG_CREATE_GANG_RES'):
        return 'PKG_CREATE_GANG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_UPDATE_BASIC_INFO_REQ'):
        return 'PKG_GANG_UPDATE_BASIC_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_UPDATE_BASIC_INFO_RES'):
        return 'PKG_GANG_UPDATE_BASIC_INFO_RES'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_REQ'):
        return 'PKG_APPLY_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_RES'):
        return 'PKG_APPLY_GANG_RES'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_AUTOJOIN_RES'):
        return 'PKG_APPLY_GANG_AUTOJOIN_RES'
    
    if hash == StringHash.calculate_hash('PKG_TRANSFER_GANG_LEADER_REQ'):
        return 'PKG_TRANSFER_GANG_LEADER_REQ'
    
    if hash == StringHash.calculate_hash('PKG_TRANSFER_GANG_LEADER_RES'):
        return 'PKG_TRANSFER_GANG_LEADER_RES'
    
    if hash == StringHash.calculate_hash('PKG_QUIT_GANG_REQ'):
        return 'PKG_QUIT_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_QUIT_GANG_RES'):
        return 'PKG_QUIT_GANG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMLIST_REQ'):
        return 'PKG_GANG_MEMLIST_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMLIST_RES'):
        return 'PKG_GANG_MEMLIST_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_DETAIL_REQ'):
        return 'PKG_GANG_DETAIL_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_DETAIL_RES'):
        return 'PKG_GANG_DETAIL_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_LIST_CHG_RES'):
        return 'PKG_GANG_MEM_LIST_CHG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BLESS_RANK_CLEAR_RES'):
        return 'PKG_GANG_BLESS_RANK_CLEAR_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BASIC_INFO_CHG_RES'):
        return 'PKG_GANG_BASIC_INFO_CHG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_INFO_CHG_REQ'):
        return 'PKG_GANG_MEM_INFO_CHG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEMCHG_RES'):
        return 'PKG_GANG_MEMCHG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPLYLIST_REQ'):
        return 'PKG_GANG_APPLYLIST_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPLYLIST_RES'):
        return 'PKG_GANG_APPLYLIST_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVE_REQ'):
        return 'PKG_GANG_APPROVE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVE_RES'):
        return 'PKG_GANG_APPROVE_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_APPROVETOMEM_RES'):
        return 'PKG_GANG_APPROVETOMEM_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_CHAT_REQ'):
        return 'PKG_GANG_CHAT_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_CHAT_RES'):
        return 'PKG_GANG_CHAT_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_KICK_MEM_REQ'):
        return 'PKG_GANG_KICK_MEM_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_KICK_MEM_RES'):
        return 'PKG_GANG_KICK_MEM_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_SET_ELDER_REQ'):
        return 'PKG_GANG_SET_ELDER_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_SET_ELDER_RES'):
        return 'PKG_GANG_SET_ELDER_RES'
    
    if hash == StringHash.calculate_hash('PKG_LOGOUT_UPDZONEID_REQ'):
        return 'PKG_LOGOUT_UPDZONEID_REQ'
    
    if hash == StringHash.calculate_hash('MemZoneInfo'):
        return 'MemZoneInfo'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BLESS_CHECK_REQ'):
        return 'PKG_GANG_BLESS_CHECK_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BLESS_CHECK_RES'):
        return 'PKG_GANG_BLESS_CHECK_RES'
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ'):
        return 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES'):
        return 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('PKG_PLAYER_HERO_CHG_TO_GANG_REQ'):
        return 'PKG_PLAYER_HERO_CHG_TO_GANG_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ'):
        return 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_SET_GANG_CITY_STRONG_POINT_HERO_RES'):
        return 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES'):
        return 'PKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_CITY_INFO_REQ'):
        return 'PKG_GET_GANG_CITY_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_CITY_INFO_RES'):
        return 'PKG_GET_GANG_CITY_INFO_RES'
    
    if hash == StringHash.calculate_hash('PKG_BROAD_GANG_BATTTLE_STATE_TO_GANG_SVR'):
        return 'PKG_BROAD_GANG_BATTTLE_STATE_TO_GANG_SVR'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_REQ'):
        return 'PKG_APPLY_GANG_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_REQ_TO_GANG_BATTLE'):
        return 'PKG_APPLY_GANG_BATTLE_REQ_TO_GANG_BATTLE'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_RES_FROM_GANG_BATTLE'):
        return 'PKG_APPLY_GANG_BATTLE_RES_FROM_GANG_BATTLE'
    
    if hash == StringHash.calculate_hash('PKG_APPLY_GANG_BATTLE_RES'):
        return 'PKG_APPLY_GANG_BATTLE_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_STATE_BROAD'):
        return 'PKG_GANG_BATTLE_STATE_BROAD'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_CITY_REQ'):
        return 'PKG_GET_GANG_BATTLE_CITY_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_CITY_RES'):
        return 'PKG_GET_GANG_BATTLE_CITY_RES'
    
    if hash == StringHash.calculate_hash('ST_GANG_BATTLE_ATTACK_MEM_INFO'):
        return 'ST_GANG_BATTLE_ATTACK_MEM_INFO'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_TOTAL_BALANCE_REQ'):
        return 'PKG_GANG_BATTLE_TOTAL_BALANCE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_BROAD_GANG_BATTTLE_POINT_CHG_TO_GANG_SVR'):
        return 'PKG_BROAD_GANG_BATTTLE_POINT_CHG_TO_GANG_SVR'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTTLE_POINT_BROAD'):
        return 'PKG_GANG_BATTTLE_POINT_BROAD'
    
    if hash == StringHash.calculate_hash('PKG_ENTER_GANG_BATTLE_DUNGEON_REQ'):
        return 'PKG_ENTER_GANG_BATTLE_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('PKG_ENTER_GANG_BATTLE_DUNGEON_RES'):
        return 'PKG_ENTER_GANG_BATTLE_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_BALANCE_REQ'):
        return 'PKG_GANG_BATTLE_BALANCE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BATTLE_BALANCE_RES'):
        return 'PKG_GANG_BATTLE_BALANCE_RES'
    
    if hash == StringHash.calculate_hash('PKG_GANG_STRONG_POINT_CHG_TO_GANGBATTLE_REQ'):
        return 'PKG_GANG_STRONG_POINT_CHG_TO_GANGBATTLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GANG_MEM_CHG_TO_GANGBATTLE_REQ'):
        return 'PKG_GANG_MEM_CHG_TO_GANGBATTLE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ'):
        return 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES'):
        return 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_INFO_REQ'):
        return 'PKG_GET_GANG_BATTLE_STATE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_INFO_RES'):
        return 'PKG_GET_GANG_BATTLE_STATE_INFO_RES'
    
    if hash == StringHash.calculate_hash('GANG_BROADCAST_DETAIL'):
        return 'GANG_BROADCAST_DETAIL'
    
    if hash == StringHash.calculate_hash('PKG_GANG_BROADCAST'):
        return 'PKG_GANG_BROADCAST'
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_ATTACK_HERO_INFO'):
        return 'DB_GANG_BATTLE_MEM_ATTACK_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_INFO'):
        return 'DB_GANG_BATTLE_MEM_INFO'
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_MEM_LIST'):
        return 'DB_GANG_BATTLE_MEM_LIST'
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_HISTORY_MEM_INFO'):
        return 'DB_GANG_BATTLE_HISTORY_MEM_INFO'
    
    if hash == StringHash.calculate_hash('DB_GANG_BATTLE_HISTORY_MEM_LIST'):
        return 'DB_GANG_BATTLE_HISTORY_MEM_LIST'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_BATTLE_HISTORY_INFO'):
        return 'SSDT_GANG_BATTLE_HISTORY_INFO'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_REQ'):
        return 'PKG_GET_GANG_BATTLE_STATE_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_STATE_RES'):
        return 'PKG_GET_GANG_BATTLE_STATE_RES'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_HISTORY_REQ'):
        return 'PKG_GET_GANG_BATTLE_HISTORY_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_GANG_BATTLE_HISTORY_RES'):
        return 'PKG_GET_GANG_BATTLE_HISTORY_RES'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_MEM_MAIL_USER_INFO'):
        return 'SSDT_GANG_MEM_MAIL_USER_INFO'
    
    if hash == StringHash.calculate_hash('PKG_GANG_SEND_MEM_MAIL_REQ'):
        return 'PKG_GANG_SEND_MEM_MAIL_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_VAL'):
        return 'SSDT_RANK_VAL'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_HERO_BRIEF'):
        return 'SSDT_RANK_BATTLE_HERO_BRIEF'
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_BASE_INFO'):
        return 'SSDT_PLAYER_BASE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GANG_BASE_INFO'):
        return 'SSDT_GANG_BASE_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_DATA'):
        return 'SSDT_RANK_DATA'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKLIST_REQ'):
        return 'SSPKG_GET_RANKLIST_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKLIST_RES'):
        return 'SSPKG_GET_RANKLIST_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKPOS_REQ'):
        return 'SSPKG_GET_RANKPOS_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RANKPOS_RES'):
        return 'SSPKG_GET_RANKPOS_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ACHIEVEMENT_SCORE_REQ'):
        return 'SSPKG_UPDATE_ACHIEVEMENT_SCORE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_GANG_SCORE_REQ'):
        return 'SSPKG_UPDATE_GANG_SCORE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_OFFLINE_BATTLE_REQ'):
        return 'SSPKG_UPDATE_OFFLINE_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ONLINE_BATTLE_RANK_REQ'):
        return 'SSPKG_UPDATE_ONLINE_BATTLE_RANK_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_WORLD_BOSS_DAMAGE_RANK_REQ'):
        return 'SSPKG_UPDATE_WORLD_BOSS_DAMAGE_RANK_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_STEAL_BATTLE_REQ'):
        return 'SSPKG_UPDATE_STEAL_BATTLE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_ENDLESS_REQ'):
        return 'SSPKG_UPDATE_ENDLESS_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_PVE_EVALUATE_STATS_REQ'):
        return 'SSPKG_UPDATE_PVE_EVALUATE_STATS_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_CHANGE_NAME_REQ'):
        return 'SSPKG_RANK_CHANGE_NAME_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_ONE_UPDATE'):
        return 'SSDT_RANK_ONE_UPDATE'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_UPDATE_INFO_REQ'):
        return 'SSPKG_RANK_UPDATE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_UPDATE_INFO_RES'):
        return 'SSPKG_RANK_UPDATE_INFO_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANKDATA_REPORT_REQ'):
        return 'SSPKG_RANKDATA_REPORT_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GANG_RANKSTAT_REQ'):
        return 'SSPKG_GET_GANG_RANKSTAT_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GANG_RANKSTAT_RES'):
        return 'SSPKG_GET_GANG_RANKSTAT_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ROLELOGIN_REQ'):
        return 'SSPKG_RANK_BATTLE_ROLELOGIN_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ROLELOGIN_RES'):
        return 'SSPKG_RANK_BATTLE_ROLELOGIN_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ'):
        return 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_FIGHT_TARGET_INFO'):
        return 'SSDT_RANK_BATTLE_FIGHT_TARGET_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES'):
        return 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ'):
        return 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ENTER_DUNGEON_RES'):
        return 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_UNLOCK_REQ'):
        return 'SSPKG_RANK_BATTLE_UNLOCK_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_BALANCE_REQ'):
        return 'SSPKG_RANK_BATTLE_BALANCE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_BALANCE_RES'):
        return 'SSPKG_RANK_BATTLE_BALANCE_RES'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BATTLE_MAIL_USER_INFO'):
        return 'SSDT_RANK_BATTLE_MAIL_USER_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_REWARD_EVERYDAY_REQ'):
        return 'SSPKG_RANK_BATTLE_REWARD_EVERYDAY_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_REWARD_PROMOTE_REQ'):
        return 'SSPKG_RANK_BATTLE_REWARD_PROMOTE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_POS_DOWN_NOTIFY_REQ'):
        return 'SSPKG_RANK_BATTLE_POS_DOWN_NOTIFY_REQ'
    
    if hash == StringHash.calculate_hash('PKG_GET_NOTIFY_REQ'):
        return 'PKG_GET_NOTIFY_REQ'
    
    if hash == StringHash.calculate_hash('PKG_NOTIFY_DATA'):
        return 'PKG_NOTIFY_DATA'
    
    if hash == StringHash.calculate_hash('PKG_NOTIFY_INFO'):
        return 'PKG_NOTIFY_INFO'
    
    if hash == StringHash.calculate_hash('PKG_GET_NOTIFY_RES'):
        return 'PKG_GET_NOTIFY_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_FINISH'):
        return 'SSPKG_PURCHASE_FINISH'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_FINISH_DISP'):
        return 'SSPKG_PURCHASE_FINISH_DISP'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQ'):
        return 'SSPKG_PURCHASE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_INFO'):
        return 'SSPKG_PURCHASE_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQUEST_DELIVERY'):
        return 'SSPKG_PURCHASE_REQUEST_DELIVERY'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQUEST_DELIVERY_IAP'):
        return 'SSPKG_PURCHASE_REQUEST_DELIVERY_IAP'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_REQUEST_DELIVERY_IAP_CHECKED'):
        return 'SSPKG_PURCHASE_REQUEST_DELIVERY_IAP_CHECKED'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_IAP_FINISHED'):
        return 'SSPKG_PURCHASE_IAP_FINISHED'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_DONE'):
        return 'SSPKG_PURCHASE_DONE'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_RES'):
        return 'SSPKG_PURCHASE_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_PURCHASE_DISP_REQ'):
        return 'SSPKG_PURCHASE_DISP_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_PURCHASEACTIVITY_REQ'):
        return 'SSPKG_GET_PURCHASEACTIVITY_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_PURCHASEACTIVITY_RES'):
        return 'SSPKG_GET_PURCHASEACTIVITY_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RECORD_TRADE_SUCCESS'):
        return 'SSPKG_RECORD_TRADE_SUCCESS'
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_CODE_REQ'):
        return 'SSPKG_GIFT_CODE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_UPDATE_ACCEPT_REQ'):
        return 'SSPKG_GIFT_UPDATE_ACCEPT_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GIFT_CODE_RES'):
        return 'SSPKG_GIFT_CODE_RES'
    
    if hash == StringHash.calculate_hash('SSDT_ROLE_LIST_RES'):
        return 'SSDT_ROLE_LIST_RES'
    
    if hash == StringHash.calculate_hash('UINON_MAIL_ACC_INFO'):
        return 'UINON_MAIL_ACC_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_RANK_BASEINFO'):
        return 'SSDT_RANK_BASEINFO'
    
    if hash == StringHash.calculate_hash('SSDT_RANKPOS_SEARCH_KEY'):
        return 'SSDT_RANKPOS_SEARCH_KEY'
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_STAT_INFO'):
        return 'SSPKG_GAMESVR_STAT_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_ACC_LOGIN'):
        return 'SSPKG_GAMESVR_ACC_LOGIN'
    
    if hash == StringHash.calculate_hash('SSPKG_GAMESVR_ACC_LOGOUT'):
        return 'SSPKG_GAMESVR_ACC_LOGOUT'
    
    if hash == StringHash.calculate_hash('DB_PLAYER_SHOP_HERO_INFO'):
        return 'DB_PLAYER_SHOP_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DB_PLAYER_SHOP_GOODS_INFO'):
        return 'DB_PLAYER_SHOP_GOODS_INFO'
    
    if hash == StringHash.calculate_hash('DB_PlAYER_SHOP_INFO_BLOB'):
        return 'DB_PlAYER_SHOP_INFO_BLOB'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGIN_REQ'):
        return 'SS_SHOP_PLAYER_LOGIN_REQ'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGOUT_REQ'):
        return 'SS_SHOP_PLAYER_LOGOUT_REQ'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_LOGIN_RES'):
        return 'SS_SHOP_PLAYER_LOGIN_RES'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_REFRESH_GOODS_REQ'):
        return 'SS_SHOP_PLAYER_REFRESH_GOODS_REQ'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_REFRESH_GOODS_RES'):
        return 'SS_SHOP_PLAYER_REFRESH_GOODS_RES'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_BUY_GOODS_CHECK_REQ'):
        return 'SS_SHOP_PLAYER_BUY_GOODS_CHECK_REQ'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PlAYER_BUY_GOODS_CHECK_RES'):
        return 'SS_SHOP_PlAYER_BUY_GOODS_CHECK_RES'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_UPDATE_HERO_REQ'):
        return 'SS_SHOP_PLAYER_UPDATE_HERO_REQ'
    
    if hash == StringHash.calculate_hash('SS_SHOP_PLAYER_BUY_GOODS_FAILE_ROLLBACK_REQ'):
        return 'SS_SHOP_PLAYER_BUY_GOODS_FAILE_ROLLBACK_REQ'
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_CROSS_INFO'):
        return 'SSDT_FRIEND_CROSS_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_BIND_3RD_PLATFORM_ID'):
        return 'SSPKG_BIND_3RD_PLATFORM_ID'
    
    if hash == StringHash.calculate_hash('SSPKG_BIND_3RD_PLATFORM_ID_TO_FRIEND'):
        return 'SSPKG_BIND_3RD_PLATFORM_ID_TO_FRIEND'
    
    if hash == StringHash.calculate_hash('SSPKG_INVITE_STATE_INFO'):
        return 'SSPKG_INVITE_STATE_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_HANDLE_INVITED_CODE_REWARD'):
        return 'SSPKG_HANDLE_INVITED_CODE_REWARD'
    
    if hash == StringHash.calculate_hash('SSPKG_APPLY_INVITED_CODE'):
        return 'SSPKG_APPLY_INVITED_CODE'
    
    if hash == StringHash.calculate_hash('SSPKG_APPLY_INVITED_CODE_TO_CROSS'):
        return 'SSPKG_APPLY_INVITED_CODE_TO_CROSS'
    
    if hash == StringHash.calculate_hash('SSPKG_APPLY_INVITED_CODE_CROSS_TO_FRIEND'):
        return 'SSPKG_APPLY_INVITED_CODE_CROSS_TO_FRIEND'
    
    if hash == StringHash.calculate_hash('SSPKG_APPLY_INVITED_CODE_RES_TO_CROSS'):
        return 'SSPKG_APPLY_INVITED_CODE_RES_TO_CROSS'
    
    if hash == StringHash.calculate_hash('SSPKG_APPLY_INVITED_CODE_RES_TO_CROSS_TO_FRIEND'):
        return 'SSPKG_APPLY_INVITED_CODE_RES_TO_CROSS_TO_FRIEND'
    
    if hash == StringHash.calculate_hash('SSPKG_NTF_INVITED_ERROR'):
        return 'SSPKG_NTF_INVITED_ERROR'
    
    if hash == StringHash.calculate_hash('SSPKG_INVITED_FRIEND_INFO'):
        return 'SSPKG_INVITED_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_REQUEST_INVITED_FRIEND'):
        return 'SSPKG_REQUEST_INVITED_FRIEND'
    
    if hash == StringHash.calculate_hash('SSDT_INVITED_INFO'):
        return 'SSDT_INVITED_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_REQUEST_INVITED_TO_CROSS'):
        return 'SSPKG_REQUEST_INVITED_TO_CROSS'
    
    if hash == StringHash.calculate_hash('SSPKG_REQUES_INVITED_CROSS_TO_FRIEND'):
        return 'SSPKG_REQUES_INVITED_CROSS_TO_FRIEND'
    
    if hash == StringHash.calculate_hash('SSPKG_RESPONSE_INVITED_FRIEND_TO_CROSS'):
        return 'SSPKG_RESPONSE_INVITED_FRIEND_TO_CROSS'
    
    if hash == StringHash.calculate_hash('SSPKG_RESPONSE_INVITED_CROSS_TO_FRIEND'):
        return 'SSPKG_RESPONSE_INVITED_CROSS_TO_FRIEND'
    
    if hash == StringHash.calculate_hash('SSDT_REQUEST_SOCIAL_FRIEND'):
        return 'SSDT_REQUEST_SOCIAL_FRIEND'
    
    if hash == StringHash.calculate_hash('SSPKG_REQUEST_SOCIAL_FRIEND'):
        return 'SSPKG_REQUEST_SOCIAL_FRIEND'
    
    if hash == StringHash.calculate_hash('SSPKG_REQUEST_SOCIAL_FRIEND_CROSS'):
        return 'SSPKG_REQUEST_SOCIAL_FRIEND_CROSS'
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_INFO'):
        return 'SSDT_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_SOCIAL_FRIEND_INFO'):
        return 'SSDT_SOCIAL_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_INFO_CROSS'):
        return 'SSDT_FRIEND_INFO_CROSS'
    
    if hash == StringHash.calculate_hash('SSPKG_REQUEST_INVITE_REWARD'):
        return 'SSPKG_REQUEST_INVITE_REWARD'
    
    if hash == StringHash.calculate_hash('SSPKG_RESPONSE_INVITE_REWARD'):
        return 'SSPKG_RESPONSE_INVITE_REWARD'
    
    if hash == StringHash.calculate_hash('SSPKG_NOTIFY_SOCIAL_FRIEND_ERROR'):
        return 'SSPKG_NOTIFY_SOCIAL_FRIEND_ERROR'
    
    if hash == StringHash.calculate_hash('SSDT_SOCIAL_FRIEND_ID'):
        return 'SSDT_SOCIAL_FRIEND_ID'
    
    if hash == StringHash.calculate_hash('SSPKG_SEND_POWER_TO_SOCIAL_FRIEND'):
        return 'SSPKG_SEND_POWER_TO_SOCIAL_FRIEND'
    
    if hash == StringHash.calculate_hash('SSPKG_SEND_POWER_TO_SOCIAL_FRIEND_FROM_CROSS'):
        return 'SSPKG_SEND_POWER_TO_SOCIAL_FRIEND_FROM_CROSS'
    
    if hash == StringHash.calculate_hash('SSPKG_SEND_POWER_TO_SOCIAL_FRIEND_CROSS'):
        return 'SSPKG_SEND_POWER_TO_SOCIAL_FRIEND_CROSS'
    
    if hash == StringHash.calculate_hash('SSPKG_SOCIAL_FRIEND_POWER_ADD'):
        return 'SSPKG_SOCIAL_FRIEND_POWER_ADD'
    
    if hash == StringHash.calculate_hash('SSDT_SEND_POSER_TO_SOCIAL_FRIEND'):
        return 'SSDT_SEND_POSER_TO_SOCIAL_FRIEND'
    
    if hash == StringHash.calculate_hash('SSPKG_RECV_POWER_FROM_SOCIAL_FRIEND'):
        return 'SSPKG_RECV_POWER_FROM_SOCIAL_FRIEND'
    
    if hash == StringHash.calculate_hash('SSPKG_SOCIAL_FRIEND_INFO_CHANGE'):
        return 'SSPKG_SOCIAL_FRIEND_INFO_CHANGE'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_INFO_REQUEST'):
        return 'SSPKG_FRIEND_INFO_REQUEST'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_CROSS_INFO_RESPONSE_TO_CROSS'):
        return 'SSPKG_FRIEND_CROSS_INFO_RESPONSE_TO_CROSS'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_CROSS_INFO_RESPONSE_TO_CROSS_TO_FRIEND'):
        return 'SSPKG_FRIEND_CROSS_INFO_RESPONSE_TO_CROSS_TO_FRIEND'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_CROSS_INFO_RESPONSE'):
        return 'SSPKG_FRIEND_CROSS_INFO_RESPONSE'
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_APPLY_INFO'):
        return 'SSDT_FRIEND_APPLY_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_FRIEND_RECOMMAND_INFO'):
        return 'SSDT_FRIEND_RECOMMAND_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_PLAYER_FRIEND_INFO'):
        return 'SSDT_PLAYER_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_OPT_FRIEND_REQ'):
        return 'SSPKG_OPT_FRIEND_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_OPT_FRIEND_RES'):
        return 'SSPKG_OPT_FRIEND_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_LOGIN_FRIEND_SVR_REQ'):
        return 'SSPKG_LOGIN_FRIEND_SVR_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_LOGIN_FRIEND_SVR_RES'):
        return 'SSPKG_LOGIN_FRIEND_SVR_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_INFO_CHG'):
        return 'SSPKG_FRIEND_INFO_CHG'
    
    if hash == StringHash.calculate_hash('SSDT_RELATION_INFO'):
        return 'SSDT_RELATION_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_SOCIAL_RELATION_INFO'):
        return 'SSDT_SOCIAL_RELATION_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_INVITED_REWARD_GOT'):
        return 'SSDT_INVITED_REWARD_GOT'
    
    if hash == StringHash.calculate_hash('SSDT_INVITED_FRIEND_INFO'):
        return 'SSDT_INVITED_FRIEND_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_INVITED_TOTAL_INFO'):
        return 'SSDT_INVITED_TOTAL_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_ASSISTANT_HERO_INFO'):
        return 'SSDT_ASSISTANT_HERO_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_SEND_POWER_RECORD'):
        return 'SSDT_SEND_POWER_RECORD'
    
    if hash == StringHash.calculate_hash('DB_FRIEND_BLOB'):
        return 'DB_FRIEND_BLOB'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_APPLYLIST_CHG'):
        return 'SSPKG_FRIEND_NOTIFY_APPLYLIST_CHG'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG'):
        return 'SSPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER'):
        return 'SSPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER'):
        return 'SSPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY'):
        return 'SSPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_RECV_POWER_ALL_REQ'):
        return 'SSPKG_FRIEND_RECV_POWER_ALL_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_RECV_POWER_ALL_RES'):
        return 'SSPKG_FRIEND_RECV_POWER_ALL_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_SEND_POWER_ALL_REQ'):
        return 'SSPKG_FRIEND_SEND_POWER_ALL_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_FRIEND_SEND_POWER_ALL_RES'):
        return 'SSPKG_FRIEND_SEND_POWER_ALL_RES'
    
    if hash == StringHash.calculate_hash('PKG_FRIEND_DISP_INFO_CHG'):
        return 'PKG_FRIEND_DISP_INFO_CHG'
    
    if hash == StringHash.calculate_hash('FRIEND_BROADCAST_DETAIL'):
        return 'FRIEND_BROADCAST_DETAIL'
    
    if hash == StringHash.calculate_hash('PKG_FRIEND_BROADCAST'):
        return 'PKG_FRIEND_BROADCAST'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RECOMMAND_FRIEND_REQ'):
        return 'SSPKG_GET_RECOMMAND_FRIEND_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_RECOMMAND_FRIEND_RES'):
        return 'SSPKG_GET_RECOMMAND_FRIEND_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_KICK_PLAYER_ALL_ZONE'):
        return 'SSPKG_KICK_PLAYER_ALL_ZONE'
    
    if hash == StringHash.calculate_hash('DBBLOB_ACTIVITY_INFO'):
        return 'DBBLOB_ACTIVITY_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_DAILY_RECHARGE_INFO'):
        return 'SSDT_DAILY_RECHARGE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_DAILY_RECHARGE_REWARD'):
        return 'DBBLOB_DAILY_RECHARGE_REWARD'
    
    if hash == StringHash.calculate_hash('SSDT_NEWBIE_ACTIVITY_RECHARGE_INFO'):
        return 'SSDT_NEWBIE_ACTIVITY_RECHARGE_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_NEWBIE_ACTIVITY_RECHARGE'):
        return 'DBBLOB_NEWBIE_ACTIVITY_RECHARGE'
    
    if hash == StringHash.calculate_hash('SSPKG_NTF_VIP_CHANGE'):
        return 'SSPKG_NTF_VIP_CHANGE'
    
    if hash == StringHash.calculate_hash('DBBLOB_FRIEND_ASSIST_HERO_INFO'):
        return 'DBBLOB_FRIEND_ASSIST_HERO_INFO'
    
    if hash == StringHash.calculate_hash('DBBLOB_PLAYER_BOSSRUSH_INFO'):
        return 'DBBLOB_PLAYER_BOSSRUSH_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_CLAIM_ASSISTANT_HERO_REWARD'):
        return 'SSPKG_CLAIM_ASSISTANT_HERO_REWARD'
    
    if hash == StringHash.calculate_hash('SSPKG_BOSSRUSH_HIRE_HERO'):
        return 'SSPKG_BOSSRUSH_HIRE_HERO'
    
    if hash == StringHash.calculate_hash('SSDT_WORLD_ACTIVITY_INFO'):
        return 'SSDT_WORLD_ACTIVITY_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_WORLD_DROP_INFO'):
        return 'SSDT_WORLD_DROP_INFO'
    
    if hash == StringHash.calculate_hash('SSDT_GAME_SERVER_MISC_INFO'):
        return 'SSDT_GAME_SERVER_MISC_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_UPDATE_GAME_SERVER_MISC_REQ'):
        return 'SSPKG_UPDATE_GAME_SERVER_MISC_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GAMESVR_MISC_REQ'):
        return 'SSPKG_GET_GAMESVR_MISC_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_GAMESVR_MISC_RES'):
        return 'SSPKG_GET_GAMESVR_MISC_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_RANK_BATTLE_ACTIVITY_REQ'):
        return 'SSPKG_RANK_BATTLE_ACTIVITY_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_REPORT_PLAYER_CHAT_REQ'):
        return 'SSPKG_REPORT_PLAYER_CHAT_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_REPORT_PLAYER_CHAT_RES'):
        return 'SSPKG_REPORT_PLAYER_CHAT_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_QUALIFICATION_RANK_POS_REQ'):
        return 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_RANK_POS_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_QUALIFICATION_RANK_POS_RES'):
        return 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_RANK_POS_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_BASE_INFO_REQ'):
        return 'SSPKG_TOP_BATTLE_BASE_INFO_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_BASE_INFO_RES'):
        return 'SSPKG_TOP_BATTLE_BASE_INFO_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_CHECK_QUALIFICATION_REQ'):
        return 'SSPKG_TOP_BATTLE_CHECK_QUALIFICATION_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_CHECK_QUALIFICATION_RES'):
        return 'SSPKG_TOP_BATTLE_CHECK_QUALIFICATION_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_TOP_BATTLE_STATE_REQ'):
        return 'SSPKG_GET_TOP_BATTLE_STATE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_GET_TOP_BATTLE_STATE_RES'):
        return 'SSPKG_GET_TOP_BATTLE_STATE_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_APPLY_REQ'):
        return 'SSPKG_TOP_BATTLE_APPLY_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_FIGHT_TARGET_REQ'):
        return 'SSPKG_TOP_BATTLE_GET_FIGHT_TARGET_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_FIGHT_TARGET_RES'):
        return 'SSPKG_TOP_BATTLE_GET_FIGHT_TARGET_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_ENTER_DUNGEON_REQ'):
        return 'SSPKG_TOP_BATTLE_ENTER_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_ENTER_DUNGEON_RES'):
        return 'SSPKG_TOP_BATTLE_ENTER_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_UNLOCK_REQ'):
        return 'SSPKG_TOP_BATTLE_UNLOCK_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_BALANCE_REQ'):
        return 'SSPKG_TOP_BATTLE_BALANCE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_BALANCE_RES'):
        return 'SSPKG_TOP_BATTLE_BALANCE_RES'
    
    if hash == StringHash.calculate_hash('SSDT_TOP_BATTLE_REWARD_INFO'):
        return 'SSDT_TOP_BATTLE_REWARD_INFO'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_REWARD_REQ'):
        return 'SSPKG_TOP_BATTLE_REWARD_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_CHALLENGE_NOTIFY_REQ'):
        return 'SSPKG_TOP_BATTLE_CHALLENGE_NOTIFY_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_REQ'):
        return 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_RES'):
        return 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_TOPTHREE_REQ'):
        return 'SSPKG_TOP_BATTLE_GET_TOPTHREE_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_TOPTHREE_RES'):
        return 'SSPKG_TOP_BATTLE_GET_TOPTHREE_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_SEND_ROCKET_REQ'):
        return 'SSPKG_TOP_BATTLE_SEND_ROCKET_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_SEND_ROCKET_RES'):
        return 'SSPKG_TOP_BATTLE_SEND_ROCKET_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_NTF_SEND_ROCKET'):
        return 'SSPKG_TOP_BATTLE_NTF_SEND_ROCKET'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_ROCKET_REWARD_REQ'):
        return 'SSPKG_TOP_BATTLE_GET_ROCKET_REWARD_REQ'
    
    if hash == StringHash.calculate_hash('SSPKG_TOP_BATTLE_GET_ROCKET_REWARD_RES'):
        return 'SSPKG_TOP_BATTLE_GET_ROCKET_REWARD_RES'
    
    if hash == StringHash.calculate_hash('SSPKG_NTF_TOP_BATTLE_ROCKET_RESET'):
        return 'SSPKG_NTF_TOP_BATTLE_ROCKET_RESET'
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_GET_FIGHT_TARGET_REQ'):
        return 'CSPKG_TOP_BATTLE_GET_FIGHT_TARGET_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_GET_FIGHT_TARGET_RES'):
        return 'SCPKG_TOP_BATTLE_GET_FIGHT_TARGET_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_ENTER_DUNGEON_REQ'):
        return 'CSPKG_TOP_BATTLE_ENTER_DUNGEON_REQ'
    
    if hash == StringHash.calculate_hash('CSDT_TOP_BATTLE_DEFENSE_HERO_ATTR'):
        return 'CSDT_TOP_BATTLE_DEFENSE_HERO_ATTR'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_ENTER_DUNGEON_RES'):
        return 'SCPKG_TOP_BATTLE_ENTER_DUNGEON_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_ROUND_BEGIN_REQ'):
        return 'CSPKG_TOP_BATTLE_ROUND_BEGIN_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_ROUND_BEGIN_RES'):
        return 'SCPKG_TOP_BATTLE_ROUND_BEGIN_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_BALANCE_ONEROUND_REQ'):
        return 'CSPKG_TOP_BATTLE_BALANCE_ONEROUND_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_BALANCE_ONEROUND_RES'):
        return 'SCPKG_TOP_BATTLE_BALANCE_ONEROUND_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_BALANCE_RES'):
        return 'SCPKG_TOP_BATTLE_BALANCE_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_BASE_INFO_RES'):
        return 'SCPKG_TOP_BATTLE_BASE_INFO_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_GET_TOP_BATTLE_STATE_REQ'):
        return 'CSPKG_GET_TOP_BATTLE_STATE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_GET_TOP_BATTLE_STATE_RES'):
        return 'SCPKG_GET_TOP_BATTLE_STATE_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_REQ'):
        return 'CSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_RES'):
        return 'SCPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_GET_TOPTHREE_REQ'):
        return 'CSPKG_TOP_BATTLE_GET_TOPTHREE_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_GET_TOPTHREE_RES'):
        return 'SCPKG_TOP_BATTLE_GET_TOPTHREE_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_REFRESH_COUNT_RES'):
        return 'SCPKG_TOP_BATTLE_REFRESH_COUNT_RES'
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_BUY_COUNT_REQ'):
        return 'CSPKG_TOP_BATTLE_BUY_COUNT_REQ'
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_SEND_ROCKET_REQ'):
        return 'CSPKG_TOP_BATTLE_SEND_ROCKET_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_SEND_ROCKET_RES'):
        return 'SCPKG_TOP_BATTLE_SEND_ROCKET_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_TOP_BATTLE_ROCKET'):
        return 'SCPKG_NTF_TOP_BATTLE_ROCKET'
    
    if hash == StringHash.calculate_hash('CSPKG_TOP_BATTLE_GET_ROCKET_REWARD'):
        return 'CSPKG_TOP_BATTLE_GET_ROCKET_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_TOP_BATTLE_GET_ROCKET_REWARD'):
        return 'SCPKG_TOP_BATTLE_GET_ROCKET_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_TOP_BATTLE_ROCKET_CONF'):
        return 'SCPKG_NTF_TOP_BATTLE_ROCKET_CONF'
    
    if hash == StringHash.calculate_hash('SCPKG_NTF_TOP_BATTLE_ROCKET_RESET'):
        return 'SCPKG_NTF_TOP_BATTLE_ROCKET_RESET'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_VIEW_PLAYER_INFO_REQ'):
        return 'CSPKG_CMD_VIEW_PLAYER_INFO_REQ'
    
    if hash == StringHash.calculate_hash('ST_VIEW_PlAYER_HERO_INFO'):
        return 'ST_VIEW_PlAYER_HERO_INFO'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_VIEW_PLAYER_INFO_RES'):
        return 'SCPKG_CMD_VIEW_PLAYER_INFO_RES'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_DUNBALANCE_WORLD_BOSS'):
        return 'SCPKG_CMD_PLAYER_DUNBALANCE_WORLD_BOSS'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_ERROR'):
        return 'SCPKG_CMD_WORLD_BOSS_ERROR'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_PLAYER_WORLD_BOSS_KILL_REWARD'):
        return 'SCPKG_CMD_PLAYER_WORLD_BOSS_KILL_REWARD'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_DAMAGE_RANK_PLAYER'):
        return 'SCPKG_CMD_WORLD_BOSS_DAMAGE_RANK_PLAYER'
    
    if hash == StringHash.calculate_hash('SCPKG_WORLD_BOSS_KILLER_INFO'):
        return 'SCPKG_WORLD_BOSS_KILLER_INFO'
    
    if hash == StringHash.calculate_hash('CSPKG_WORLD_BOSS_KILLER_INFO_REQ'):
        return 'CSPKG_WORLD_BOSS_KILLER_INFO_REQ'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_WORLD_BOSS_STATUS_REQ'):
        return 'CSPKG_CMD_WORLD_BOSS_STATUS_REQ'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_WORLD_BOSS_CHANGE_HERO_REQ'):
        return 'CSPKG_CMD_WORLD_BOSS_CHANGE_HERO_REQ'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_CHANGE_HERO_RES'):
        return 'SCPKG_CMD_WORLD_BOSS_CHANGE_HERO_RES'
    
    if hash == StringHash.calculate_hash('CSDT_WORLD_BOSS_HERO'):
        return 'CSDT_WORLD_BOSS_HERO'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_CHALLENGE_DATA'):
        return 'SCPKG_CMD_WORLD_BOSS_CHALLENGE_DATA'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_STATUS'):
        return 'SCPKG_CMD_WORLD_BOSS_STATUS'
    
    if hash == StringHash.calculate_hash('CSPKG_CMD_UPDATE_WORLD_BOSS'):
        return 'CSPKG_CMD_UPDATE_WORLD_BOSS'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_UPDATE_WORLD_BOSS'):
        return 'SCPKG_CMD_UPDATE_WORLD_BOSS'
    
    if hash == StringHash.calculate_hash('SCPKG_CMD_WORLD_BOSS_DEAD'):
        return 'SCPKG_CMD_WORLD_BOSS_DEAD'
    
    return None

def res(f, pb):
    p = pb.__class__.__name__
    if p == 'SCDT_ACHIEVEMENT_INFO':
        attrs = ['achievement_island_gain_gold', 'achievement_island_gain_crystal', 'achievement_island_gain_money', 'achievement_island_gain_exp_item']
        return f(pb, attrs)
    
    if p == 'SCDT_ACHIEVEMENT_STATISTICS_SYNC':
        attrs = ['statistics_type', 'statistics_value']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ACHIEVEMENT_STATISTICS_SYNC':
        attrs = ['sync_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GET_ACHIEVEMENT_REWARD':
        attrs = ['achievement_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GET_ACHIEVEMENT_REWARD':
        attrs = ['achievement_id', 'reward_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ACHIEVEMENT_COMPELETE':
        attrs = ['achievement_id']
        return f(pb, attrs)
    
    if p == 'SCDT_ACTIVITY_RESOURCE_BOX_INFO':
        attrs = ['last_box_refresh_time', 'gold_box_open_count', 'crystal_box_open_count', 'material_box_open_count']
        return f(pb, attrs)
    
    if p == 'SCDT_ACTIVITY_TIME_RECHARGE_INFO':
        attrs = ['id', 'product_id', 'recharge_flag', 'reward_flag']
        return f(pb, attrs)
    
    if p == 'SCDT_ACTIVITY_OPEN_RECHARGE_INFO':
        attrs = ['id', 'product_id', 'recharge_flag', 'reward_flag']
        return f(pb, attrs)
    
    if p == 'SCDT_ACTIVITY_INFO':
        attrs = ['cumulate_cost_info', 'sect_recharge_info', 'daily_recharge_info', 'activity_prize_draw', 'activity_resource_box', 'time_recharge_info', 'open_recharge_info', 'once_activity_flag']
        return f(pb, attrs)
    
    if p == 'SCDT_ACTIVITY_CONTROL':
        attrs = ['id', 'stat', 'beg_time', 'end_time', 'close_time']
        return f(pb, attrs)
    
    if p == 'CSDT_ACTIVITY_BROADCAST':
        attrs = ['info']
        return f(pb, attrs)
    
    if p == 'CSDT_ACTIVITY_STATUS_BROADCAST':
        attrs = ['activity_id', 'status', 'hint_msg']
        return f(pb, attrs)
    
    if p == 'SCPKG_ACTIVITY_CONTROL':
        attrs = ['activity_control', 'is_world_activity']
        return f(pb, attrs)
    
    if p == 'SCPKG_ACTIVITY_INFO':
        attrs = ['activity_control', 'activity_info', 'world_activity_control']
        return f(pb, attrs)
    
    if p == 'CSDT_BROAD_MSG':
        attrs = ['gm_msg', 'broad_activity', 'broad_activity_status', 'reserve']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_BROADCAST':
        attrs = ['msg_id', 'show_pos', 'broad_msg']
        return f(pb, attrs)
    
    if p == 'SCPKG_GAME_PLAY_MODE_ACTIVITY_INFO':
        attrs = ['closed_dungeon_type']
        return f(pb, attrs)
    
    if p == 'CSPKG_OPEN_RESOURCE_BOX_REQ':
        attrs = ['type']
        return f(pb, attrs)
    
    if p == 'SCPKG_OPEN_RESOURCE_BOX_RES':
        attrs = ['result', 'type', 'reward']
        return f(pb, attrs)
    
    if p == 'SCPKG_ACTIVITY_RESOURCE_BOX_INFO':
        attrs = ['activity_resource_box']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_COUNT_TO_REWARD_REQ':
        attrs = ['type', 'id']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_COUNT_TO_REWARD_RES':
        attrs = ['result', 'type', 'id', 'reward']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_ACTIVITY_DISCOUNT':
        attrs = ['coin_single_discount', 'coin_multi_discount', 'money_single_discount', 'money_multi_discount', 'super_money_multi_discount']
        return f(pb, attrs)
    
    if p == 'SCDT_RECHARGE_REWARD':
        attrs = ['id', 'target_recharge_cnt', 'reward']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_REWARD_DAILY_RECHARGE':
        attrs = ['daily_recharge']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_REWARD_SECT_RECHARGE':
        attrs = ['sect_recharge']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_REWARD_PRIZEDROW_COUNT':
        attrs = ['count_to']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_REWARD_RESOURCE_BOX':
        attrs = ['resource_box']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_REWARD_TIME_RECHARGE':
        attrs = ['time_recharge']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_REWARD_OPEN_RECHARGE':
        attrs = ['open_recharge']
        return f(pb, attrs)
    
    if p == 'CSPKG_ITEM_COLLECT_REQ':
        attrs = ['id']
        return f(pb, attrs)
    
    if p == 'SCPKG_ITEM_COLLECT_RES':
        attrs = ['result', 'id', 'drop_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_TIME_RECHARGE_REWARD_REQ':
        attrs = ['id']
        return f(pb, attrs)
    
    if p == 'SCPKG_TIME_RECHARGE_REWARD_RES':
        attrs = ['result', 'time_recharge_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_TIME_RECHARGE':
        attrs = ['time_recharge_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_OPEN_RECHARGE_REWARD_REQ':
        attrs = ['id']
        return f(pb, attrs)
    
    if p == 'SCPKG_OPEN_RECHARGE_REWARD_RES':
        attrs = ['result', 'open_recharge_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_OPEN_RECHARGE':
        attrs = ['open_recharge_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_ENTER_BOSSRUSH_ROOM_REQ':
        attrs = ['reserve']
        return f(pb, attrs)
    
    if p == 'SCPKG_BOSSRUSH_INFO':
        attrs = ['cur_chaptor_id', 'cur_monster_id', 'cur_sequence', 'last_clear_chaptor_index', 'assistant_hero_cnt_in_dungeon', 'last_clear_time']
        return f(pb, attrs)
    
    if p == 'SCPKG_HP_REMAIN_CHANGE':
        attrs = ['hp_remain']
        return f(pb, attrs)
    
    if p == 'SCPKG_BOSSRUSH_HERO_INFO':
        attrs = ['main_hero_id', 'partner_hero_id']
        return f(pb, attrs)
    
    if p == 'ST_BOSS_RUSH_FRIEND_HERO_DETAIL':
        attrs = ['uid', 'attr_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_ENTER_BOSSRUSH_ROOM_RES':
        attrs = ['result', 'last_enter_time', 'info', 'hero_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_BOSSRUSH_REPLACE_MAIN_HERO':
        attrs = ['heroid']
        return f(pb, attrs)
    
    if p == 'CSPKG_BOSSRUSH_REPLACE_PARTNER_HERO':
        attrs = ['pos', 'heroid']
        return f(pb, attrs)
    
    if p == 'CSPKG_BOSSRUSH_ENTER_DUN':
        attrs = ['chapter_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_BOSSRUSH_ENTER_DUN_RES':
        attrs = ['dungeon_id', 'is_boss', 'monster_id', 'detail']
        return f(pb, attrs)
    
    if p == 'CSPKG_BOSSRUSH_REPLACE_BOSS':
        attrs = []
        return f(pb, attrs)
    
    if p == 'CSPKG_BOSSRUSH_SELECT_HERO_CONFIRM':
        attrs = []
        return f(pb, attrs)
    
    if p == 'SCPKG_BOSSRUSH_REPLACE_BOSS_RES':
        attrs = ['info']
        return f(pb, attrs)
    
    if p == 'CSPKG_REPLACE_ASSISTANT_HERO':
        attrs = ['index', 'heroid', 'uid', 'battle_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_CLEAR_ASSISTANT_HERO':
        attrs = []
        return f(pb, attrs)
    
    if p == 'CSPKG_CLAIM_ASSISTANT_HERO_REWARD':
        attrs = []
        return f(pb, attrs)
    
    if p == 'SCPKG_ASSISTANT_HERO_INFO':
        attrs = ['uid', 'assistant_heroes', 'gold', 'total_assistant_count', 'cur_assistant_count', 'assistant_calc_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_REQUEST_FRIEND_ASSISTANT_HERO':
        attrs = []
        return f(pb, attrs)
    
    if p == 'CSPKG_RESET_CURRENT_BOSSRUSH':
        attrs = []
        return f(pb, attrs)
    
    if p == 'FRIEND_ASSISTANT_HERO':
        attrs = ['uid', 'heroid', 'name', 'fight_capacity', 'rent_gold', 'level', 'battle_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_ASSISSTANT_HERO_CAN_USE':
        attrs = ['uid', 'heros']
        return f(pb, attrs)
    
    if p == 'CSPKGG_REPLACE_FRIEND_ASSISTANT_HERO':
        attrs = ['index', 'heros']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_CURRENT_ASSISSTANT_HERO':
        attrs = ['heros']
        return f(pb, attrs)
    
    if p == 'CSDT_BUILDING_BASE_INFO':
        attrs = ['building_id', 'building_lv', 'level_beg_time', 'level_total_time']
        return f(pb, attrs)
    
    if p == 'CSDT_RES_STORE_INFO':
        attrs = ['res_limit', 'res_type', 'building_info']
        return f(pb, attrs)
    
    if p == 'CSDT_ISLAND_DEFEND_INFO':
        attrs = ['hero_id', 'hero_lv', 'monster_id', 'monster_lv', 'trap_id', 'trap_lv']
        return f(pb, attrs)
    
    if p == 'CSDT_ISLAND_BORNINFO':
        attrs = ['born_speed', 'born_limit', 'last_born_time', 'cur_born_res', 'defend_info']
        return f(pb, attrs)
    
    if p == 'CSDT_ISLAND_INFO':
        attrs = ['res_type', 'building_info', 'born_info']
        return f(pb, attrs)
    
    if p == 'CSDT_ISLAND_GAININFO':
        attrs = ['pvp_gain_gold', 'pvp_gain_crystal', 'pvp_gain_money', 'pvp_gain_exp_item']
        return f(pb, attrs)
    
    if p == 'CSDT_BUILDING_INFO':
        attrs = ['hero_tower_data', 'res_store_data', 'island_data', 'island_gain']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_BUILDING_LEVELUP':
        attrs = ['building_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_BUILDING_LEVELUP_BEG':
        attrs = ['result', 'building_id', 'building_lv', 'level_beg_time', 'level_total_time']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_BUILDING_LEVELUP_END':
        attrs = ['result', 'building_id', 'building_lv']
        return f(pb, attrs)
    
    if p == 'SCDT_BUILDING_SIMPLE_INFO':
        attrs = ['building_id', 'building_lv']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_UNLOCK_BUILDING':
        attrs = ['result', 'building_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_BUILDING_LEVELUP_DIRECTLY':
        attrs = ['building_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ISLAND_BORNRES':
        attrs = ['res_type', 'cur_born_cnt']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_SET_ISLAND_DEFEND':
        attrs = ['building_type', 'hero_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_SET_ISLAND_DEFEND':
        attrs = ['result', 'building_type', 'hero_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GET_ISLAND_RESOURCE':
        attrs = ['building_type']
        return f(pb, attrs)
    
    if p == 'SCDT_ISLAND_RESOURCE':
        attrs = ['res_type', 'res_id', 'res_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GET_ISLAND_RESOURCE':
        attrs = ['result', 'building_type', 'obtain_res']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_MONTHLY_REWARD':
        attrs = ['re_sign']
        return f(pb, attrs)
    
    if p == 'CSDT_GROWTH_FUND_INFO':
        attrs = ['buy_time', 'target_bit', 'reward_bit']
        return f(pb, attrs)
    
    if p == 'CSDT_CUMULATE_RECHARGE_INFO':
        attrs = ['cumulate_recharge_id', 'cumulate_recharge_cnt', 'last_reward_time', 'target_bit', 'reward_bit', 'daily_free_bit', 'daily_buy_bit']
        return f(pb, attrs)
    
    if p == 'CSDT_GROUP_BUY_INFO':
        attrs = ['valid_group_buy_id', 'has_buy_group_id']
        return f(pb, attrs)
    
    if p == 'SCDT_MONTH_CARD_INFO':
        attrs = ['month_card_id', 'buy_time', 'last_reward_time', 'last_get_reward_time', 'remain_days']
        return f(pb, attrs)
    
    if p == 'SCDT_SUPERVALUE_CARD_INFO':
        attrs = ['super_card_id', 'buy_time', 'last_reward_time', 'last_get_reward_time', 'remain_days']
        return f(pb, attrs)
    
    if p == 'CSDT_FIRSTREWARD_INFO':
        attrs = ['is_get_reward', 'is_open', 'first_recharge_cnt']
        return f(pb, attrs)
    
    if p == 'CSDT_FIRSTPURCHASE_INFO':
        attrs = ['product_index', 'is_firstpurchase']
        return f(pb, attrs)
    
    if p == 'CSDT_MONTHCARD_INFO':
        attrs = ['month_card_id', 'buy_time']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_FIRSTPURCHASE_RES':
        attrs = ['firstpurchase_list', 'monthcard_info', 'supervaluecard_info', 'time_recharge_info', 'open_recharge_info']
        return f(pb, attrs)
    
    if p == 'CSDT_BUSINESS_INFO':
        attrs = ['con_login_7days_info', 'con_login_cumulate_info', 'month_login_info', 'growth_fund_info', 'cumulate_recharge_info', 'group_buy_info', 'month_card_info', 'first_purchase_info', 'first_reward_info', 'supervalue_card_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_GROWTH_FUND_INFO':
        attrs = ['growth_fund_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_GROWTH_FUND_REWARD':
        attrs = ['growth_fund_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_CUMULATE_RECHARGE_REWARD':
        attrs = ['cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CUMULATE_RECHARGE_INFO':
        attrs = ['cumulate_recharge_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_CUMULATE_RECHARGE_DAILY_REWARD':
        attrs = ['cumulate_recharge_id', 'is_buy']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_FIRST_REWARD':
        attrs = ['comulate_recharge_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_FIRST_REWARD':
        attrs = ['is_get_reward']
        return f(pb, attrs)
    
    if p == 'SCPKG_BUY_MONTH_CARD_RES':
        attrs = ['result', 'month_card_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_BUY_SUPERVALUE_CARD_RES':
        attrs = ['result', 'supervalue_card_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_CUMULATECOST_REWARD':
        attrs = ['bit_pos']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_CUMULATECOST_REWARD':
        attrs = ['result', 'bit_pos', 'cumulatecost_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_CUMULATECOST':
        attrs = ['cumulatecost_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_DISP_CHATMSG':
        attrs = ['from', 'msg_type', 'msg_data', 'result', 'from_role_id', 'sender_cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_GROUP_BUY_REQ':
        attrs = ['group_buy_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_PRIZE_DRAW_FREE_INFO_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_REMOVE_PRIVATE_MSG':
        attrs = ['result', 'target_uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_GROUP_BUY_RES':
        attrs = ['result', 'group_buy_info']
        return f(pb, attrs)
    
    if p == 'SCDT_VIP_PRIVILEGE':
        attrs = ['type', 'used_times']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_VIP_REFRESH':
        attrs = ['result', 'privilege_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_GROUP_BUY_BEG':
        attrs = ['group_buy_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_GROUP_BUY_END':
        attrs = ['group_buy_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_GROUP_BUY_REFRESH':
        attrs = ['group_buy_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_FIRST_REWARD_ACHIEVEMENT':
        attrs = ['is_get_reward', 'is_open', 'first_recharge_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_SECT_REWARD_INFO':
        attrs = ['sect_recharge_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_DAILY_REWARD_INFO':
        attrs = ['daily_recharge_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_SECT_RECHARGE_REWARD':
        attrs = ['bit_pos']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_SECT_RECHARGE_REWARD':
        attrs = ['result', 'bit_pos', 'sect_recharge_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_DAILY_RECHARGE_REWARD':
        attrs = ['bit_pos']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_DAILY_RECHARGE_REWARD':
        attrs = ['result', 'bit_pos', 'daily_recharge_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_MONTHCARD_REWARD':
        attrs = ['reserved']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_MONTHCARD_REWARD':
        attrs = ['result', 'month_card_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_MONTHCARD_REFRESH':
        attrs = ['monthcard_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_SUPERVALUECARD_REWARD':
        attrs = ['supervalue_card_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_SUPERVALUECARD_REWARD':
        attrs = ['result', 'supervalue_card_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_SUPERVALUECARD_REFRESH':
        attrs = ['supervalue_info']
        return f(pb, attrs)
    
    if p == 'SCDT_VIP_DISCOUNT_INFO':
        attrs = ['id', 'daily_buy_cost', 'daily_buy_cost_discount', 'daily_buy_cost_real']
        return f(pb, attrs)
    
    if p == 'SCPKG_VIP_DAILY_BUY_DISCOUNT':
        attrs = ['discount_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_REMOVE_PRIVATE_MSG':
        attrs = ['target_uid']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_CHATMSG':
        attrs = ['msg_data', 'msg_type', 'target_uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_CHATMSG':
        attrs = ['from_role_id', 'from', 'msg_data', 'msg_type', 'msg_time', 'sender_cumulate_recharge_id', 'to_role_id', 'is_system']
        return f(pb, attrs)
    
    if p == 'SCPKG_CHAT_BAN_ERROR':
        attrs = ['left_chat_ban_time']
        return f(pb, attrs)
    
    if p == 'SCPKG_CHAT_FAST_ERROR':
        attrs = ['left_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_REPORT_PLAYER_CHAT_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'NOTIFY_CITY_REWARD_ACQUIRED':
        attrs = ['rewardInfo']
        return f(pb, attrs)
    
    if p == 'REQ_CITY_REWARD':
        attrs = ['rewardInfo']
        return f(pb, attrs)
    
    if p == 'RES_CITY_REWARD':
        attrs = ['result', 'rewardInfo']
        return f(pb, attrs)
    
    if p == 'SCDT_CONTINUE_LOGIN_INFO':
        attrs = ['continue_days', 'last_record_time', 're_signable_days', 'get_reward_bit']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_CONLOGIN_REWARD':
        attrs = ['con_login_type', 'day_num_reward']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_CONLOGIN_REWARD':
        attrs = ['result', 'con_login_type', 'con_login_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_CONLOGIN_REWARD':
        attrs = ['result', 'con_login_type', 'con_login_info']
        return f(pb, attrs)
    
    if p == 'CS_3RD_PLAFFORM_FRIEND_GET':
        attrs = ['platform', 'uid_3rd', 'time_stamp']
        return f(pb, attrs)
    
    if p == 'CS_BIND_3RD_PLATFORM_ID':
        attrs = ['uid_3rd', 'platform']
        return f(pb, attrs)
    
    if p == 'MessageData':
        attrs = ['type_hash', 'msg_str', 'is_zip']
        return f(pb, attrs)
    
    if p == 'MessagePack':
        attrs = ['msgs']
        return f(pb, attrs)
    
    if p == 'SCPKG_CONNECT_KEEP':
        attrs = ['text']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_CLT_SETBITMARK_REQ':
        attrs = ['clt_bit_mark']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_SET_STORYBIT_REQ':
        attrs = ['dun_id', 'story_bit']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GM_REQ':
        attrs = ['type']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GM_TEXT_REQ':
        attrs = ['gm_text', 'param']
        return f(pb, attrs)
    
    if p == 'CSDT_GM_PARAMOBJ':
        attrs = ['param_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_VERIFY_ROOM_COMPLETE_TIME':
        attrs = ['result', 'dun_id', 'dun_type', 'room_id', 'actual_time', 'limited_complete_time', 'hero_ability', 'room_base_ability', 'complete_time_base_value', 'hero_id', 'hero_level', 'hero_buffer_dun_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_VERIFY_ROOM_COMPLETE_TIME_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_HEARTBEAT':
        attrs = ['text']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_ERROR':
        attrs = ['error_code']
        return f(pb, attrs)
    
    if p == 'SCPKG_ERROR_MSG':
        attrs = ['error_msg', 'msg_hash']
        return f(pb, attrs)
    
    if p == 'SCDT_NOTIFY_DATA':
        attrs = ['title', 'link', 'content']
        return f(pb, attrs)
    
    if p == 'SCDT_NOTIFY_INFO':
        attrs = ['notify_id', 'name', 'beg_time', 'end_time', 'is_display', 'notify']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_UNLOCKDUN_UNTILID':
        attrs = ['dun_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_USE_ITEM':
        attrs = ['hero_id', 'item_id', 'item_cnt']
        return f(pb, attrs)
    
    if p == 'CSDT_PACKOBJ_CHG_INFO':
        attrs = ['tab_pos', 'item_pos', 'type', 'stat', 'base_id', 'count', 'func_type']
        return f(pb, attrs)
    
    if p == 'SCPKG_ACT_PACKOBJ_CHG':
        attrs = ['type', 'pack_obj_chg_info']
        return f(pb, attrs)
    
    if p == 'CSDT_POS_COUNT_INFO':
        attrs = ['pos', 'count']
        return f(pb, attrs)
    
    if p == 'CSDT_PACKAGE_POS_INFO':
        attrs = ['tab_pos', 'st_pos_count']
        return f(pb, attrs)
    
    if p == 'CSDT_POS_COUNT':
        attrs = ['st_package_pos']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_SLOT_OPEN':
        attrs = ['slot_id', 'type']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_EXP_CHANGE':
        attrs = ['hero_id', 'cur_level', 'cur_exp']
        return f(pb, attrs)
    
    if p == 'CS_RECONNECT':
        attrs = ['reconnect_key', 'reconnect_pos', 'client_send_seq', 'client_recv_seq']
        return f(pb, attrs)
    
    if p == 'SCNOTIFY_RECONNECT_INFO':
        attrs = ['can_connect', 'can_reconnect', 'reconnect_pos', 'reconnect_key', 'game_key', 'server_send_seq', 'server_recv_seq']
        return f(pb, attrs)
    
    if p == 'SC_RECONNECT_EXTRA_INFO':
        attrs = ['max_hang_sec', 'zip_byte', 'enable_pack']
        return f(pb, attrs)
    
    if p == 'CSPKG_GIFT_CODE_REQ':
        attrs = ['gift_code', 'gift_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_GIFT_CODE_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'CSPKG_PURCHASE_REQ':
        attrs = ['product_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_PURCHASE_ACCEPT':
        attrs = ['result', 'trade_code', 'product_id']
        return f(pb, attrs)
    
    if p == 'CSDT_PURCHASE_REQUEST_DELIVERY':
        attrs = ['product_id', 'sn', 'trade_code', 'transactionReceipt', 'platform']
        return f(pb, attrs)
    
    if p == 'SCDT_PURCHASE_REQUEST_DELIVERY_FINISH':
        attrs = ['sn']
        return f(pb, attrs)
    
    if p == 'CSPkgHead':
        attrs = ['head_len', 'body_len', 'unique_id', 'cmd', 'upward_seq_no', 'check_sum']
        return f(pb, attrs)
    
    if p == 'CSDT_ERROR':
        attrs = ['reserve']
        return f(pb, attrs)
    
    if p == 'SCPKG_DYNAMIC_CONFIG_REFRESH':
        attrs = ['month_card_switch', 'growth_fund_switch', 'login_7day_switch', 'first_purchase_gift_switch', 'cdkey_switch', 'enable_pay_switch', 'user_action_switch', 'third_pay_switch', 'share_switch', 'buy_bless_count_switch', 'enable_friend_invite', 'world_boss_switch', 'cumulate_cost_switch', 'pve_double_switch', 'elite_double_switch', 'power_double_switch', 'skill_double_switch', 'boss_rush_switch', 'equip_fusion_switch', 'multiplayer_pve_switch', 'talent_switch', 'daily_recharge_reward', 'cumulate_recharge_reward', 'pve_activity_drop', 'elite_activity_drop', 'elite_activity_drop_exp', 'elite_exp_drop_double', 'prize_draw_activity', 'resource_box_activity', 'manul_drop', 'replay_switch', 'equip_reset_switch', 'special_activity_switch', 'factor_switch', 'top_battle_3v3_switch']
        return f(pb, attrs)
    
    if p == 'CSDT_UI_OPT':
        attrs = ['ui_type', 'ui_from_type', 'click_num', 'stay_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_USER_ACTION_LOG':
        attrs = ['action', 'sub_action']
        return f(pb, attrs)
    
    if p == 'CSPKG_USER_CONFIG':
        attrs = ['enable_notification']
        return f(pb, attrs)
    
    if p == 'CSPKG_SELL_RUBBISH':
        attrs = ['reserve']
        return f(pb, attrs)
    
    if p == 'CSPKG_KICK_CLIENT':
        attrs = ['reason']
        return f(pb, attrs)
    
    if p == 'SCPKG_DO_SOMETHING':
        attrs = ['filePath']
        return f(pb, attrs)
    
    if p == 'CSPKG_DO_SOMETHING_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'CSPKG_IOS_ACCOUNT':
        attrs = ['public_key_url', 'signature', 'salt', 'timestamp']
        return f(pb, attrs)
    
    if p == 'CSPKG_DIR_WORLD_INFO':
        attrs = ['unique_id', 'version', 'token37', 'pid', 'gid', 'server_id', 'sign_fl', 'uuid_fl', 'timestamp_fl', 'login_terminal', 'gamecenter_id', 'ios_device_uid', 'ios_account', 'not_auto_bind']
        return f(pb, attrs)
    
    if p == 'SSDT_WORLD_HERO':
        attrs = ['heroid', 'herolv', 'herogrowup']
        return f(pb, attrs)
    
    if p == 'SCDT_WORLD_STAT':
        attrs = ['world_id', 'world_name', 'conn_ip', 'conn_port', 'is_open', 'open_time', 'is_recommend', 'stat', 'is_timeout', 'curpve', 'heroinfo']
        return f(pb, attrs)
    
    if p == 'SCPKG_DIR_WORLD_INFO':
        attrs = ['result', 'unique_id', 'display_name', 'last_login_world', 'last_login_time', 'world_stat', 'strategy', 'error_msg', 'first_bind', 'need_new_version']
        return f(pb, attrs)
    
    if p == 'CSPKG_IOS_BIND_GAMECENTER':
        attrs = ['uid', 'gamecenter_id', 'ios_device_uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_IOS_BIND_GAMECENTER_RES':
        attrs = ['uid', 'bind_state=2;', 'gamecenter_id', 'ios_device_uid']
        return f(pb, attrs)
    
    if p == 'CSPKG_ACT_ALOGIN':
        attrs = ['log_type', 'log_plat', 'log_terminal', 'device_type', 'device_sys_ver', 'resolution_wide', 'resolution_high', 'unique_id', 'anon_id', 'channel_id', 'cli_version', 'device_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_ACT_ALOGIN_ADDITIONAL':
        attrs = ['app_hooked']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ALOGIN':
        attrs = ['result_id', 'client_ip', 'client_port', 'log_type', 'log_plat', 'anon_id', 'uid', 'unique_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_GAMECENTER_PRELOGIN':
        attrs = ['ios_device_uid', 'ios_device_uid_last', 'gamecenter_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_GAMECENTER_PRELOGIN_RES':
        attrs = ['bind_state=1;', 'uin_key', 'uin_main']
        return f(pb, attrs)
    
    if p == 'CSDT_DUN_UNLOCK_DATA':
        attrs = ['dungeon_id', 'dun_level', 'stat', 'challenge_cnt', 'challenge_time', 'story_bit', 'best_evaluation', 'elite_challenge_count', 'elite_drop_exp']
        return f(pb, attrs)
    
    if p == 'CSDT_PVE_CHALLENGE_DATA':
        attrs = ['npc_cnt', 'player_cnt', 'unlock_data', 'elite_buy_count']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_RELIVE_REQ':
        attrs = ['hero_id', 'dun_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_RELIVE_RES':
        attrs = ['result', 'hero_id', 'dun_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_PAUSE_GAME':
        attrs = ['hero_id', 'dun_id', 'room_id', 'pause_tick']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_CONTINUE_GAME':
        attrs = ['hero_id', 'dun_id', 'room_id', 'pause_tick']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_CONTINUE_GAME':
        attrs = ['dun_id', 'room_id', 'cur_room_interval_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_ENTER_ROOM':
        attrs = ['hero_id', 'dun_id', 'room_id', 'clt_room_interval']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ENTER_ROOM':
        attrs = ['result', 'hero_id', 'dun_id', 'room_id', 'beg_time', 'interval_time']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROOM_TIMEOUT':
        attrs = ['dun_id', 'room_id', 'beg_time', 'cur_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_DUNGEON_UNLOCK':
        attrs = ['city_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_UNLOCK_DUNGEON':
        attrs = ['unlock_data']
        return f(pb, attrs)
    
    if p == 'CSPKG_WIPE_OUT_PVE_DUNGEON_REQ':
        attrs = ['dun_id', 'wipe_out_count', 'hero_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_WIPE_OUT_PVE_DUNGEON_RES':
        attrs = ['result', 'dun_id', 'reward_gold', 'reward_crystal', 'normal_drop_info', 'extra_drop_info', 'elite_drop_exp', 'activity_drop_info', 'hero_id', 'hero_lv', 'reward_exp']
        return f(pb, attrs)
    
    if p == 'CSPKG_BUY_WIPE_OUT_ITEM_REQ':
        attrs = ['level_Index']
        return f(pb, attrs)
    
    if p == 'SCPKG_BUY_WIPE_OUT_ITEM_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'SCDT_PVEUNLOCK_INFO':
        attrs = ['type', 'id', 'level']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PVEUNLOCK':
        attrs = ['dun_id', 'unlock_info']
        return f(pb, attrs)
    
    if p == 'ST_ELITE_DUNGEON_CHANCE_INFO':
        attrs = ['dun_id', 'elite_challenge_count']
        return f(pb, attrs)
    
    if p == 'SCPKG_REFRESH_ELITE_DUNGEON_INFO':
        attrs = ['elite_buy_count', 'elite_dungeon_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_BUY_ELITE_COUNT_REQ':
        attrs = ['dun_id']
        return f(pb, attrs)
    
    if p == 'CSDT_ENTER_ONLINE_BATTLE_DUN_PARAM':
        attrs = ['is_host', 'host_player_score', 'guest_player_score', 'scene_index']
        return f(pb, attrs)
    
    if p == 'CSDT_ENTER_ENDLESS_DUN_PARAM':
        attrs = ['match_index']
        return f(pb, attrs)
    
    if p == 'CSDT_ENTER_MULTIPLAYER_PVE_DUN_PARAM':
        attrs = ['res_msg']
        return f(pb, attrs)
    
    if p == 'CSDT_ENTER_DUN_PARAM':
        attrs = ['endless_dun_param', 'multiplayer_pve_dun_param', 'online_battle_dun_param']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_PLAYER_ENTERDUN':
        attrs = ['dun_type', 'dun_id', 'hero_id', 'enter_dun_param']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_PLAYER_ENTERDUN_INDUN':
        attrs = ['dun_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_QUIT_DUN':
        attrs = ['dun_id', 'pve_result']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_QUIT_DUN':
        attrs = ['result', 'hero_id', 'dun_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_ENTER_PRACTICEDUN':
        attrs = ['hero_id', 'chapter_id', 'section_id', 'enter_hero_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ENTER_PRACTICEDUN':
        attrs = ['result', 'hero_id', 'chapter_id', 'section_id', 'dun_id', 'enter_hero_id']
        return f(pb, attrs)
    
    if p == 'CSDT_CMD_DUN_EVALUATEINFO':
        attrs = ['dun_time', 'remain_hprate', 'max_combo']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_PVE_DUNBALANCE':
        attrs = ['dun_id', 'pick_money_over_hit', 'pick_res_over_hit', 'pick_money_kill_mst', 'pick_res_kill_mst', 'style_total_count', 'style_times', 'evaluate_info']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_BOSSRUSH_DUNBALANCE':
        attrs = ['dun_id', 'pick_money_over_hit', 'pick_res_over_hit', 'pick_money_kill_mst', 'pick_res_kill_mst', 'style_total_count', 'style_times', 'evaluate_info', 'hero_hp', 'hp_remain']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_ENDLESS_DUNBALANCE':
        attrs = ['dun_id', 'kill_mst_score', 'overhit_score', 'time_score', 'style_total_count', 'style_times']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_PRACTICE_DUNBALANCE':
        attrs = ['result', 'dun_id', 'hero_id', 'chapter_id', 'section_id']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_ONLINE_BATTLE_DUNBALANCE':
        attrs = ['result', 'param']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_WORLD_BOSS_DUNBALANCE':
        attrs = ['week_day', 'cur_boss_index']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_MULTIPLAYER_PVE_DUNBALANCE':
        attrs = ['succeed']
        return f(pb, attrs)
    
    if p == 'SCPKG_DUNGEON_COMBAT_SWITCH':
        attrs = ['combat_switch']
        return f(pb, attrs)
    
    if p == 'CSDT_DUNGEON_COMBAT_RECORD':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'CSPKG_DUNGEON_COMBAT_REPORT':
        attrs = ['record']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_DUNBALANCE':
        attrs = ['pve_balance', 'endless_balance', 'practice_balance', 'online_battle_balance', 'world_boss_balance', 'bossrush_balance', 'multiplayer_pve_balance', 'brief']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_PLAYER_DUNBALANCE':
        attrs = ['dun_type', 'balance_info', 'change_reason', 'change_param']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PRACTICE_DUNBALANCE':
        attrs = ['quest_id', 'dun_id', 'hero_id', 'chapter_id', 'section_id', 'reward_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PLAYER_DUNBALANCE_ENDLESS':
        attrs = ['dun_id', 'reward_crystal', 'score', 'floors', 'kill_mst_score', 'overhit_score', 'time_score', 'style_score', 'drop_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PLAYER_DUNBALANCE_ONLINE_BATTLE':
        attrs = ['finished', 'online_battle_info', 'win_point_before', 'win_point_after']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PLAYER_DUNBALANCE':
        attrs = ['hero_id', 'hero_level', 'dun_id', 'dun_time', 'dun_evaluate', 'evaluate_info', 'pick_money_overhit', 'pick_res_overhit', 'pick_money_kill_mst', 'pick_res_kill_mst', 'reward_gold_time', 'style_reward_crystal', 'reward_gold', 'reward_crystal', 'reward_exp', 'unlock_dun_id', 'dun_unlock_info', 'drop_info', 'activity_drop_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PLAYER_ENTERDUN':
        attrs = ['hero_id', 'dun_id', 'result', 'level', 'dun_type']
        return f(pb, attrs)
    
    if p == 'CSDT_TOWER_HERO':
        attrs = ['hero_id', 'hero_grow_up', 'hero_lv', 'remain_hp', 'max_score', 'max_floor', 'max_score_ever', 'max_floor_ever', 'entered_today', 'wipeout_today', 'match_index']
        return f(pb, attrs)
    
    if p == 'CSDT_TOWER_HERO_INFO':
        attrs = ['hero_hp']
        return f(pb, attrs)
    
    if p == 'CSDT_TOWER_CHALLENGE_DATA':
        attrs = ['max_score_ever_sum', 'max_level_ever', 'reset_cnt', 'hero_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ENDLESS_INFO':
        attrs = ['endless_info']
        return f(pb, attrs)
    
    if p == 'CSDT_REPORT_MST_INFO':
        attrs = ['id', 'lv']
        return f(pb, attrs)
    
    if p == 'CSPKG_REPORT_ENDLESS_ROOM_SCORE':
        attrs = ['result', 'dun_id', 'room_id', 'score', 'cur_battle_hero_hp', 'kill_mst_id', 'fighting_state']
        return f(pb, attrs)
    
    if p == 'SCPKG_REPORT_ENDLESS_ROOM_SCORE':
        attrs = ['dun_id', 'room_id', 'score', 'floor', 'reward_info', 'drop_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ENDLESS_INTERVAL_BEG':
        attrs = ['interval_beg_time']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ENDLESS_INTERVAL_END':
        attrs = ['reserve']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_RESET_ENDLESS_ROOM':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_RESET_ENDLESS_ROOM':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ENDLESS_REFRESH':
        attrs = ['challenge_cnt', 'reset_cnt']
        return f(pb, attrs)
    
    if p == 'CSPKG_WIPE_OUT_ENDLESS_REQ':
        attrs = ['hero_id', 'floor', 'match_index']
        return f(pb, attrs)
    
    if p == 'SCPKG_WIPE_OUT_ENDLESS_RES':
        attrs = ['result', 'floor', 'score', 'reward_crystal', 'reward_gold', 'drop_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_AFTER_WIPE_OUT_CANCEL_ENDLESS_REQ':
        attrs = ['hero_id', 'floor']
        return f(pb, attrs)
    
    if p == 'SCPKG_AFTER_WIPE_OUT_CANCEL_ENDLESS_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'CSDT_EQUIP_CHG_INFO':
        attrs = ['item_pos', 'base_id', 'count', 'cur_exp', 'level', 'wakeup', 'growup', 'bind_to_hero']
        return f(pb, attrs)
    
    if p == 'SCPKG_EQUIP_ALL':
        attrs = ['type', 'change_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_EQUIP_CHG':
        attrs = ['type', 'change_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_EQUIP_GOT_RECORD':
        attrs = ['got_record_used', 'got_record']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_WEAR_FROM_PACKAGE':
        attrs = ['hero_id', 'equip_pos', 'eat_old']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_UNWEAR':
        attrs = ['hero_id', 'equiped_pos']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_HERO_ATTR':
        attrs = ['hero_id', 'attrs']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_REARRANGE':
        attrs = []
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_LEVELUP':
        attrs = ['hero_id', 'equip_pos', 'pack_pos']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_WAKEUP':
        attrs = ['hero_id', 'equip_pos']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_GROWUP_MATERIAL':
        attrs = ['equip_pos']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_GROWUP':
        attrs = ['hero_id', 'equip_pos', 'material']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_SELL':
        attrs = ['count', 'equip_pos']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_BATCH_SELL':
        attrs = ['equip_color']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIPED_INFO':
        attrs = ['hero_id', 'equiped_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_USE_EQUIP_BOX':
        attrs = ['hero_id', 'box_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_USE_EQUIP_BOX':
        attrs = ['result', 'hero_id', 'box_id', 'drop_info']
        return f(pb, attrs)
    
    if p == 'CSDT_EQUIP_POS_INFO':
        attrs = ['pack_pos', 'count']
        return f(pb, attrs)
    
    if p == 'CSPKG_PURIFY_EQUIP_POS':
        attrs = ['hero_id', 'equip_pos', 'equip_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_PURIFY_EQUIP_POS':
        attrs = ['result', 'hero_id', 'equip_pos', 'level', 'exp']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_FUSION_REQ':
        attrs = ['material_equip_pos', 'hero_id', 'addtional_use_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_EQUIP_FUSION_RES':
        attrs = ['result', 'gen_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_BUY_EQUIP_FUSION_ADDTION_REQ':
        attrs = ['target_price', 'addtional_index', 'buy_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_BUY_EQUIP_FUSION_ADDTION_RES':
        attrs = ['result', 'gen_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_RESET_RESULT_REQ':
        attrs = ['equip_pos']
        return f(pb, attrs)
    
    if p == 'SCPKG_EQUIP_RESET_RESULT_RES':
        attrs = ['result', 'price']
        return f(pb, attrs)
    
    if p == 'CSPKG_EQUIP_RESET_CONFIRM_REQ':
        attrs = ['equip_pos']
        return f(pb, attrs)
    
    if p == 'SCPKG_EQUIP_RESET_CONFIRM_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'SCDT_NOTIFY_FACTOR_DATA':
        attrs = ['factor_id', 'count']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_FACTOR_CHANGE':
        attrs = ['type', 'info']
        return f(pb, attrs)
    
    if p == 'SCDT_NOTIFY_HERO_FACTOR_DATA':
        attrs = ['hero_id', 'factor_slot_info', 'factor_skill_id', 'factor_attr_id', 'factor_skill_ratio', 'factor_skill_cooldown']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_HERO_FACTOR':
        attrs = ['info']
        return f(pb, attrs)
    
    if p == 'CSPKG_REMOVE_EMBEDED_FACTOR':
        attrs = ['hero_id', 'slot_index']
        return f(pb, attrs)
    
    if p == 'CSPKG_EMBED_FACTOR':
        attrs = ['hero_id', 'factor_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_REMOVE_ALL_EMBEDED_FACTORS':
        attrs = ['hero_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_UPGRADE_ALL_FACTORS':
        attrs = []
        return f(pb, attrs)
    
    if p == 'CSPKG_UPGRADE_FACTOR':
        attrs = ['factor_id', 'amount']
        return f(pb, attrs)
    
    if p == 'SCDT_FRIEND_BASE_INFO':
        attrs = ['uid', 'name', 'head_photo', 'vip_level', 'last_logout_time', 'fighting_capacity', 'agree_time', 'endless_score', 'greatest_pve_dun_id']
        return f(pb, attrs)
    
    if p == 'CSDT_FRIEND_ID':
        attrs = ['anon_id']
        return f(pb, attrs)
    
    if p == 'CSDT_FRIEND_HERO_INFO':
        attrs = ['hero_id', 'level']
        return f(pb, attrs)
    
    if p == 'CSDT_FRIEND_INFO':
        attrs = ['anon_id', 'name', 'uid', 'endless_floor', 'endless_score', 'hero_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_OPT_FRIEND_REQ':
        attrs = ['target_uid', 'opt_type']
        return f(pb, attrs)
    
    if p == 'SCPKG_OPT_FRIEND_RES':
        attrs = ['result', 'opt_type', 'target_info']
        return f(pb, attrs)
    
    if p == 'SCDT_FRIEND_INFO':
        attrs = ['base_info', 'receive_power_state', 'has_send_power']
        return f(pb, attrs)
    
    if p == 'SCDT_FRIEND_APPLY_INFO':
        attrs = ['base_info', 'apply_time']
        return f(pb, attrs)
    
    if p == 'SCDT_FRIEND_RECOMMAND_INFO':
        attrs = ['base_info', 'is_applied']
        return f(pb, attrs)
    
    if p == 'SCDT_PLAYER_FRIEND_INFO':
        attrs = ['friend_info', 'apply_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_LOGIN_INFO':
        attrs = ['time', 'recv_power_times_today', 'friend_info', 'self_info']
        return f(pb, attrs)
    
    if p == 'SCDT_SOCIAL_FRIEND_INFO':
        attrs = ['friend_info', 'uid_3rd', 'world_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_SOCIAL_FRIEND_INFO':
        attrs = ['time_stamp', 'platform', 'social_friend']
        return f(pb, attrs)
    
    if p == 'SCPKG_SOCIAL_FRIEND_INFO_CHANGE':
        attrs = ['social_friend']
        return f(pb, attrs)
    
    if p == 'CSPKG_RECV_POWER_FROM_SOCIAL_FRIEND':
        attrs = ['uid_3rd']
        return f(pb, attrs)
    
    if p == 'SCPKG_NOTIFY_SOCIAL_FRIEND_ERROR':
        attrs = ['error_code']
        return f(pb, attrs)
    
    if p == 'CSPKG_SEND_POWER_TO_SOCIAL_FRIEND':
        attrs = ['uid_3rd']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_RECOMMAND_FRIEND_REQ':
        attrs = ['uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_RECOMMAND_FRIEND_RES':
        attrs = ['result', 'recommand_info', 'uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_NOTIFY_APPLYLIST_CHG_RES':
        attrs = ['apply_info', 'is_add']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG_RES':
        attrs = ['is_add', 'friend_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER':
        attrs = ['send_time', 'send_friend_uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER':
        attrs = ['recv_power_times_today', 'recv_power_from_friend_uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'CSPKG_FRIEND_RECV_POWER_ALL_REQ':
        attrs = ['recv_power_friend_uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_RECV_POWER_ALL_RES':
        attrs = ['recv_power_success_friend_uid', 'recv_power_faild_friend_uid', 'recv_power_times_today']
        return f(pb, attrs)
    
    if p == 'CSPKG_FRIEND_SEND_POWER_ALL_REQ':
        attrs = ['send_power_friend_uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_SEND_POWER_ALL_RES':
        attrs = ['send_power_success_friend_uid', 'send_power_faild_friend_uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_FRIEND_DISP_INFO_CHG':
        attrs = ['uid', 'last_logout_time', 'vip_level', 'head_photo', 'fighting_capacity', 'endless_score', 'greatest_pve_dun_id']
        return f(pb, attrs)
    
    if p == 'SCDT_INVITE_STATE_INFO':
        attrs = ['invite_code', 'invited', 'invited_friend_cnt', 'reward_got']
        return f(pb, attrs)
    
    if p == 'SCPKG_INVITE_STATE_INFO':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'CSPKG_REQUEST_INVITED_FRIEND':
        attrs = ['time_stamp']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_INVITED_ERROR':
        attrs = ['error_code']
        return f(pb, attrs)
    
    if p == 'SCPKG_INVITED_FRIEND_INFO':
        attrs = ['time_stamp', 'social_friend']
        return f(pb, attrs)
    
    if p == 'CSPKG_REQUEST_INVITE_REWARD':
        attrs = ['reward_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_APPLY_INVITED_CODE':
        attrs = ['invited_code']
        return f(pb, attrs)
    
    if p == 'ST_GANG_CITY_STRONG_POINT_HERO_INFO':
        attrs = ['role_id', 'role_name', 'hero_info']
        return f(pb, attrs)
    
    if p == 'ST_GANG_CITY_STRONG_POINT':
        attrs = ['point_state', 'hero_info']
        return f(pb, attrs)
    
    if p == 'ST_GANG_CITY_INFO':
        attrs = ['id', 'city_state', 'strong_point_info']
        return f(pb, attrs)
    
    if p == 'ST_GANG_CITY':
        attrs = ['small_city', 'moderate_city', 'big_city']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_MEM_INFO':
        attrs = ['mem_role_id', 'mem_role_name', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_MEM_LIST':
        attrs = ['mem_info']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_ATTACK_POINT_INFO':
        attrs = ['city_id', 'strong_point_index']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_MEM_ATTACK_INFO':
        attrs = ['mem_role_id', 'mem_role_name', 'mem_total_fight_cnt', 'mem_win_fight_cnt', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_MEM_ATTACK_LIST':
        attrs = ['mem_info']
        return f(pb, attrs)
    
    if p == 'CSDT_GANG_APPLYLIST_INFO':
        attrs = ['mem_name', 'mem_role_id', 'apply_time', 'mem_rank_pos', 'mem_gang_battle_win_cnt', 'cumulate_recharge_id', 'head_photo']
        return f(pb, attrs)
    
    if p == 'CSDT_GANGSIMPLE_INFO':
        attrs = ['gang_name', 'gang_id', 'gang_leader_name', 'gang_apply_state', 'cond_rank_pos', 'gang_mem_count', 'gang_level', 'gang_score', 'gang_notify', 'is_auto_apply_battle']
        return f(pb, attrs)
    
    if p == 'CSDT_GANGLIST_INFO':
        attrs = ['gang_id', 'gang_name', 'gang_apply_state', 'gang_level', 'gang_score', 'gang_mem_count', 'gang_cond_rank_pos', 'is_in_apply_list', 'gang_avg_rank_pos']
        return f(pb, attrs)
    
    if p == 'CSDT_GANGMEM_INFO':
        attrs = ['mem_role_id', 'mem_name', 'mem_postion', 'mem_gang_battle_win_score', 'mem_rank_pos', 'last_leave_time', 'cumulate_recharge_id', 'gang_bless_info', 'head_photo']
        return f(pb, attrs)
    
    if p == 'CSDT_GANG_SELF_INFO':
        attrs = ['position']
        return f(pb, attrs)
    
    if p == 'CSDT_GANG_BATTLE_HISTORY_MEM_INFO':
        attrs = ['mem_role_id', 'mem_name', 'mem_win_cnt', 'mem_total_cnt', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'CSDT_GANG_BATTLE_HISTORY_MEM_LIST':
        attrs = ['gang_mem_list']
        return f(pb, attrs)
    
    if p == 'CSDT_GANG_BATTLE_HISTORY_INFO':
        attrs = ['battle_time', 'gang_level', 'defense_gang_id', 'defense_gang_name', 'defense_gang_level', 'self_battle_score', 'defense_battle_score', 'mem_list_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_CREATEGANG_REQ':
        attrs = ['gang_name', 'gang_notify', 'is_auto_apply', 'cond_rank_pos']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_CREATEGANG_RES':
        attrs = ['result', 'gang_simple_info', 'self_info', 'left_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GANGLIST_REQ':
        attrs = ['page_start_id', 'page_count']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANGLIST_RES':
        attrs = ['gang_list', 'total_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROLELOGIN_GANG':
        attrs = ['is_have_gang', 'apply_list_count', 'gang_simple_info', 'self_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_APPLY_GANG_REQ':
        attrs = ['gang_name', 'gang_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_APPLY_GANG_RES':
        attrs = ['result', 'gang_id', 'mem_name', 'apply_list_count', 'left_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_QUIT_GANG_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_QUIT_GANG_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'CSPKG_TRANSFER_GANG_LEADER_REQ':
        attrs = ['target_role_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_TRANSFER_GANG_LEADER_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GANG_MEMLIST_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_MEMLIST_RES':
        attrs = ['result', 'gang_id', 'list_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GANG_DETAIL_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_DETAIL_RES':
        attrs = ['result', 'gang_id', 'gang_simple_info', 'list_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_MEM_LIST_CHG_RES':
        attrs = ['del', 'del_type', 'add', 'mem_info', 'gang_mem_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_GANG_BLESS_RANK_CLEAR_RES':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GANG_UPDATE_BASIC_INFO_REQ':
        attrs = ['gang_notify', 'is_auto_apply', 'cond_rank_pos']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_SEARCH_GANG_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_SEARCH_GANG_RES':
        attrs = ['result', 'gang_id', 'gang_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_UPDATE_BASIC_INFO_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GANG_APPROVE_REQ':
        attrs = ['result', 'mem_role_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_APPROVE_RES':
        attrs = ['result', 'mem_name', 'mem_role_id', 'apply_list_count']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GANG_CHAT_REQ':
        attrs = ['msg']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_CHAT_RES':
        attrs = ['from_name', 'msg', 'from_role_id', 'sender_cumulate_recharge_id', 'send_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GANG_APPLYLIST_REQ':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_APPLYLIST_RES':
        attrs = ['apply_list']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_APPROVETOMEM_RES':
        attrs = ['result', 'gang_simple_info', 'self_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_BASIC_INFO_CHG_RES':
        attrs = ['gang_notify', 'gang_apply_state', 'cond_rank_pos', 'gang_score', 'gang_level']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GANG_KICK_MEM_REQ':
        attrs = ['kick_mem_role_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_KICK_MEM_RES':
        attrs = ['result', 'mem_role_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GANG_SET_ELDER_REQ':
        attrs = ['mem_role_id', 'set_or_cancle']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GANG_SET_ELDER_RES':
        attrs = ['result', 'mem_role_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_GANG_BLESS_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_GANG_BLESS_RES':
        attrs = ['result', 'normal_reward', 'extern_reward', 'bless_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_BUY_GANG_BLESS_COUNT_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_REFRESH_GANG_BLESS_INFO_RES':
        attrs = ['gang_bless_count', 'buy_gang_bless_count', 'left_extern_gang_bless_count']
        return f(pb, attrs)
    
    if p == 'CSPKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ':
        attrs = ['rerverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES':
        attrs = ['is_auto_apply_battle']
        return f(pb, attrs)
    
    if p == 'CSPKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ':
        attrs = ['chg_type', 'hero_id', 'city_id', 'strong_point_index', 'hero_slot_index']
        return f(pb, attrs)
    
    if p == 'SCPKG_SET_GANG_CITY_STRONG_POINT_HERO_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'SCPKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES':
        attrs = ['chg_type', 'city_id', 'strong_point_index', 'hero_slot_index', 'hero_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_GANG_CITY_INFO_REQ':
        attrs = ['rerverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_GANG_CITY_INFO_RES':
        attrs = ['result', 'city_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_APPLY_GANG_BATTLE_REQ':
        attrs = ['rerverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_APPLY_GANG_BATTLE_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'SCPKG_GANG_BATTLE_STATE_BROAD':
        attrs = ['state']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_GANG_BATTLE_CITY_REQ':
        attrs = ['is_get_self']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_GANG_BATTLE_CITY_RES':
        attrs = ['result', 'is_get_self', 'self_score', 'target_score', 'target_gang_name', 'target_gang_level', 'city_info', 'target_gang_world_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_GANG_BATTTLE_POINT_BROAD':
        attrs = ['self_score', 'target_score', 'is_self_city', 'city_id', 'strong_point_index', 'point_state']
        return f(pb, attrs)
    
    if p == 'CSPKG_ENTER_GANG_BATTLE_DUNGEON_REQ':
        attrs = ['self_hero_id', 'target_city_id', 'target_strong_point_index']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_DEFENSE_HERO_INFO':
        attrs = ['target_role_id', 'target_hero']
        return f(pb, attrs)
    
    if p == 'SCPKG_ENTER_GANG_BATTLE_DUNGEON_RES':
        attrs = ['result', 'dun_id', 'self_hero_id', 'target_hero_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GANG_BATTLE_DUNGEON_ROUND_BEGIN_REQ':
        attrs = ['dun_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_GANG_BATTLE_DUNGEON_ROUND_BEGIN_RES':
        attrs = ['begin_time', 'interval']
        return f(pb, attrs)
    
    if p == 'CSPKG_GANG_BATTLE_BALANCE_REQ':
        attrs = ['dun_id', 'self_hero_id', 'target_city_id', 'target_strong_point_index', 'is_win']
        return f(pb, attrs)
    
    if p == 'SCPKG_GANG_BATTLE_BALANCE_RES':
        attrs = ['result', 'reward_gold', 'reward_crystal']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GET_GANG_BATTLE_STATE_REQ':
        attrs = ['rerverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GET_GANG_BATTLE_STATE_RES':
        attrs = ['state', 'sub_state', 'pre_get_gold', 'pre_get_crystal', 'attack_hero', 'attack_point']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GET_GANG_BATTLE_HISTORY_REQ':
        attrs = ['rerverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GET_GANG_BATTLE_HISTORY_RES':
        attrs = ['history_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ':
        attrs = ['rerverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES':
        attrs = ['result', 'mem_attck_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_GANG_BATTLE_STATE_INFO_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_GANG_BATTLE_STATE_INFO_RES':
        attrs = ['is_battle_start', 'attack_hero_num', 'has_can_attack_point']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_ACCOUNT_BY_NAME_REQ':
        attrs = ['role_name']
        return f(pb, attrs)
    
    if p == 'PLAYER_ACCOUNT_NAME_INFO':
        attrs = ['role_name', 'uid', 'uin']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_ACCOUNT_BY_NAME_RES':
        attrs = ['name_info', 'result']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_ACCOUNT_BY_UID_REQ':
        attrs = ['uid']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_ACCOUNT_BY_UID_RES':
        attrs = ['uid', 'role_name', 'uin', 'result']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_WORLD_INFO_REQ':
        attrs = ['uin']
        return f(pb, attrs)
    
    if p == 'PLAYER_WORLD_INFO':
        attrs = ['uid', 'name', 'world_id', 'account_ban_time', 'chat_ban_time', 'channel_id']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_WORLD_INFO_RES':
        attrs = ['uin', 'world_info', 'result']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_BASE_INFO_REQ':
        attrs = ['uid', 'world_id']
        return f(pb, attrs)
    
    if p == 'HERO_EMBLEM_INFO':
        attrs = ['emblem_id', 'emblem_lv', 'emblem_exp']
        return f(pb, attrs)
    
    if p == 'HERO_BASE_INFO':
        attrs = ['hero_id', 'level', 'exp', 'growup', 'emblem_info', 'skill']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_BASE_INFO_RES':
        attrs = ['result', 'uin', 'uid', 'world_id', 'name', 'is_online', 'create_time', 'last_login_time', 'last_logout_time', 'total_online_time', 'gold_cnt', 'gold_buy_times', 'crystal_cnt', 'crystal_buy_times', 'money_cnt', 'power_cnt', 'power_buy_times', 'skillpoint_cnt', 'skillpoint_buy_times', 'endless_floor', 'endless_score', 'pvp_score', 'rank_battle_score', 'growup_cnt', 'hero_info', 'online_battle_win_point']
        return f(pb, attrs)
    
    if p == 'GM_GET_RANK_LIST_REQ':
        attrs = ['world_id', 'rank_id', 'start_pos', 'get_count']
        return f(pb, attrs)
    
    if p == 'GM_GET_RANK_LIST_RES':
        attrs = ['result', 'rank_id', 'total_count', 'rank_list']
        return f(pb, attrs)
    
    if p == 'GM_GET_RANK_POS_BY_UID_REQ':
        attrs = ['world_id', 'rank_id', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_GET_RANK_POS_BY_UID_RES':
        attrs = ['result', 'rank_pos', 'rank_info']
        return f(pb, attrs)
    
    if p == 'GM_DEL_PLAYER_FROM_RANK_REQ':
        attrs = ['role_id', 'rank_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'GM_DEL_PLAYER_FROM_RANK_RES':
        attrs = ['result', 'role_id', 'rank_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'GM_DEL_PLAYER_FROM_GANG_REQ':
        attrs = ['role_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'GM_DEL_PLAYER_FROM_GANG_RES':
        attrs = ['result', 'role_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'GM_GANG_BASE_INFO':
        attrs = ['gang_name', 'gang_notify', 'gang_score', 'gang_condition', 'gang_create_time']
        return f(pb, attrs)
    
    if p == 'GM_GANG_MEM_BASE_INFO':
        attrs = ['role_id', 'role_name', 'mem_position']
        return f(pb, attrs)
    
    if p == 'GM_GET_GANG_BASE_INFO_REQ':
        attrs = ['gang_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'GM_GET_GANG_BASE_INFO_RES':
        attrs = ['result', 'gang_id', 'world_id', 'gang_base_info', 'gang_mem_list']
        return f(pb, attrs)
    
    if p == 'GM_MODIFY_GANG_BASE_INFO_REQ':
        attrs = ['gang_id', 'world_id', 'gang_base_info']
        return f(pb, attrs)
    
    if p == 'GM_MODIFY_GANG_BASE_INFO_RES':
        attrs = ['result', 'gang_id', 'world_id', 'gang_base_info']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_PVE_INFO_REQ':
        attrs = ['world_id', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_PLAYER_PVE_INFO':
        attrs = ['dungeon_id', 'dun_level', 'stat', 'challenge_time', 'challenge_cnt', 'best_evaluation']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_PVE_INFO_RES':
        attrs = ['result', 'uid', 'pve_info', 'hero_endless_info']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_REQ':
        attrs = ['world_id', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_FIRST_PURCHASE':
        attrs = ['//\xe9\x80\x9a\xe8\xbf\x87uid\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x8e\xa9\xe5\xae\xb6\xe5\x8f\xaf\xe4\xbb\xa5\xe9\xa6\x96\xe5\x85\x85\xe7\x9a\x84\xe4\xba\xa7\xe5\x93\x81,channel', 'world_id', 'uid', 'channel']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_FIRST_PURCHASE_RES':
        attrs = ['result', 'product_id']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_BUILDING_AND_PACKAGE_RES':
        attrs = ['result', 'uid', 'building_info']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_TOTAL_RECHARGE_REQ':
        attrs = ['world_id', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_TOTAL_RECHARGE_RES':
        attrs = ['result', 'uid', 'total_recharge']
        return f(pb, attrs)
    
    if p == 'GM_LOCK_PLAYER_REQ':
        attrs = ['uid', 'lock_time']
        return f(pb, attrs)
    
    if p == 'GM_LOCK_PLAYER_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_BAN_PLAYER_CHAT_REQ':
        attrs = ['uid', 'uin', 'world_id', 'ban_time']
        return f(pb, attrs)
    
    if p == 'GM_BAN_PLAYER_CHAT_RES':
        attrs = ['result', 'uid', 'uin', 'world_id', 'ban_end_time']
        return f(pb, attrs)
    
    if p == 'GM_KICK_PLAYER_REQ':
        attrs = ['uid', 'uin', 'world_id']
        return f(pb, attrs)
    
    if p == 'GM_KICK_PLAYER_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_MAIL_ACC':
        attrs = ['res_type', 'res_id', 'res_count', 'res_extern_param_1', 'res_extern_param_2', 'res_extern_param_3']
        return f(pb, attrs)
    
    if p == 'GM_MAIL_INFO':
        attrs = ['mail_title', 'mail_content', 'mail_interval', 'mail_acc']
        return f(pb, attrs)
    
    if p == 'GM_SEND_MAIL_REQ':
        attrs = ['world_id', 'uid', 'mail_info']
        return f(pb, attrs)
    
    if p == 'GM_MAIL_RES_INFO':
        attrs = ['uid', 'mail_id']
        return f(pb, attrs)
    
    if p == 'GM_SEND_MAIL_RES':
        attrs = ['failed_uid', 'sucess_result']
        return f(pb, attrs)
    
    if p == 'GM_GAMESERVER_MAIL_CONDITION':
        attrs = ['effect_begin_time', 'effect_end_time', 'effect_clt_version', 'effect_channel_id', 'effect_player_state']
        return f(pb, attrs)
    
    if p == 'GM_SEND_GAMESERVER_MAIL_REQ':
        attrs = ['world_id', 'mail_info', 'mail_condition', 'is_send_online']
        return f(pb, attrs)
    
    if p == 'GM_SEND_GAMESERVER_MAIL_RES':
        attrs = ['result', 'world_id', 'mail_seq_key', 'mail_info', 'mail_condition', 'is_send_online']
        return f(pb, attrs)
    
    if p == 'GM_GET_GAMESERVER_MAIL_INFO_REQ':
        attrs = ['world_id']
        return f(pb, attrs)
    
    if p == 'GM_GAMESERVER_MAIL_INFO':
        attrs = ['mail_seq_key', 'mail_info', 'mail_condition']
        return f(pb, attrs)
    
    if p == 'GM_GET_GAMESERVER_MAIL_INFO_RES':
        attrs = ['result', 'world_id', 'mail_info']
        return f(pb, attrs)
    
    if p == 'GM_DEL_GAMESERVER_MAIL_REQ':
        attrs = ['world_id', 'mail_seq_key']
        return f(pb, attrs)
    
    if p == 'GM_DEL_GAMESERVER_MAIL_RES':
        attrs = ['result', 'world_id']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_ATTR_REQ':
        attrs = ['world_id', 'uid', 'uin', 'res_type', 'res_id', 'chg_count']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_ATTR_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_DEL_PLAYER_EQUIPED_EQUIP_REQ':
        attrs = ['world_id', 'uid', 'uin', 'hero_id', 'equip_id']
        return f(pb, attrs)
    
    if p == 'GM_DEL_PLAYER_EQUIPED_EQUIP_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_HERO_LEVEL_REQ':
        attrs = ['world_id', 'uid', 'uin', 'hero_id', 'hero_lv', 'hero_exp']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_HERO_LEVEL_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_VIP_LEVEL_REQ':
        attrs = ['world_id', 'uid', 'total_recharge']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_VIP_LEVEL_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_UNLOCK_DUNGEON_REQ':
        attrs = ['world_id', 'uid', 'uin', 'unlock_til_dungeon_id']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_UNLOCK_DUNGEON_RES':
        attrs = ['result', 'uid']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_MONTH_CARD_REQ':
        attrs = ['uid', 'world_id']
        return f(pb, attrs)
    
    if p == 'GM_GET_PLAYER_MONTH_CARD_RES':
        attrs = ['result', 'uid', 'month_card_id', 'month_end_time', 'month_remain_days', 'permanent_card_id', 'permanent_buy_time']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_MONTH_CARD_REQ':
        attrs = ['uid', 'world_id', 'card_id', 'change_days']
        return f(pb, attrs)
    
    if p == 'GM_CHG_PLAYER_MONTH_CARD_RES':
        attrs = ['result', 'uid', 'card_id']
        return f(pb, attrs)
    
    if p == 'GUARD_MSG_GAME_SVR':
        attrs = ['type', 'msg_data', 'client_pos', 'seq_no']
        return f(pb, attrs)
    
    if p == 'GUARD_COPY_GM_TEXT_REQ':
        attrs = ['gm_text', 'param', 'world_id', 'uid', 'uin']
        return f(pb, attrs)
    
    if p == 'GUARD_COPY_GM_TEXT_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_HERO_GROWUP':
        attrs = ['hero_id', 'grow_up_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_HERO_GROWUP':
        attrs = ['result', 'hero_id', 'grow_up_id', 'grow_up_beg_time', 'grow_up_total_time']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_HERO_GROWUP_END':
        attrs = ['result', 'hero_id', 'grow_up_id', 'max_hp', 'strength']
        return f(pb, attrs)
    
    if p == 'SCDT_HERO_ATT_EFFECTED':
        attrs = ['hero_id', 'max_hp', 'damage']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_EMBLEM_LEVELUP':
        attrs = ['hero_id', 'result', 'emblem_id', 'emblem_lv', 'emblem_exp', 'added_exp', 'rate', 'hero_att_effected']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_EMBLEM_UNLOCK':
        attrs = ['hero_id', 'emblem_id', 'emblem_lv', 'hero_att_effected']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_UNLOCK_HERO':
        attrs = ['hero_id', 'unlock_type']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_LEVELUP_DIRECTLY':
        attrs = ['obj_type', 'obj_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_SPBORN_BEGIN':
        attrs = ['spborn_beg_time', 'spborn_total_time']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_SPBORN_END':
        attrs = ['cur_sp', 'spborn_beg_time', 'spborn_total_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_SKILL_LEVELUP':
        attrs = ['hero_id', 'skill_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_SKILL_LEVELUP':
        attrs = ['result', 'hero_id', 'skill_id']
        return f(pb, attrs)
    
    if p == 'NOTIFY_HERO_NEW_ROLE_BUFF':
        attrs = ['hero_id', 'leftCnt']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_EMBLEM_LEVELUP':
        attrs = ['hero_id', 'emblem_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_ACTIVE_TALENT_REQ':
        attrs = ['hero_id', 'talent_id', 'talent_lv', 'is_clear']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ACTIVE_TALENT_RES':
        attrs = ['result', 'hero_id', 'talent_info', 'talent_lv_info', 'is_clear', 'talent_hide_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_ACTIVE_TALENT_HIDE_REQ':
        attrs = ['hero_id', 'talent_hide_id', 'active_talent_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ACTIVE_TALENT_HIDE_RES':
        attrs = ['result', 'hero_id', 'talent_hide_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_TOTALABILITY_LEVEL':
        attrs = ['id']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_PLAYER_LEVELUP':
        attrs = ['obj_id', 'obj_type', 'cur_level']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PLAYER_LEVELUP':
        attrs = ['obj_id', 'obj_type', 'result', 'beg_time', 'cost_time']
        return f(pb, attrs)
    
    if p == 'SCDT_ATT_INFO':
        attrs = ['hero_att', 'reserve']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PLAYER_LEVELUPEDN':
        attrs = ['obj_id', 'obj_type', 'is_directly', 'dest_level', 'reward_power', 'att_info', 'passive_hero_info']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_BEHAVIOUR':
        attrs = ['total_skilllvup_cnt', 'total_archlvup_cnt', 'total_growup_cnt', 'total_endless_score', 'total_buildinglvup_cnt', 'total_equip_level_up_level', 'total_equip_grow_up_cnt', 'total_equip_wake_up_cnt', 'total_world_boss_damage']
        return f(pb, attrs)
    
    if p == 'CSDT_MISC_DATA':
        attrs = ['quest', 'behaviour', 'offline_battle_info', 'online_battle_info', 'business_info']
        return f(pb, attrs)
    
    if p == 'SCDT_PASSIVEHERO_INFO':
        attrs = ['hero_id', 'hp', 'strength']
        return f(pb, attrs)
    
    if p == 'SCDT_HERO_ATTINFO':
        attrs = ['max_hp', 'cur_hp', 'max_sp', 'cur_sp', 'strength', 'grow_up', 'level']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_UNLOCK_HERO':
        attrs = ['result', 'unlock_type', 'hero_id', 'pos', 'hero_att', 'init_skill_id', 'passive_hero_info', 'greatest_dungeon_id_when_unlock']
        return f(pb, attrs)
    
    if p == 'CSDT_SKILL_INFO_DATA':
        attrs = ['skill_id', 'skill_index']
        return f(pb, attrs)
    
    if p == 'CSDT_HERO_INFO_DATA':
        attrs = ['hero_id', 'grow_up', 'level', 'exp', 'cur_hp', 'cur_sp', 'max_hp', 'strength', 'skill_info', 'emblem_info', 'greatest_dungeon_id_when_unlock', 'talent_info', 'talent_hide_info', 'talent_lv_info']
        return f(pb, attrs)
    
    if p == 'CSDT_HERO_INFO':
        attrs = ['hero_info']
        return f(pb, attrs)
    
    if p == 'CSDT_ROLE_ONLINE':
        attrs = ['money', 'max_power', 'cur_power', 'power_recover_beg_time', 'power_recover_total_time', 'power_last_refresh_time', 'buy_power_times', 'cur_achi_point', 'cur_crystal', 'cur_gold', 'cur_rank_battle_score', 'max_sp', 'cur_sp', 'cur_spborn_beg_time', 'cur_spborn_total_time', 'max_endless_score', 'max_endless_floor', 'clt_bit_mark', 'cur_notify_beg_time', 'buy_skill_point_times', 'buy_crystal_times', 'buy_gold_times', 'head_photo', 'online_battle_win_point']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROLELOGIN_ONLINE':
        attrs = ['result_id', 'zone_id', 'obj_id', 'zone_time_sec', 'zone_time_msec', 'uid', 'name', 'client_ip', 'client_port', 'role_online_info', 'left_ban_time', 'server_open_time', 'zone_time_zone_diff']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROLELOGIN_BUILDING':
        attrs = ['building_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROLELOGIN_HERO':
        attrs = ['hero_info']
        return f(pb, attrs)
    
    if p == 'CSDT_SELFDUN_HERO_INFO':
        attrs = ['state', 'hero_id']
        return f(pb, attrs)
    
    if p == 'CSDT_SELF_DUN_DATA':
        attrs = ['defense_hero_info', 'attack_hero_info', 'top_battle_defense_hero_info', 'top_battle_attack_hero_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROLE_DUNGEON_INFO':
        attrs = ['pve_challenge_data', 'tower_challenge_data', 'self_dun_data', 'pvp_dun_data']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROLELOGIN_GANGBATTLE_HERO':
        attrs = ['gang_battle_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROLELOGIN_RANK_BATTLE_INFO':
        attrs = ['rank_battle_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROLELOGIN_MISC':
        attrs = ['misc_data']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROLELOGIN_FINISH':
        attrs = ['succeed']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_ROLELOGIN_ACCEPT':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'CSDT_MAIL_SYSTEM_ACC':
        attrs = ['res_type', 'res_id', 'res_count']
        return f(pb, attrs)
    
    if p == 'CSDT_MAIL_SYSTEM_ACC_INFO':
        attrs = ['acc_info']
        return f(pb, attrs)
    
    if p == 'CSDT_MAIL_REVENGE_ACC_INFO':
        attrs = ['atk_role_name', 'atk_role_id', 'lose_res_type', 'lose_res_id', 'lose_res_count']
        return f(pb, attrs)
    
    if p == 'CSDT_MAIL_ACC_INFO':
        attrs = ['type', 'mail_acc_info']
        return f(pb, attrs)
    
    if p == 'CSDT_MAIL_INFO':
        attrs = ['mail_id', 'mail_type', 'mail_status', 'mail_title', 'mail_content', 'mail_send_time', 'mail_end_time', 'mail_acc_type', 'mail_acc']
        return f(pb, attrs)
    
    if p == 'CSDT_BRIEF_MAIL_INFO':
        attrs = ['mail_id', 'mail_type', 'mail_status', 'mail_title', 'mail_send_time', 'mail_end_time', 'mail_acc_type']
        return f(pb, attrs)
    
    if p == 'SCPKG_ROLELOGIN_GET_MAIL_RES':
        attrs = ['system_mail_list', 'revenge_mail_list', 'system_mail_count', 'revenge_mail_count']
        return f(pb, attrs)
    
    if p == 'SCPKG_SEND_MAIL_RES':
        attrs = ['mail_info', 'system_mail_count', 'revenge_mail_count']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_MAIL_LIST_REQ':
        attrs = ['mail_type']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_MAIL_LIST_RES':
        attrs = ['mail_type', 'system_mail_info', 'revenge_mail_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_MAIL_DETAIL_REQ':
        attrs = ['mail_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_MAIL_DETAIL_RES':
        attrs = ['mail_id', 'mail_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_MAIL_READ_REQ':
        attrs = ['mail_id', 'mail_type']
        return f(pb, attrs)
    
    if p == 'SCPKG_MAIL_READ_RES':
        attrs = ['mail_id', 'mail_type', 'mail_status']
        return f(pb, attrs)
    
    if p == 'CSPKG_MAIL_DELETE_REQ':
        attrs = ['mail_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_MAIL_DELETE_RES':
        attrs = ['mail_id', 'mail_type', 'is_have_new_mail_add', 'add_mail_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_MAIL_GET_ACC_REQ':
        attrs = ['mail_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_MAIL_GET_ACC_RES':
        attrs = ['result', 'mail_id', 'is_have_new_mail_add', 'add_mail_info']
        return f(pb, attrs)
    
    if p == 'CSDT_OVERTIME_MAIL_ID':
        attrs = ['mail_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_OVERTIME_MAIL_CLR_RES':
        attrs = ['system_mail_id_list', 'revenge_mail_id_list']
        return f(pb, attrs)
    
    if p == 'CS_UINON_MAIL_ACC_INFO':
        attrs = ['system_mail_acc', 'revenge_mail_acc']
        return f(pb, attrs)
    
    if p == 'CSDT_MONSTER_STAT_DATA':
        attrs = ['stat', 'lv_cdbeg_time', 'lv_cdtotal_time']
        return f(pb, attrs)
    
    if p == 'CSDT_MONSTER_JOB_INFO':
        attrs = ['volume', 'lv_cost_crystal', 'cost_time', 'grp_name']
        return f(pb, attrs)
    
    if p == 'CSDT_MONSTER_INFO_DATA':
        attrs = ['monster_grp_id', 'grp_level', 'stat_info', 'monster_job_info']
        return f(pb, attrs)
    
    if p == 'CSDT_MONSTER_INFO':
        attrs = ['monster_grp_info']
        return f(pb, attrs)
    
    if p == 'SCDT_MONSTER_ATTINFO':
        attrs = ['volume', 'lv_cost_crystal', 'lv_cost_gold', 'lv_cost_time', 'grp_name', 'stat_info']
        return f(pb, attrs)
    
    if p == 'SCDT_ROOMMONSTER_INFO':
        attrs = ['monster_id', 'monster_lv', 'monster_cnt']
        return f(pb, attrs)
    
    if p == 'SCDT_ROOM_INFO':
        attrs = ['room_id', 'monster_info']
        return f(pb, attrs)
    
    if p == 'SCDT_UNLOCK_MONSTER_ATTINFO':
        attrs = ['volume', 'lv_cost_crystal', 'lv_cost_gold', 'lv_cost_time', 'grp_name', 'stat_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_ONLINE_BATTLE_MATCH_MSG':
        attrs = ['uid', 'zone_id', 'room_id', 'msg_type', 'set_action', 'input_msg', 'add_role', 'loading_phase', 'round_info', 'set_role_attribute', 'role_dead', 'stage_finish', 'collision', 'ready_count_down']
        return f(pb, attrs)
    
    if p == 'CSPKG_MULTIPLAYER_PVE_DUN_MSG':
        attrs = ['uid', 'msg_type', 'generated_from_svr', 'set_action', 'add_role', 'loading_phase', 'collision']
        return f(pb, attrs)
    
    if p == 'CSPKG_MULTIPLAYER_PVE_DUN_ROOM_OP_REQ':
        attrs = ['uid', 'operation', 'param', 'dungeon_index', 'dungeon_id', 'player_info', 'use_ticket', 'gang_mem_uid', 'msg_time_stamp', 'free_dungeon_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_MULTIPLAYER_PVE_DUN_ROOM_OP_RES':
        attrs = ['uid', 'operation', 'result', 'param', 'room_id', 'dungeon_index', 'dungeon_id', 'player_infos', 'msg_time_stamp', 'is_invite']
        return f(pb, attrs)
    
    if p == 'CSDT_MULTIPLAYER_PVE_DUN_PLAYER_INFO':
        attrs = ['host', 'uid', 'name', 'zone_id', 'ready', 'role_info', 'teammate_uid', 'use_ticket', 'vip_level', 'status_code']
        return f(pb, attrs)
    
    if p == 'CSDT_MULTIPLAYER_PVE_DUN_ROLE_INFO':
        attrs = ['role_id', 'role_lv', 'role_stamina', 'role_strength', 'role_ability', 'role_skills', 'attrs', 'hero_attr_info', 'min_equipment_color']
        return f(pb, attrs)
    
    if p == 'SCPKG_MULTIPLAYER_PVE_DUNBALANCE':
        attrs = ['succeed', 'reward_gold', 'reward_crystal', 'drop_info', 'activity_drop_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_MULTIPLAYER_PVE_CHALLENGE_DATA':
        attrs = ['week_day', 'complete_dun_index', 'free_ticket_limit_seconds', 'ticket_brought_times']
        return f(pb, attrs)
    
    if p == 'CSPKG_SET_OFFLINE_BATTLE_TITLE_ID_REQ':
        attrs = ['id']
        return f(pb, attrs)
    
    if p == 'SCPKG_SET_OFFLINE_BATTLE_TITLE_ID_RES':
        attrs = ['id']
        return f(pb, attrs)
    
    if p == 'CSDT_OFFLINE_BATTLE_INFO':
        attrs = ['gold_medal_count', 'silver_medal_count', 'defeated_count', 'my_gold_medal_holder_role_name', 'my_silver_medal_holder_role_name', 'mode_3v3_win_count', 'title_index_selected']
        return f(pb, attrs)
    
    if p == 'SCPKG_OFFLINE_BATTLE_INFO':
        attrs = ['offline_battle_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_OFFLINE_BATTLE_DEFEATED_LIST_REQ':
        attrs = ['start_index', 'count']
        return f(pb, attrs)
    
    if p == 'CSDT_OFFLINE_BATTLE_DEFEATED_LIST_ITEM':
        attrs = ['opponent_name', 'opponent_title_when_defeated', 'opponent_gold_medal_count_when_defeated', 'opponent_silver_medal_count_when_defeated', 'got_opponent_medal_bit']
        return f(pb, attrs)
    
    if p == 'SCPKG_OFFLINE_BATTLE_DEFEATED_LIST_RES':
        attrs = ['start_index', 'items']
        return f(pb, attrs)
    
    if p == 'CSPKG_OFFLINE_BATTLE_RESULT':
        attrs = ['mode', 'self_name', 'opponent_name', 'win', 'loser_got_medal', 'opponent_gold_medal_count', 'opponent_silver_medal_count', 'opponent_index']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_CONF_INFO':
        attrs = ['mode', 'name', 'win_count', 'version', 'is_host', 'ip', 'time_stamp', 'title_index', 'got_medal', 'gold_medal_count', 'silver_medal_count']
        return f(pb, attrs)
    
    if p == 'CCDT_CMD_ACTION_PARAM':
        attrs = ['action', 'face', 'skill_id', 'action_execute_way', 'freeze_start', 'freeze_duration', 'speed_x', 'speed_y', 'pos_x', 'pos_y', 'freeze_motion', 'cur_acceleration_x', 'cur_acceleration_y', 'hit_action']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_SETACTION':
        attrs = ['role_id', 'type', 'action_param']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_INPUTMSG':
        attrs = ['role_id', 'input_key', 'input_face_direction']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_ADDROLE':
        attrs = ['master_role_id', 'logic_data_index', 'new_role_id', 'pos_x', 'pos_y', 'face', 'rotation', 'scale', 'action_name', 'factor_skill_id']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_CHOOSE_ROLE_INFO':
        attrs = ['player_index', 'role_name']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_LOADING_PHASE':
        attrs = ['load_completed', 'battle_start']
        return f(pb, attrs)
    
    if p == 'CCDT_CMD_ROLE_INFO':
        attrs = ['role_id', 'role_cur_hp', 'role_max_hp', 'role_sp']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_ROUND_INFO':
        attrs = ['role_0', 'role_1', 'round_index', 'battle_finished', 'battle_win', 'winner_role_ids']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_ENTER_DUN':
        attrs = ['map_name', 'round_info', 'host_role_infos', 'guest_role_infos']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_SET_ROLE_ATTRIBUTE':
        attrs = ['role_id', 'hp', 'sp']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_ROLE_DEAD':
        attrs = ['role_id', 'next_round_info']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_STAGE_FINISH':
        attrs = ['winer_role_id', 'loser_role_id', 'battle_result']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_COLLISION':
        attrs = ['attacker_role_id', 'defender_role_id', 'damage', 'bind_host_role_id', 'bind_victim_role_id', 'attacker_hp', 'attacker_sp', 'defender_hp', 'defender_sp', 'is_attacker_super_armor_win', 'cur_attack_action']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_READY':
        attrs = ['player_index', 'available_role_id']
        return f(pb, attrs)
    
    if p == 'CCPKG_CMD_READY_COUNT_DOWN':
        attrs = ['Count']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PLAYER_ENTER_ONLINE_BATTLE_DUN':
        attrs = ['scene_index', 'online_battle_info', 'role_info']
        return f(pb, attrs)
    
    if p == 'CSDT_ONLINE_BATTLE_ROOM_ROLE_INFO':
        attrs = ['pos', 'role_id', 'role_lv', 'role_stamina', 'role_strength', 'role_ability', 'role_skills', 'factor_skill_id', 'hero_attr_info']
        return f(pb, attrs)
    
    if p == 'CSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO':
        attrs = ['host', 'uid', 'name', 'score', 'win_number', 'ready', 'role_infos']
        return f(pb, attrs)
    
    if p == 'CSDT_ONLINE_BATTLE_ROOM_INFO':
        attrs = ['room_id', 'scene_index', 'player_infos']
        return f(pb, attrs)
    
    if p == 'SCDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME':
        attrs = ['count_down_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_ONLINE_BATTLE_ROOM_OP_REQ':
        attrs = ['uid', 'operation', 'room_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_ONLINE_BATTLE_ROOM_OP_RES':
        attrs = ['operation', 'result', 'param', 'room_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_ONLINE_BATTLE_SHOP_BOX_BUY_REQ':
        attrs = ['pos']
        return f(pb, attrs)
    
    if p == 'SCPKG_ONLINE_BATTLE_SHOP_BOX_BUY_RES':
        attrs = ['result', 'drop_info', 'online_battle_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_ONLINE_BATTLE_ROUND_FINISH':
        attrs = ['winner_uid', 'winner_name', 'winner_hero_id', 'winner_hero_index', 'winner_hero_remain_hp', 'winner_hero_max_hp', 'winner_hero_ability', 'loser_uid', 'loser_name', 'loser_hero_id', 'loser_hero_index', 'loser_hero_remain_hp', 'loser_hero_max_hp', 'loser_hero_ability', 'remain_seconds']
        return f(pb, attrs)
    
    if p == 'CSPKG_SET_NAME':
        attrs = ['player_name', 'head_photo', 'is_rename']
        return f(pb, attrs)
    
    if p == 'CSDT_RECOMMAND_NAME':
        attrs = ['name']
        return f(pb, attrs)
    
    if p == 'SCPKG_SET_NAME':
        attrs = ['result', 'role_name', 'head_photo', 'recommand_name', 'is_rename']
        return f(pb, attrs)
    
    if p == 'CSPKG_CHANGE_HEADPHOTO':
        attrs = ['old_photo', 'new_photo']
        return f(pb, attrs)
    
    if p == 'SCPKG_CHANGE_HEADPHOTO':
        attrs = ['result', 'old_photo', 'new_photo']
        return f(pb, attrs)
    
    if p == 'CSPKG_RANDOM_NAME_REQ':
        attrs = ['uid']
        return f(pb, attrs)
    
    if p == 'SCPKG_RANDOM_NAME_RES':
        attrs = ['uid', 'name']
        return f(pb, attrs)
    
    if p == 'SCPKG_REFRESH_DATA_ATTR':
        attrs = ['money', 'cur_power', 'cur_crystal', 'cur_gold', 'cur_achi_point', 'cur_sp', 'cur_rank_battle_score', 'cur_online_battle_win_point']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_POWER_RECOVER':
        attrs = ['chg_type', 'chg_value', 'cur_power', 'recover_beg_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_RESEXCHANGE_REQ':
        attrs = ['chg_type', 'chg_res']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_RESEXCHANGE_RES':
        attrs = ['result', 'res_type', 'res_cnt', 'cur_res']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_BUY_POWER':
        attrs = ['power_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_BUY_POWER':
        attrs = ['result', 'power_cnt']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_BUY_SKILL_POINT':
        attrs = ['skill_point_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_BUY_SKILL_POINT':
        attrs = ['result', 'skill_point_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_RES_REFRESH':
        attrs = ['crystal_buy_times', 'gold_buy_times', 'power_buy_times', 'sp_buy_times']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_POWER_REFRESH':
        attrs = ['cur_buypower_times']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_SKILL_POINT_REFRESH':
        attrs = ['cur_buy_skill_point_times']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_POWER_RECOVERBEG':
        attrs = ['recover_beg_time', 'recover_interval_time']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_POWER_RECOVEREND':
        attrs = ['cur_power', 'recover_beg_time', 'recover_interval_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_PRIZE_DRAW_REQ':
        attrs = ['prize_draw_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_PRIZE_DRAW_RES':
        attrs = ['result', 'reward']
        return f(pb, attrs)
    
    if p == 'SCPKG_PRIZE_DRAW_FREE_INFO_RES':
        attrs = ['coin_one_prize_draw_free_left_count', 'coin_one_prize_draw_free_next_use_time', 'can_use_coin_one_prize_draw_free_count', 'money_one_prize_draw_free_left_count', 'money_one_prize_draw_free_next_use_time', 'activity_prize_draw_info']
        return f(pb, attrs)
    
    if p == 'SCDT_CUMULATE_COST_INFO':
        attrs = ['activity_id', 'is_open', 'target_info', 'get_reward_info', 'cumulate_cost_cnt']
        return f(pb, attrs)
    
    if p == 'SCDT_SECT_RECHARGE_INFO':
        attrs = ['sect_recharge_cnt', 'target_bit', 'reward_bit', 'valid_time']
        return f(pb, attrs)
    
    if p == 'SCDT_DAILY_RECHARGE_CNT':
        attrs = ['day_num', 'recharge_cnt']
        return f(pb, attrs)
    
    if p == 'SCDT_DAILY_RECHARGE_INFO':
        attrs = ['daily_recharge_cnt', 'target_bit', 'reward_bit', 'valid_time']
        return f(pb, attrs)
    
    if p == 'CSDT_DROP_OBJINFO':
        attrs = ['type', 'base_id', 'cnt', 'level']
        return f(pb, attrs)
    
    if p == 'CSDT_DROP_INFO':
        attrs = ['drop_info']
        return f(pb, attrs)
    
    if p == 'CSDT_ONLINE_BATTLE_INFO':
        attrs = ['tickets', 'score', 'win_number', 'brought_times', 'tickets_max']
        return f(pb, attrs)
    
    if p == 'CSDT_EMBLEMINFO_DATA':
        attrs = ['emblem_id', 'emblem_lv', 'emblem_exp']
        return f(pb, attrs)
    
    if p == 'CSDT_GANGBATTLE_HERO_INFO':
        attrs = ['gang_battle_win_cnt', 'gang_battle_lost_cnt']
        return f(pb, attrs)
    
    if p == 'CSPKG_BUY_REFRESH_REQ':
        attrs = ['type']
        return f(pb, attrs)
    
    if p == 'SCPKG_BUY_REFRESH_RES':
        attrs = ['result', 'type']
        return f(pb, attrs)
    
    if p == 'SCDT_ACTIVITY_PRIZE_DRAW_INFO':
        attrs = ['activity_money_prize_draw_cnt', 'activity_money_prize_draw_get_reward_record']
        return f(pb, attrs)
    
    if p == 'CSDT_PVP_DUN_DATA':
        attrs = ['pvp_win_cnt', 'pvp_total_cnt', 'pvp_gain_gold', 'pvp_gain_crystal', 'pvp_gain_money', 'pvp_gain_exp_item', 'steal_battle_times']
        return f(pb, attrs)
    
    if p == 'CSDT_PVP_ISLAND_DEFENSE_INFO':
        attrs = ['res_type', 'hero_id', 'hero_lv', 'cur_hp', 'max_hp', 'attrs', 'skill_id', 'monster_id', 'monster_lv', 'trap_id', 'trap_lv']
        return f(pb, attrs)
    
    if p == 'CSDT_PVP_ISLAND_INFO':
        attrs = ['building_id', 'res_type', 'can_steal_res', 'is_stolen']
        return f(pb, attrs)
    
    if p == 'CSDT_PVP_SEARCH_ISLAND_DEFENSE_INFO':
        attrs = ['res_type', 'hero_id', 'hero_lv', 'hero_grow_up', 'cur_hp', 'max_hp']
        return f(pb, attrs)
    
    if p == 'CSDT_PVP_SELF_HERO':
        attrs = ['hero_id', 'cur_hp_percent']
        return f(pb, attrs)
    
    if p == 'CSDT_PVP_SELF_HERO_INFO':
        attrs = ['self_hero_info']
        return f(pb, attrs)
    
    if p == 'CSDT_PVP_SEARCH_STEAL_ISLAND_INFO':
        attrs = ['role_id', 'role_name', 'island_data', 'defense_info', 'self_hero_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_SEARCH_PVP_PLAYER_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_SEARCH_PVP_PLAYER_RES':
        attrs = ['result', 'target_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_STEAL_TARGET_STATE_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_STEAL_TARGET_STATE_RES':
        attrs = ['result', 'target_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_WIPE_OUT_STEAL_BATTLE_REQ':
        attrs = ['target_role_id']
        return f(pb, attrs)
    
    if p == 'ST_WIPE_OUT_STEAL_BATTLE_INFO':
        attrs = ['self_hero_id', 'target_hero_id', 'target_equip_id', 'is_win', 'steal_res_info', 'steal_prize_draw_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_WIPE_OUT_STEAL_BATTLE_RES':
        attrs = ['result', 'steal_result_info', 'pvp_gain_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_ENTER_STEAL_BATTLE_REQ':
        attrs = ['target_role_id', 'res_type', 'self_hero_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_STEAL_BATTLE_TIMES_RES':
        attrs = ['steal_battle_times']
        return f(pb, attrs)
    
    if p == 'SCPKG_ENTER_STEAL_BATTLE_RES':
        attrs = ['result', 'dun_id', 'defense_info', 'steal_battle_times']
        return f(pb, attrs)
    
    if p == 'CSPKG_STEAL_BATTLE_ROUND_BEGIN_REQ':
        attrs = ['target_role_id', 'res_type', 'self_hero_id', 'dun_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_STEAL_BATTLE_ROUND_BEGIN_RES':
        attrs = ['result', 'dun_id', 'self_hero_id', 'self_hero_hp_percent', 'target_hero_id', 'target_hero_hp', 'target_hero_max_hp', 'begin_time', 'interval_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_BALANCE_STEAL_BATTLE_REQ':
        attrs = ['target_role_id', 'res_type', 'self_hero_id', 'self_hero_hp_percent', 'target_hero_id', 'target_hero_hp', 'brief']
        return f(pb, attrs)
    
    if p == 'SCPKG_BALANCE_STEAL_BATTLE_RES':
        attrs = ['result', 'battle_result', 'reward_res_type', 'reward_res_num', 'reward_item_id', 'pvp_gain_info', 'prize_draw_res_type', 'prize_draw_res_id', 'prize_draw_res_count']
        return f(pb, attrs)
    
    if p == 'CSPKG_STEAL_BATTLE_PRIZE_DRAW_GET_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_GET_DAILYTASK_REWARD':
        attrs = ['daily_task_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_GET_DAILYTASK_REWARD':
        attrs = ['daily_task_id', 'reward_info']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_PRACTICEDUN_QUEST':
        attrs = ['practice_dun_quest_flags_num', 'practice_dun_quest_flags']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_ACHIEVEMENT':
        attrs = ['achievemented_num', 'achievemented_flags', 'get_flags']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_DAILYTASK_ITEM':
        attrs = ['daily_task_id', 'daily_task_done', 'daily_task_get', 'daily_task_complete_count']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_DAILYTASK_SYNC':
        attrs = ['daily_tasks']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_MAIN_TASK_ITEM':
        attrs = ['group_id', 'id', 'seq_id', 'progress', 'completed', 'target_count']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_MAIN_TASK':
        attrs = ['item']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_MAIN_TASK_REWARD_REQ':
        attrs = ['current_id', 'group_id']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_MAIN_TASK_REWARD_RES':
        attrs = ['result', 'group_id']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_QUEST_INFO':
        attrs = ['practice_quest', 'achievement', 'daily_task', 'main_task', 'newbie_activity']
        return f(pb, attrs)
    
    if p == 'SCPKG_NEWBIE_ACTIVITY_ITEM':
        attrs = ['id', 'progress', 'is_claimed', 'is_completed']
        return f(pb, attrs)
    
    if p == 'SCPKG_NEWBIE_ACTIVITY_STATUS':
        attrs = ['limit_date', 'remain_second', 'claimed_id_array', 'completed_id_array', 'progressing_item_array']
        return f(pb, attrs)
    
    if p == 'CSPKG_NEWBIE_ACTIVITY_CLAIM_REQ':
        attrs = ['id']
        return f(pb, attrs)
    
    if p == 'SCPKG_NEWBIE_ACTIVITY_CLAIM_RES':
        attrs = ['id', 'result']
        return f(pb, attrs)
    
    if p == 'CSDT_RANK_VAL':
        attrs = ['val_id', 'val']
        return f(pb, attrs)
    
    if p == 'CSDT_RANK_BATTLE_HERO_BRIEF':
        attrs = ['hero_id', 'hero_lv', 'fighting_capacity']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_BASE_INFO':
        attrs = ['role_id', 'role_name', 'role_level', 'cumulate_recharge_id', 'rank_battle_hero', 'is_robot', 'fight_capacity', 'world_id']
        return f(pb, attrs)
    
    if p == 'CSDT_GANG_BASE_INFO':
        attrs = ['gang_id', 'gang_name', 'leader_role_id', 'leader_name', 'gang_level']
        return f(pb, attrs)
    
    if p == 'CSDT_RANK_DATA':
        attrs = ['rank_base_type', 'rank_base_info', 'rank_trend', 'rank_val']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_RANKLIST_REQ':
        attrs = ['flush_time', 'rank_id', 'rank_type', 'page_start_id', 'page_count', 'battle_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_RANKLIST_RES':
        attrs = ['result', 'flush_time', 'rank_id', 'rank_type', 'rank_yday', 'total_count', 'page_start_id', 'max_show_count', 'rank_list', 'battle_id']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_RANKPOS_REQ':
        attrs = ['rank_id', 'rank_type', 'search_type', 'search_key']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_RANKPOS_RES':
        attrs = ['rank_id', 'rank_type', 'search_type', 'rank_yday', 'rank_pos', 'rank_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_HISTORY_RANK_POS_INFO':
        attrs = ['history_high_endless_rank_pos', 'history_high_rank_battle_pos']
        return f(pb, attrs)
    
    if p == 'CSDT_RANK_BASEINFO':
        attrs = ['player_base_info', 'gang_base_info']
        return f(pb, attrs)
    
    if p == 'CSDT_RANKPOS_SEARCH_KEY':
        attrs = ['uniq_id', 'rank_pos', 'uniq_name']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_REWARD_ITEM':
        attrs = ['uid', 'rank_pos']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_REWARD_DISPATCH':
        attrs = ['rank_id', 'items']
        return f(pb, attrs)
    
    if p == 'RANK_RESET_INFO_ITEM':
        attrs = ['id', 'next_reset_time', 'first_reset_time', 'force_flush_time']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_RESET_INFO':
        attrs = ['items']
        return f(pb, attrs)
    
    if p == 'CSDT_PLAYER_RANK_BATTLE_INFO':
        attrs = ['last_rank_battle_time', 'left_rank_battle_count', 'buy_rank_battle_count', 'last_refresh_left_count_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_SET_RANK_BATTLE_ORDER':
        attrs = ['type', 'hero_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_SET_RANK_BATTLE_ORDER':
        attrs = ['type', 'result']
        return f(pb, attrs)
    
    if p == 'CSDT_RANK_BATTLE_LEFT_COUNT':
        attrs = ['left_rank_battle_count', 'buy_rank_battle_count']
        return f(pb, attrs)
    
    if p == 'CS_RANK_BATTLE_DEFENSE_DATA':
        attrs = ['hero_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_RANK_BATTLE_POS_UPDATE':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_RANK_BATTLE_POS_UPDATE':
        attrs = ['rank_battle_pos', 'rank_battle_high_history_pos']
        return f(pb, attrs)
    
    if p == 'CSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'CSDT_RANK_BATTLE_FIGHT_TARGET_INFO':
        attrs = ['role_id', 'role_name', 'rank_pos', 'defense_hero_info', 'head_photo', 'fight_capacity']
        return f(pb, attrs)
    
    if p == 'SCPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES':
        attrs = ['result', 'target_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ':
        attrs = ['defense_role_id', 'dungeon_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_RANK_BATTLE_ENTER_DUNGEON_RES':
        attrs = ['result', 'dungeon_id', 'dungeon_type', 'round_count', 'attack_hero_id', 'defense_hero_info', 'attack_role_name']
        return f(pb, attrs)
    
    if p == 'CSPKG_RANK_BATTLE_ROUND_BEGIN_REQ':
        attrs = ['dungeon_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_RANK_BATTLE_ROUND_BEGIN_RES':
        attrs = ['result', 'dungeon_id', 'round_no', 'round_begin_time', 'round_interval_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_RANK_BATTLE_BALANCE_ONEROUND_REQ':
        attrs = ['dungeon_id', 'round_no', 'fight_result', 'defense_mem_role_id', 'brief']
        return f(pb, attrs)
    
    if p == 'SCPKG_RANK_BATTLE_BALANCE_ONEROUND_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'SCPKG_RANK_BATTLE_BALANCE_RES':
        attrs = ['result', 'defense_mem_role_id', 'attack_result', 'old_pos', 'new_pos', 'reward_gold', 'reward_crystal', 'left_count', 'is_promote', 'history_pos', 'promote_reward']
        return f(pb, attrs)
    
    if p == 'CSPKG_RANK_BATTLE_BUY_COUNT_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_RANK_BATTLE_REFRESH_COUNT_RES':
        attrs = ['left_count']
        return f(pb, attrs)
    
    if p == 'ResServerLocalization':
        attrs = ['id', 'text']
        return f(pb, attrs)
    
    if p == 'ResDropIndexEx':
        attrs = ['drop_id', 'drop_cnt']
        return f(pb, attrs)
    
    if p == 'ResResourceInfo':
        attrs = ['res_type', 'res_id', 'res_count']
        return f(pb, attrs)
    
    if p == 'ResPreRole':
        attrs = ['role_id', 'role_lv']
        return f(pb, attrs)
    
    if p == 'ResInitSkill':
        attrs = ['skill_id']
        return f(pb, attrs)
    
    if p == 'ResNewRoleBuf':
        attrs = ['cnt', 'atk', 'life']
        return f(pb, attrs)
    
    if p == 'ResCost':
        attrs = ['type', 'id', 'cnt']
        return f(pb, attrs)
    
    if p == 'ResHeadPhoto':
        attrs = ['id', 'pic', 'endless_rank_limit', 'rankbattle_rank_limit', 'hero_level_limit_id', 'hero_level_limit_level']
        return f(pb, attrs)
    
    if p == 'ResRoleGL':
        attrs = ['hero_id', 'string', 'hero_name', 'res_name', 'protrait_name', 'audio_name', 'is_open', 'list_pos', 'buy_res_type', 'pre_dun_id', 'act_init_grow_up', 'act_init_level', 'unlock_emblem_ned_lv', 'unlock_emblem_hp_id', 'unlock_emblem_damage_id', 'init_skill_id', 'head_offset_x', 'head_offset_y', 'new_role_buf_cnt', 'buy_res_id', 'buy_res_count', 'buy_reward', 'unlock_cost', 'base_critical', 'base_critical_effect', 'base_critical_defence', 'base_critical_defence_effect', 'buy_res_discount', 'buy_vip_limit', 'protrait_offset_x', 'protrait_offset_y', 'base_max_dp', 'base_dp_recover_speed', 'base_dp_discount_rate', 'base_dp_discount_damage']
        return f(pb, attrs)
    
    if p == 'ResChat':
        attrs = ['channel_id', 'cond_city_id', 'interval', 'cost_restype', 'cost_resid', 'cost_rescount']
        return f(pb, attrs)
    
    if p == 'ResRoleRelationAddition':
        attrs = ['receiver_role_id', 'receiver_role_lv', 'giver_role_id', 'giver_stamina_rate', 'add_stamina_value_limit', 'giver_strength_rate', 'add_strength_value_limit']
        return f(pb, attrs)
    
    if p == 'ResRoleRelationSubtraction':
        attrs = ['receiver_role_id', 'giver_role_id', 'dmg_addition_point', 'dmg_addition_rate']
        return f(pb, attrs)
    
    if p == 'ResChipNumInfo':
        attrs = ['chip_id', 'chip_cnt']
        return f(pb, attrs)
    
    if p == 'ResEmblemSingleRequest':
        attrs = ['lv_up_single_exp', 'lv_up_single_possiblity']
        return f(pb, attrs)
    
    if p == 'ResEmblem':
        attrs = ['weapon_id', 'weapon_lv', 'icon', 'name', 'attch_hero_id', 'lv_up_ned_hero_level', 'lv_up_ned_type', 'lv_up_ned_number', 'extra_type', 'extra_value', 'lv_up_ned_exp', 'levelup_single_request']
        return f(pb, attrs)
    
    if p == 'ResStringArrayInfo':
        attrs = ['info']
        return f(pb, attrs)
    
    if p == 'ResMonsterGL':
        attrs = ['id', 'string', 'name', 'type', 'render_type', 'relation_index', 'res_file_name', 'behit_add_sp', 'sp_ratio', 'radius', 'unlock_name_tag', 'unlock_desc_tag', 'shadow_scale', 'role_scale', 'color_matching_id', 'head_pic', 'mini_head_pic', 'emblem_pic', 'attri_pic', 'full_pic_in_map_tip', 'hu_name_pic', 'vu_name_pic', 'bust_pic', 'portrait_pic', 'ai_type', 'grow_up_head_pic', 'boss_audios', 'param', 'endless_mode_param', 'battle_logic', 'basehp', 'backup_color_matching_id', 'level_up_type', 'base_damage_rate', 'hostile', 'spec_tagert', 'add_superarmor', 'hero_damage_rate', 'additional_role_id', 'additional_control_code', 'hp_bar_style', 'third_color_matching_id']
        return f(pb, attrs)
    
    if p == 'ResPreMonster':
        attrs = ['monster_id', 'monster_lv']
        return f(pb, attrs)
    
    if p == 'ResGroupMonster':
        attrs = ['monster_id', 'monster_cnt', 'pos_x', 'pos_y']
        return f(pb, attrs)
    
    if p == 'ResMonsterLevel':
        attrs = ['monster_level_up_type', 'monster_lv', 'max_hp', 'damage_type', 'strength', 'ex_endure_value', 'coin_drop_value', 'coin_drop_possibility', 'diamond_drop_value', 'diamond_drop_possibility']
        return f(pb, attrs)
    
    if p == 'ResMonsterGroupLevel':
        attrs = ['group_id', 'group_lv', 'group_monster_info']
        return f(pb, attrs)
    
    if p == 'ResGainSkill':
        attrs = ['gain_skill_id']
        return f(pb, attrs)
    
    if p == 'ResRoleLevelGrowUpAttr':
        attrs = ['max_hp', 'strength']
        return f(pb, attrs)
    
    if p == 'ResRoleLevel':
        attrs = ['role_id', 'role_lv', 'min_growup', 'grow_up_attr', 'max_sp', 'lv_need_exp', 'lv_reward_power', 'burden']
        return f(pb, attrs)
    
    if p == 'ResBuildingGL':
        attrs = ['building_id', 'building_type', 'building_desc', 'building_name', 'res_name', 'audio_name', 'is_open', 'act_init_level', 'is_need_levelup', 'tips_priority', 'tips_tag']
        return f(pb, attrs)
    
    if p == 'ResLevelCost':
        attrs = ['cost_type', 'cost_cnt']
        return f(pb, attrs)
    
    if p == 'ResUnlockBuilding':
        attrs = ['building_id']
        return f(pb, attrs)
    
    if p == 'ResBuildingLevel':
        attrs = ['building_id', 'building_lv', 'building_pic', 'level_cost', 'level_cost_time', 'unlock_info']
        return f(pb, attrs)
    
    if p == 'ResHeroTowerLevel':
        attrs = ['building_id', 'building_lv', 'building_pic', 'level_cost', 'level_cost_time', 'max_hero_level', 'unlock_dun_id', 'level_priority']
        return f(pb, attrs)
    
    if p == 'ResIslandProduct':
        attrs = ['res_type', 'born_cnt', 'born_id', 'born_time', 'born_limit']
        return f(pb, attrs)
    
    if p == 'ResIslandLevel':
        attrs = ['island_id', 'island_lv', 'island_pic', 'level_cost', 'level_cost_time', 'product', 'unlock_dun_id', 'level_priority']
        return f(pb, attrs)
    
    if p == 'ResResourceStoreLevel':
        attrs = ['res_store_id', 'res_store_lv', 'res_store_pic', 'res_store_type', 'res_limit', 'recover_interval', 'level_cost', 'level_cost_time', 'unlock_dun_id', 'level_priority']
        return f(pb, attrs)
    
    if p == 'ResLevelArr':
        attrs = ['level', 'steal_battle_search_cost_type', 'steal_battle_search_cost_id', 'steal_battle_search_cost_count', 'gang_battle_reward_gold_target', 'gang_battle_reward_crystal_target', 'gang_battle_reward_gold_self', 'gang_battle_reward_crystal_self', 'monster_cnt']
        return f(pb, attrs)
    
    if p == 'ResInitHero':
        attrs = ['hero_id']
        return f(pb, attrs)
    
    if p == 'ResInitSlot':
        attrs = ['slot_id']
        return f(pb, attrs)
    
    if p == 'ResOverHitProduction':
        attrs = ['over_hit_phase', 'coin_production', 'diamond_production']
        return f(pb, attrs)
    
    if p == 'ResInitMonster':
        attrs = ['monster_grp_id', 'monster_grp_lv']
        return f(pb, attrs)
    
    if p == 'ResInitUnlockDun':
        attrs = ['dun_id']
        return f(pb, attrs)
    
    if p == 'ResUnlockTrainSlot':
        attrs = ['slot_id', 'cost_money']
        return f(pb, attrs)
    
    if p == 'ResInitBuildingInfo':
        attrs = ['building_id', 'building_lv']
        return f(pb, attrs)
    
    if p == 'ResBuyWipeoutItemInfo':
        attrs = ['item_count', 'item_price']
        return f(pb, attrs)
    
    if p == 'ResPveUnlockInfo':
        attrs = ['dunid', 'type', 'lv']
        return f(pb, attrs)
    
    if p == 'ResEndlessMonsterScore':
        attrs = ['score']
        return f(pb, attrs)
    
    if p == 'ResGamePlayModeDamageRate':
        attrs = ['game_play_mode', 'damage_rate']
        return f(pb, attrs)
    
    if p == 'ResMiscInfo':
        attrs = ['player_max_level', 'monster_max_level', 'init_crystal', 'init_gold', 'init_money', 'init_slot_id', 'init_building_info', 'init_hero_id', 'init_unlock_dun_id', 'endless_limit', 'combo_max_time', 'over_hit_max_time', 'over_hit_max_hp_percent', 'over_hit_add_score_ratio', 'left_time_add_score_ratio', 'over_hit_production', 'create_gang_cost_gold', 'fighting_hprate', 'fighting_atk_rate', 'gang_battle_dun_id', 'gang_battle_round_time_limit', 'endless_chamber_size_factor', 'endless_boss_hp_recover_drop_ratio', 'endless_boss_hp_recover_drop_count', 'rank_battle_dungeon_id', 'rank_battle_round_time_limit', 'rank_battle_base_count', 'rank_battle_buy_count_base_cost', 'rank_battle_unlock_role_cnt', 'daily_reset_time', 'endless_room_cnt', 'endless_floor_cnt_per_milestone', 'steal_battle_money_res_dun_id', 'steal_battle_gold_res_dun_id', 'steal_battle_crystal_res_dun_id', 'steal_battle_exp_res_dun_id', 'endless_refresh_hour', 'endless_refresh_min', 'endless_refresh_sec', 'wipe_out_need_item_id', 'buy_wipe_out_item_info', 'goods_common_count', 'goods_special_count', 'damage_ratio_factor', 'hp_ratio_factor', 'skill_point_display_item_id', 'pve_unlock_info', 'league_battle_small_city_lv', 'league_battle_mid_city_lv', 'league_battle_big_city_lv', 'rank_battle_hero_hide_level1', 'rank_battle_hero_hide_level2', 'rank_battle_hero_hide_level3', 'gang_bless_count_refresh_hour', 'gang_bless_count_refresh_min', 'gang_bless_count_refresh_sec', 'shop_count_refresh_hour', 'shop_count_refresh_min', 'shop_count_refresh_sec', 'fail_power', 'money_confirm_threshold', 'endless_monster_type_score', 'gang_battle_small_city_score', 'gang_battle_moderate_city_score', 'gang_battle_big_city_score', 'elite_mode_chances', 'elite_count_refresh_hour', 'elite_count_refresh_min', 'elite_count_refresh_sec', 'assist_fight_times_limit', 'online_battle_dun_id', 're_sign_cost_type', 're_sign_cost_price', 'init_hero_main_task_unlock_dun_id', 'normal_elite_hp_rate', 'normal_elite_st_rate', 'normal_boss_hp_rate', 'normal_boss_st_rate', 'endless_elite_hp_rate', 'endless_elite_st_rate', 'endless_boss_hp_rate', 'endless_boss_st_rate', 'elite_buy_count_cost_type', 'elite_buy_count_cost_id', 'elite_buy_count_cost_count', 'elite_buy_max_count', 'offline_battle_dun_id', 'role_relation_unlock_level', 'rank_battle_goods_common_count', 'rank_battle_goods_special_count', 'online_battle_init_score', 'online_battle_times_perday', 'online_battle_score_calc_ratio_a', 'online_battle_score_calc_ratio_b', 'online_battle_search_score', 'online_battle_match_wait_seconds', 'online_battle_win_point_ratio', 'online_battle_loseer_win_point_ratio', 'endless_wipeout_price_per_floor', 'game_play_mode_damage_rate', 'first_reward_info', 'loading_tip_count', 'vip_goods_common_count', 'vip_goods_special_count', 'vip_draw_all_unlock_level', 'steal_battle_times_limit', 'friend_power_cnt', 'damage_float_up', 'damage_float_down', 'max_recv_power_times_one_day', 'ten_wipeout_viplimit', 'vip_shop_unlock_viplevel', 'max_send_power_times_one_day', 'pve_autofight_unlock_viplevel', 'friend_max_recommend_num', 'pve_autofight_unlock_dungoen_id', 'vip_wipeout_count', 'chat_unlock_dun_id', 'eventtip_unlock_dun_id', 'world_boss_dun_id', 'reward_be_invited', 'world_boss_room_time_limit', 'rename_price', 'world_boss_qualified_hero_level', 'world_boss_reset_time', 'world_boss_start_time', 'world_boss_finish_time', 'world_boss_interval', 'world_boss_character_scale', 'equip_fusion_score_param', 'equip_fusion_ratio_param', 'equip_fusion_alloc_param', 'newbie_activity_lasts_seconds', 'rank_battle_max_pos', 'purify_cost_base_gold', 'gang_battle_search_sect', 'gang_battle_search_score_diff', 'gang_battle_search_fight_capacity_diff', 'endless_available_floor_count', 'boss_rush_assist_hero_tax_rate', 'boss_rush_reset_hour', 'assist_hero_unlock_vip_level', 'use_assist_hero_unlock_vip_level', 'boss_rush_replace_money', 'boss_rush_reset_item_id', 'multiplayer_invite_friend_wait_seconds', 'equip_reset_growup_gold_off', 'equip_reset_growup_equip_off', 'equip_reset_levelup_exp_off', 'wipe_out_steal_battle_cost', 'wipe_out_steal_battle_vip_limit', 'top_battle_dungeon_id', 'top_battle_base_count', 'multiplayer_pve_ticket_item_id', 'top_battle_hero_hide_level1', 'top_battle_hero_hide_level2', 'top_battle_hero_hide_level3', 'player_max_growup', 'multiplayer_pve_free_ticket_limit_seconds', 'gang_leave_time_limit', 'multiplayer_choose_role_seconds_limit', 'topthree_open_time']
        return f(pb, attrs)
    
    if p == 'ResGamePlayInfo':
        attrs = ['burst_discount_damage', 'burst_repeate_max_count', 'repeate_discount_2', 'repeate_discount_3', 'repeate_discount_4', 'sp_lack_add_repeate_count', 'hero_buff_superarmor_add', 'burst_common_cd', 'serial_push_active_time', 'serial_push_protect_time', 'hp_steal_max_distance', 'default_superarmor_discount', 'pve_boss_superarmor_rate', 'other_boss_superarmor_rate', 'gang_battle_sp_rate', 'online_battle_sp_rate', 'steal_battle_sp_rate', 'dp_recover_timeout', 'online_battle_2p_ability_rate', 'rank_battle_ability_rate', 'top_battle_ability_rate', 'subtraction_sa_rate', 'battle_sa_ignore_skill', 'serial_push_active_time_gang_battle', 'serial_push_active_time_pvp_battle', 'repeat_add_victim_sp_rate', 'repeat_protect_time_tick', 'repeat_allow_count', 'repeat_add_attack_sp_rate', 'enable_hp_steal_hit_box_check']
        return f(pb, attrs)
    
    if p == 'ResWorldBossStrength':
        attrs = ['boss_id', 'boss_hurt_amount', 'strength']
        return f(pb, attrs)
    
    if p == 'ResWorldBossHeroTask':
        attrs = ['week_day', 'hero_id', 'require_damage', 'reward']
        return f(pb, attrs)
    
    if p == 'ResWorldBossRefreshInfo':
        attrs = ['week_day', 'boss_id', 'kill_reward_protrait_id', 'kill_reward_base_drop_id', 'kill_reward_preview', 'lucky_reward_rank_limit', 'lucky_reward_base_drop_id', 'lucky_reward_preview']
        return f(pb, attrs)
    
    if p == 'ResWorldBossDamageReward':
        attrs = ['boss_id', 'rank', 'base_drop_id', 'reward']
        return f(pb, attrs)
    
    if p == 'ResWorldBossNormalReward':
        attrs = ['boss_id', 'damage', 'gold_ratio', 'gold_pre_sum', 'crystal_ratio', 'crystal_pre_sum']
        return f(pb, attrs)
    
    if p == 'ResMultiplayerPVEHeroBuff':
        attrs = ['hero_id', 'ability', 'attr_type', 'is_ratio', 'value']
        return f(pb, attrs)
    
    if p == 'ResMultiplayerPVEConfig':
        attrs = ['group_id', 'is_open', 'dun_index']
        return f(pb, attrs)
    
    if p == 'ResMultiplayerPVEDungeonConfig':
        attrs = ['dun_index', 'dun_ability', 'pre_dun_index', 'group_id', 'random_dun_id', 'dun_lv', 'paid_drop_info', 'paid_drop_display_info', 'free_drop_info', 'free_drop_display_info', 'difficulty', 'is_open']
        return f(pb, attrs)
    
    if p == 'ResNewbieActivity':
        attrs = ['id', 'limit_date', 'group', 'type', 'display_priority', 'icon', 'reward_info', 'target_parameter']
        return f(pb, attrs)
    
    if p == 'ResGamePlayModeActivity':
        attrs = ['dungeon_type', 'daily_start_time', 'daily_finish_time', 'extra_start_date', 'extra_finish_date', 'regular_start_week_day', 'daily_reset_hour', 'daily_reset_min', 'daily_reset_sec', 'daily_reset_param', 'reset_daily']
        return f(pb, attrs)
    
    if p == 'ResRankReward':
        attrs = ['rank', 'base_drop_id', 'reward', 'rank_id']
        return f(pb, attrs)
    
    if p == 'ResHeroEvaluate':
        attrs = ['main_level', 'sub_level', 'pvp_score_down', 'pvp_score_up']
        return f(pb, attrs)
    
    if p == 'ResGangMiscInfo':
        attrs = ['search_gang_list_low_bounder', 'search_gang_list_up_bounder', 'gang_score_calc_ratio_a', 'gang_score_calc_ratio_b', 'gang_battle_win_pre_ratio', 'gang_battle_lose_pre_ratio', 'gang_battle_draw_pre_ratio', 'gang_battle_auto_apply_limit_score', 'clear_gang_bless_record_week', 'clear_gang_bless_record_hour', 'clear_gang_bless_record_min', 'clear_gang_bless_record_sec']
        return f(pb, attrs)
    
    if p == 'ResGangBless':
        attrs = ['id', 'rate', 'reward_type', 'reward_id', 'reward_count', 'drop_id']
        return f(pb, attrs)
    
    if p == 'ResGangLevelInfo':
        attrs = ['lv', 'lv_icon', 'lv_corner_icon', 'low_score', 'high_score', 'gang_mem_max_count', 'gang_elder_max_count', 'small_city_strongpoint_num', 'moderate_city_strongpoint_num', 'big_city_strongpoint_num', 'bless_max_count']
        return f(pb, attrs)
    
    if p == 'ResGangBattleTime':
        attrs = ['week', 'state']
        return f(pb, attrs)
    
    if p == 'ResGangBattleReward':
        attrs = ['lv', 'win_reward', 'lose_reward', 'draw_reward']
        return f(pb, attrs)
    
    if p == 'ResRobotBuild':
        attrs = ['res_type', 'cur_born_res_low', 'cur_born_res_high', 'hero_lv_low', 'hero_lv_high', 'hero_strength_low', 'hero_strength_high', 'hero_stamina_low', 'hero_stamina_high', 'monster_id', 'monster_lv', 'trap_id', 'trap_lv']
        return f(pb, attrs)
    
    if p == 'ResPvpRobot':
        attrs = ['uid', 'max_fight_capacity', 'name']
        return f(pb, attrs)
    
    if p == 'ResPvpMisc':
        attrs = ['steal_res_percent', 'broken_percent', 'search_result_max', 'search_sect_max', 'search_time_interval']
        return f(pb, attrs)
    
    if p == 'ResPvpSearchSect':
        attrs = ['fight_capacity_low', 'fight_capacity_high', 'pvp_robot_build_info', 'pvp_search_offset', 'pvp_search_low', 'pvp_search_high']
        return f(pb, attrs)
    
    if p == 'ResStealBattlePrizeDraw':
        attrs = ['low_fight_power', 'high_fight_power', 'drop_id']
        return f(pb, attrs)
    
    if p == 'ResDunLimit':
        attrs = ['hero_id', 'hero_level']
        return f(pb, attrs)
    
    if p == 'ResDunEvaluate':
        attrs = ['dun_time', 'remain_hprate', 'max_combo']
        return f(pb, attrs)
    
    if p == 'ResReliveCost':
        attrs = ['relive_cnt', 'relive_cost']
        return f(pb, attrs)
    
    if p == 'ResPosInfo':
        attrs = ['pos_x', 'pos_y']
        return f(pb, attrs)
    
    if p == 'ResDropIndex':
        attrs = ['drop_index']
        return f(pb, attrs)
    
    if p == 'ResDungeonNeedItem':
        attrs = ['item_id', 'item_num']
        return f(pb, attrs)
    
    if p == 'ResEvaluate':
        attrs = ['parameter']
        return f(pb, attrs)
    
    if p == 'ResDungeonInfo':
        attrs = ['dungeon_id', 'dungeon_name', 'dungeon_type', 'mode', 'required_ability', 'is_refresh', 'cost_power', 'pre_dun_id', 'unlock_role_id', 'init_level', 'relive_cost', 'apperance', 'reward', 'dun_evaluate', 'first_drop_info', 'non_first_drop_info', 'wipe_out_drop_info', 'need_item', 'drop_display_info', 'evaluate_info', 'is_elite_drop', 'drop_exp_limit', 'drop_exp_add', 'elite_drop_index', 'display_elite_drop_equip', 'new_role_buff_stamina', 'new_role_buff_strength', 'activity_drop_info', 'first_drop_display_info', 'activity_drop_exp_add', 'manual_drop_info']
        return f(pb, attrs)
    
    if p == 'ResDungeonData':
        attrs = ['dungeon_id', 'relive_limit', 'scene_name', 'bgm']
        return f(pb, attrs)
    
    if p == 'ResDungeonFightCapacityFix':
        attrs = ['id', 'ability_low', 'ability_min_diff', 'atk_fix', 'life_fix', 'super_armor_fix', 'is_hero_win']
        return f(pb, attrs)
    
    if p == 'ResDungeonReward':
        attrs = ['level', 'reward_info']
        return f(pb, attrs)
    
    if p == 'ResDungeonCity':
        attrs = ['city_id', 'mode', 'name_tag', 'pre_city_id', 'unlock_item_id', 'unlock_item_count', 'dun_id', 'icon_pos']
        return f(pb, attrs)
    
    if p == 'ResPracticeLimit':
        attrs = ['skill_id']
        return f(pb, attrs)
    
    if p == 'ResPracticeTarget':
        attrs = ['action', 'operation']
        return f(pb, attrs)
    
    if p == 'ResPracticeDun':
        attrs = ['hero_id', 'chapter_id', 'section_id', 'desc', 'icon', 'quest_id', 'dun_id', 'pre_dun_id', 'hero_level', 'dun_limit', 'dun_reward', 'dun_target']
        return f(pb, attrs)
    
    if p == 'ResTargetInfo':
        attrs = ['parameter']
        return f(pb, attrs)
    
    if p == 'ResAchievement':
        attrs = ['achievement_id', 'target_type', 'sub_id', 'group_id', 'pre_id', 'display_type', 'display_priority', 'achievement_score', 'title', 'desc', 'icon', 'is_short_cut', 'reward_info', 'target_info']
        return f(pb, attrs)
    
    if p == 'ResAchievementGameCenter':
        attrs = ['type', 'count', 'gamecenter_id']
        return f(pb, attrs)
    
    if p == 'ResSpecialActivity':
        attrs = ['id', 'type', 'display_priority', 'reward_info', 'target_info']
        return f(pb, attrs)
    
    if p == 'ResDailyTask':
        attrs = ['daily_task_id', 'target_type', 'display_priority', 'icon', 'reward_info', 'target_info']
        return f(pb, attrs)
    
    if p == 'ResMainTask':
        attrs = ['id', 'seqid', 'type', 'group_id', 'remind_dun_id', 'reward_info', 'target_info']
        return f(pb, attrs)
    
    if p == 'ResLoadingPicParam':
        attrs = ['pic_index', 'tips_index']
        return f(pb, attrs)
    
    if p == 'ResLoadingPic':
        attrs = ['dun_id_start', 'loading_param']
        return f(pb, attrs)
    
    if p == 'ResColorMatchingParam':
        attrs = ['hue_min_angle', 'hue_max_angle', 'hue_angle']
        return f(pb, attrs)
    
    if p == 'ResColorMatching':
        attrs = ['id', 'param']
        return f(pb, attrs)
    
    if p == 'ResOnlineBattleTitle':
        attrs = ['score', 'title_id', 'level_id']
        return f(pb, attrs)
    
    if p == 'ResOfflineBattleTitle':
        attrs = ['title_id', 'require_score', 'bonus_att_damage', 'bonus_att_hp']
        return f(pb, attrs)
    
    if p == 'ResSceneInfo':
        attrs = ['scene_name', 'in_video', 'in_battle', 'in_endless', 'in_pvp']
        return f(pb, attrs)
    
    if p == 'ResDungeonMonster':
        attrs = ['dungeon_id', 'room_id', 'monster_id', 'monster_wave_id', 'monster_cnt', 'monster_level', 'monster_born_type', 'monster_born_type_param', 'monster_pos_x', 'monster_pos_y', 'monster_group', 'monster_born_action', 'monster_born_face', 'monster_hp_rate']
        return f(pb, attrs)
    
    if p == 'ResDunMonSpec':
        attrs = ['dungeon_id', 'room_id', 'monster_id', 'monster_wave_id', 'monster_cnt', 'monster_level', 'monster_born_type', 'monster_born_type_param', 'monster_pos_x', 'monster_pos_y', 'monster_group', 'monster_born_action', 'monster_born_face', 'monster_hp_rate']
        return f(pb, attrs)
    
    if p == 'ResDungeonRoom':
        attrs = ['dungeon_id', 'room_id', 'time_limit', 'pass_add_time', 'wave_refresh_monster_type', 'wave_refresh_monster_param', 'born_pos_x', 'gravity_x', 'gravity_y', 'border_left', 'border_right', 'action_limit', 'chamber_objective', 'reward', 'drop_info', 'ability_base_value', 'complete_time_base_value']
        return f(pb, attrs)
    
    if p == 'ResConLoginReward':
        attrs = ['con_login_days', 'con_login_type', 'muti_vip_limit', 'muti_num', 'reward']
        return f(pb, attrs)
    
    if p == 'ResHeroDropInfo':
        attrs = ['hero_id', 'drop_id']
        return f(pb, attrs)
    
    if p == 'ResScoreToResource':
        attrs = ['floor', 'reward_info', 'drop_info', 'drop_box_class', 'drop_display_info']
        return f(pb, attrs)
    
    if p == 'ResTimeToMoney':
        attrs = ['sort_id', 'down_limit', 'up_limit', 'ratio', 'max_money']
        return f(pb, attrs)
    
    if p == 'ResSkillData':
        attrs = ['skill_id', 'job_id', 'tree_pos', 'skill_name', 'skill_desc_param', 'skill_index', 'skill_level', 'skill_damage', 'endure_value', 'sub_skill_id', 'skill_set_id', 'operation', 'hit_add_sp', 'damage_att_rate', 'skill_icon', 'levelup_cost_sp', 'levelup_cost_res', 'limit_level', 'pre_skill_index', 'final_skill_cost_sp', 'skill_meta', 'fight_capacity', 'show_golden_frame', 'skill_combat_damage', 'extra_attr']
        return f(pb, attrs)
    
    if p == 'ResSkillTree':
        attrs = ['hero_id', 'skill_set_id', 'relation_sequence', 'skill_index_sequence', 'skill_pos', 'skill_preview_offset_x', 'skill_preview_offset_y', 'skill_index']
        return f(pb, attrs)
    
    if p == 'ResRankValInfo':
        attrs = ['val_name', 'val_type', 'min_val', 'max_val', 'sort_type']
        return f(pb, attrs)
    
    if p == 'ResRankInfo':
        attrs = ['rank_id', 'rank_name', 'rank_base_type', 'rank_flush_type', 'rank_capacity', 'get_list_max_num', 'day_flush_hour', 'day_flush_min', 'day_flush_sec', 'day_flush_time', 'min_level', 'max_level', 'rank_val_info', 'rank_flush_param', 'reward_dispatch_type', 'reward_dispatch_param=', 'reward_dispatch_hour', 'reward_dispatch_min', 'reward_dispatch_sec', 'first_flush_time', 'force_flush_time']
        return f(pb, attrs)
    
    if p == 'ResRankBattleSectInfo':
        attrs = ['low_val', 'high_val']
        return f(pb, attrs)
    
    if p == 'ResRankBattleInfo':
        attrs = ['id', 'capacity', 'get_list_max_num']
        return f(pb, attrs)
    
    if p == 'ResRankBattleSect':
        attrs = ['rank_low', 'rank_high', 'rank_sect']
        return f(pb, attrs)
    
    if p == 'ResRankBattleReward':
        attrs = ['rank_low', 'rank_high', 'every_day_reward', 'promote_reward', 'activity_reward']
        return f(pb, attrs)
    
    if p == 'ResRankBattleRobotHeroInfo':
        attrs = ['hero_id', 'hero_lv', 'hero_strength', 'hero_stamina', 'hero_growup', 'fight_capacity']
        return f(pb, attrs)
    
    if p == 'ResRankBattleRobot':
        attrs = ['uid', 'robot_name', 'head_photo', 'hero_info']
        return f(pb, attrs)
    
    if p == 'ResOnlineBattleRobotHeroInfo':
        attrs = ['hero_id', 'hero_strength', 'hero_stamina', 'fight_capacity']
        return f(pb, attrs)
    
    if p == 'ResOnlineBattleRobot':
        attrs = ['uid', 'robot_name', 'score', 'hero_info']
        return f(pb, attrs)
    
    if p == 'ResOnlineBattleShopBox':
        attrs = ['pos', 'icon', 'price', 'base_drop_id']
        return f(pb, attrs)
    
    if p == 'ResGrowUpCondition':
        attrs = ['condition', 'condition_param_1', 'condition_param_2']
        return f(pb, attrs)
    
    if p == 'ResGrowUp':
        attrs = ['hero_id', 'grow_up_id', 'grow_up_condition', 'grow_up_ned_chip_info', 'grow_up_name', 'grow_up_icon']
        return f(pb, attrs)
    
    if p == 'ResPurchase':
        attrs = ['product_index', 'product_name', 'product_picture', 'product_id', 'price', 'product_type', 'activity_id', 'count', 'promotion_cnt', 'reward_info', 'channel', 'additional', 'first_reward_type', 'login_plat_type', 'localized_price']
        return f(pb, attrs)
    
    if p == 'ResMonthCard':
        attrs = ['id', 'type', 'name', 'valid_time', 'daily_reward']
        return f(pb, attrs)
    
    if p == 'ResBusinessRefresh':
        attrs = ['business_id', 'business_name', 'trigger_type', 'refresh_hour', 'refresh_minute', 'refresh_second', 'beg_time_year', 'beg_time_month', 'beg_time_day', 'end_time_year', 'end_time_month', 'end_time_day']
        return f(pb, attrs)
    
    if p == 'ResGroupBuy':
        attrs = ['group_buy_id', 'group_buy_desc', 'beg_time', 'end_time', 'cost_money', 'is_refresh', 'buy_reward']
        return f(pb, attrs)
    
    if p == 'ResGrowthFundReward':
        attrs = ['id', 'target_dunid', 'reward']
        return f(pb, attrs)
    
    if p == 'ResCumulateRecharge':
        attrs = ['id', 'recharge_name', 'target_recharge', 'reward', 'daily_reward', 'daily_buy_cost', 'daily_buy', 'daily_free', 'daily_buy_cost_discount', 'daily_buy_cost_real']
        return f(pb, attrs)
    
    if p == 'ResSlotInfo':
        attrs = ['slot_id', 'open_limit']
        return f(pb, attrs)
    
    if p == 'ResParamInfo':
        attrs = ['parameter']
        return f(pb, attrs)
    
    if p == 'ResGiftGroup':
        attrs = ['gift_group_id', 'ex_change_cnt']
        return f(pb, attrs)
    
    if p == 'ResGift':
        attrs = ['gift_id', 'gift_group_id', 'title', 'content', 'reward', 'enabled', 'pre_group_id', 'platform', 'channel_id', 'claim_interval_type']
        return f(pb, attrs)
    
    if p == 'ResItem':
        attrs = ['item_id', 'item_name', 'item_desc', 'item_level', 'item_type', 'can_use', 'item_quality', 'item_use_level', 'item_page_index', 'item_slot_index', 'sort_type', 'is_can_drop', 'package_wrap', 'pic_id', 'func_type', 'tab_type', 'parameter', 'drop_dun_id', 'output', 'evaluate', 'system_billboard', 'drop_effect']
        return f(pb, attrs)
    
    if p == 'ResEquipAttrRatio':
        attrs = ['attr_type', 'ratio', 'relative_attr_type']
        return f(pb, attrs)
    
    if p == 'ResEquipAttr':
        attrs = ['attr_type', 'attr_value', 'is_ratio', 'attr_str_inc_value', 'attr_sta_inc_value']
        return f(pb, attrs)
    
    if p == 'ResEquip':
        attrs = ['equip_id', 'pack_pic_id', 'evaluate', 'color', 'weight', 'equip_pos', 'base_exp', 'job_type', 'attr_base_strength', 'attr_base_stamina', 'sell_reward', 'awesome_desc', 'levelup_strength_inc', 'levelup_stamina_inc', 'levelup_max_level', 'can_batch_sell', 'bind_to_hero', 'item_slot_index', 'return_gem_ratio', 'attr_color', 'attr_wakeup', 'attr_growup', 'drop_dun_id', 'output', 'is_retrieve', 'is_rubbish', 'can_use', 'random_index', 'base_purify_exp', 'can_fusion', 'box_color', 'box_type']
        return f(pb, attrs)
    
    if p == 'ResPurifyAttr':
        attrs = ['level', 'add_strength_rate', 'add_stamina_rate', 'add_strength_value', 'add_stamina_value', 'need_exp']
        return f(pb, attrs)
    
    if p == 'ResPurifyLevel':
        attrs = ['equip_pos', 'level_attr']
        return f(pb, attrs)
    
    if p == 'ResEquipBox':
        attrs = ['index', 'hero_id', 'drop_index']
        return f(pb, attrs)
    
    if p == 'ResEquipGrowup':
        attrs = ['equip_id', 'growup_level', 'material', 'extra_gold', 'attr', 'need_equip_level=', 'reset_money']
        return f(pb, attrs)
    
    if p == 'ResEquipWakeupCondition':
        attrs = ['cnt', 'min_level', 'gold_cost']
        return f(pb, attrs)
    
    if p == 'ResEquipGrowupCondition':
        attrs = ['equip_cnt', 'gold_cost']
        return f(pb, attrs)
    
    if p == 'ResEquipColor':
        attrs = ['color', 'pos', 'exp_to_gold', 'chance_to_increase_sp', 'wakeup_item_id', 'return_item_ratio', 'wakeup_condition', 'growup_condition', 'exp_to_reset_money']
        return f(pb, attrs)
    
    if p == 'ResEquipColorLevelup':
        attrs = ['level', 'need_exp']
        return f(pb, attrs)
    
    if p == 'ResEquipColorLevelAttr':
        attrs = ['color', 'pos', 'level', 'strength', 'stamina']
        return f(pb, attrs)
    
    if p == 'ResEquipRecommend':
        attrs = ['hero_id', 'dun_id_start', 'dun_id_end', 'recommend_equip_id']
        return f(pb, attrs)
    
    if p == 'ResEquipFusionTargetInfo':
        attrs = ['target_price', 'retrieve_id', 'addtion_res_type', 'addtion_res_id', 'addtion_res_count', 'addtion_buy_res_type', 'addtion_buy_res_id', 'addtion_buy_res_count', 'addtion_use_limit', 'addtion_ratio']
        return f(pb, attrs)
    
    if p == 'ResEquipFusion':
        attrs = ['fusion_price_low', 'fusion_price_high', 'fusion_target_info']
        return f(pb, attrs)
    
    if p == 'ResFactor':
        attrs = ['factor_id', 'factor_type', 'factor_level', 'drop_dun_id', 'output']
        return f(pb, attrs)
    
    if p == 'ResFactorMisc':
        attrs = ['upgrade_count', 'max_factor_level', 'unlock_level', 'reduce_target_sp_chance', 'gain_sp_by_hit_chance']
        return f(pb, attrs)
    
    if p == 'ResFactorTriggerAttr':
        attrs = ['attr_id', 'base_factor_type', 'factor_type', 'factor_level', 'factor_attr', 'trigger_attr_group_id']
        return f(pb, attrs)
    
    if p == 'ResFactorSkill':
        attrs = ['factor_skill_id', 'hero_id', 'skill_level', 'required_factor_count', 'required_factor_level', 'skill_add_role_id', 'skill_action', 'skill_ratio', 'skill_cooldown']
        return f(pb, attrs)
    
    if p == 'ResDropElem':
        attrs = ['drop_item_type', 'drop_item_id', 'drop_item_num', 'drop_ratio', 'drop_grp_id']
        return f(pb, attrs)
    
    if p == 'ResBaseDrop':
        attrs = ['drop_id', 'drop_elem']
        return f(pb, attrs)
    
    if p == 'ResWorldDrop':
        attrs = ['id', 'beg_time', 'end_time', 'drop_limit']
        return f(pb, attrs)
    
    if p == 'ResRetrieveInfo':
        attrs = ['id', 'type', 'parameter']
        return f(pb, attrs)
    
    if p == 'ResParam':
        attrs = ['parametre']
        return f(pb, attrs)
    
    if p == 'ResUserTipData':
        attrs = ['id', 'tipText']
        return f(pb, attrs)
    
    if p == 'ResMailContent':
        attrs = ['id', 'title', 'content', 'reward_money', 'reward_gold', 'reward_crystal', 'persist_time']
        return f(pb, attrs)
    
    if p == 'ResPrizeDrawHero':
        attrs = ['hero_id', 'normal_drop_id', 'special_drop_id']
        return f(pb, attrs)
    
    if p == 'ResPrizeDraw':
        attrs = ['id', 'prize_draw_cost_type', 'prize_draw_cost_id', 'prize_draw_cost_count', 'mall_type', 'mall_id', 'mall_count', 'counteract_type', 'counteract_id', 'counteract_count', 'free_max_count', 'free_use_interval', 'free_refresh_time_by_last_use_time', 'free_refresh_time_by_last_refresh_time_hour', 'free_refresh_time_by_last_refresh_time_min', 'free_refresh_time_by_last_refresh_time_sec', 'first_prize_draw_drop_index', 'prize_draw_drop_index', 'prize_draw_preview_info', 'prize_draw_by_hero_cnt_limit', 'prize_draw_hero_info']
        return f(pb, attrs)
    
    if p == 'ResShopRefresh':
        attrs = ['type', 'id', 'time']
        return f(pb, attrs)
    
    if p == 'ResBuyRate':
        attrs = ['critical_rate', 'buy_cnt']
        return f(pb, attrs)
    
    if p == 'ResRefreshPrice':
        attrs = ['type', 'count', 'is_vip', 'res_type', 'res_id', 'res_count', 'once_buy_cnt', 'buy_rate']
        return f(pb, attrs)
    
    if p == 'ResShopGoods':
        attrs = ['id', 'type', 'vip_level_limit', 'is_first_goods', 'goods_res_type', 'goods_res_id', 'goods_cnt', 'price_type', 'price', 'discount', 'discount_begin_time_string', 'discount_end_time_string', 'discount_begin_time', 'discount_end_time']
        return f(pb, attrs)
    
    if p == 'ResShopRandomGoodsInfo':
        attrs = ['goods_id', 'goods_probability']
        return f(pb, attrs)
    
    if p == 'ResShopRandom':
        attrs = ['type', 'hero_id', 'hero_lv_low', 'hero_lv_high', 'goods_random_info']
        return f(pb, attrs)
    
    if p == 'ResTutorialRule':
        attrs = ['dun_id', 'demo', 'actions']
        return f(pb, attrs)
    
    if p == 'ResBible':
        attrs = ['category_id', 'category_name', 'page_contents']
        return f(pb, attrs)
    
    if p == 'ResFriendRecommendInfo':
        attrs = ['low', 'high']
        return f(pb, attrs)
    
    if p == 'ResFriendRecommendSect':
        attrs = ['fight_capacity_low', 'fight_capacity_high', 'recommend_info']
        return f(pb, attrs)
    
    if p == 'ResTutorialInfo':
        attrs = ['tutorial_dugeon_id', 'tutorial_dugeon_hero', 'tutorial_dugeon_hero_id', 'first_steller_id', 'first_planet_id', 'role_level_skill_upgrade', 'hero_tower_level', 'role_level_hero_tower', 'gold_mine_building_id', 'unlock_dun_item_shop', 'unlock_dun_emblem', 'role_id_emblem', 'unlock_dun_role_upgrade', 'role_level_skill_burst', 'sp_skill_burst', 'sp_skill_ultimatet', 'sp_skill_charge', 'new_hero_steller_id', 'new_hero_planet_id', 'resource_store_type', 'island_id', 'role_level_equip_levelup', 'unlock_dun_join_league', 'exp_mine_building_id', 'money_mine_building_id', 'mall_building_id', 'expitem_id']
        return f(pb, attrs)
    
    if p == 'ResHeroImageInfo':
        attrs = ['id', 'share_hero_card_offset_x', 'share_hero_card_offset_y', 'share_hero_card_scale', 'share_hero_pve_offset_x', 'share_hero_pve_offset_y', 'share_hero_pve_scale']
        return f(pb, attrs)
    
    if p == 'ST_ACTION_DESC':
        attrs = ['name', 'tips_tag', 'guide_effect']
        return f(pb, attrs)
    
    if p == 'ST_BATTLE_ROBOT_INFO':
        attrs = ['hero_id', 'hero_lv', 'hero_grow_up', 'hero_strength', 'hero_stamina']
        return f(pb, attrs)
    
    if p == 'ResRoleCommandList':
        attrs = ['hero_id', 'item_number', 'skill_name_id', 'command', 'is_special']
        return f(pb, attrs)
    
    if p == 'ResDailyTime':
        attrs = ['hour', 'minute', 'second']
        return f(pb, attrs)
    
    if p == 'ResActivity':
        attrs = ['activity_id', 'activity_name', 'activity_type', 'activity_parameter', 'trigger_type', 'beg_time', 'end_time', 'close_time', 'daily_beg_time', 'daily_end_time']
        return f(pb, attrs)
    
    if p == 'ResNameExtra':
        attrs = ['id', 'type', 'prefix', 'postfix']
        return f(pb, attrs)
    
    if p == 'ResZoneInfo':
        attrs = ['zone_id', 'ip', 'port']
        return f(pb, attrs)
    
    if p == 'ResWorldZone':
        attrs = ['world_id', 'zone_info']
        return f(pb, attrs)
    
    if p == 'ResRoleAttribute':
        attrs = ['hero_id', 'attack', 'agility', 'range', 'combo', 'endure', 'hp']
        return f(pb, attrs)
    
    if p == 'ResCumulateCost':
        attrs = ['id', 'cumulate_cost', 'reward']
        return f(pb, attrs)
    
    if p == 'ResBossRushChapter':
        attrs = ['chapter_id', 'unlock_hero_level']
        return f(pb, attrs)
    
    if p == 'ResBossRushDrop':
        attrs = ['monster_id', 'drop_info', 'drop_index', 'activity_drop_index']
        return f(pb, attrs)
    
    if p == 'ResBossRushDungeon':
        attrs = ['chapter_id', 'sequence', 'dungeon_id', 'is_boss', 'monster_id', 'boss_stage_monster_id', 'monster_rank']
        return f(pb, attrs)
    
    if p == 'ResFirstRecharge':
        attrs = ['reward', 'id', 'target_recharge_cnt', 'reward_equivalent']
        return f(pb, attrs)
    
    if p == 'ResDailyRecharge':
        attrs = ['id', 'target_recharge_cnt', 'reward']
        return f(pb, attrs)
    
    if p == 'ResSectRecharge':
        attrs = ['id', 'target_recharge_cnt', 'reward']
        return f(pb, attrs)
    
    if p == 'ResTalentAttr':
        attrs = ['attr_type', 'attr_value', 'is_ratio']
        return f(pb, attrs)
    
    if p == 'ResTalentActiveInfo':
        attrs = ['active_res_type', 'active_res_id', 'active_res_count']
        return f(pb, attrs)
    
    if p == 'ResTalent':
        attrs = ['hero_id', 'talent_id', 'talent_lv', 'hero_lv_limit', 'level', 'level_max_active_num', 'type', 'stamina', 'strength', 'talent_attr', 'talent_active_info']
        return f(pb, attrs)
    
    if p == 'ResTalentHide':
        attrs = ['hero_id', 'id', 'active_need_talent_id', 'level']
        return f(pb, attrs)
    
    if p == 'ResAssistantHeroRent':
        attrs = ['high_fight_capacity', 'gold_per_hour', 'rent_gold_per_fight_capacity', 'rent_gold_tax']
        return f(pb, attrs)
    
    if p == 'ResCountToReward':
        attrs = ['type', 'id', 'count', 'reward']
        return f(pb, attrs)
    
    if p == 'ResWorldActivity':
        attrs = ['activity_id', 'trigger_type', 'param_1', 'param_2', 'param_3', 'param_4', 'param_5', 'param_6', 'param_7', 'param_8']
        return f(pb, attrs)
    
    if p == 'ResActivityOrder':
        attrs = ['id', 'order', 'shortcut_order']
        return f(pb, attrs)
    
    if p == 'ResActivityResourceBox':
        attrs = ['type', 'limit', 'count_low', 'count_high', 'material_box_drop_index', 'price']
        return f(pb, attrs)
    
    if p == 'ResErrorMsg':
        attrs = ['id', 'error_msg']
        return f(pb, attrs)
    
    if p == 'ResActivityDiscount':
        attrs = ['coin_single_discount', 'coin_multi_discount', 'money_single_discount', 'money_multi_discount', 'coin_single_discount_no_activity', 'coin_multi_discount_no_activity', 'money_single_discount_no_activity', 'money_multi_discount_no_activity', 'super_money_discount', 'super_money_discount_no_activity']
        return f(pb, attrs)
    
    if p == 'ResGameModeEntrance':
        attrs = ['id', 'row_index', 'col_index']
        return f(pb, attrs)
    
    if p == 'ResAudioEffect':
        attrs = ['path', 'gain', 'priority', 'delay']
        return f(pb, attrs)
    
    if p == 'ResAudioEffectSequence':
        attrs = ['tag', 'effects']
        return f(pb, attrs)
    
    if p == 'ResTopBattleSectInfo':
        attrs = ['low_val', 'high_val']
        return f(pb, attrs)
    
    if p == 'ResTopBattleSect':
        attrs = ['rank_low', 'rank_high', 'rank_sect']
        return f(pb, attrs)
    
    if p == 'ResTopBattleMisc':
        attrs = ['week_reward_week', 'week_reward_hour', 'week_reward_min', 'week_reward_sec', 'day_reward_hour', 'day_reward_min', 'day_reward_sec', 'fight_hour', 'fight_min', 'fight_sec', 'max_get_rank_num', 'stop_fight_hour', 'stop_fight_min', 'stop_fight_sec']
        return f(pb, attrs)
    
    if p == 'ResTopBattleReward':
        attrs = ['rank_low', 'rank_high', 'every_day_reward', 'every_day_score', 'week_reward']
        return f(pb, attrs)
    
    if p == 'ResItemCollect':
        attrs = ['id', 'exchange_info', 'drop_info', 'is_special']
        return f(pb, attrs)
    
    if p == 'ResTimeRecharge':
        attrs = ['id', 'product_id', 'original_money', 'reward']
        return f(pb, attrs)
    
    if p == 'ResOpenRecharge':
        attrs = ['id', 'product_id', 'original_money', 'reward']
        return f(pb, attrs)
    
    if p == 'ResTotalFightCapacityExtraAttr':
        attrs = ['id', 'fight_capacity', 'attr']
        return f(pb, attrs)
    
    if p == 'ResRocket':
        attrs = ['id', 'daily_send_limit', 'cost', 'drop_index']
        return f(pb, attrs)
    
    if p == 'ResGamePlayModeFeature':
        attrs = ['game_play_mode_id', 'no_damage', 'no_skill_check', 'enable_action_freeze', 'can_trigger_factor_skill', 'can_benefit_from_vip_privilege']
        return f(pb, attrs)
    
    if p == 'ResReward':
        attrs = ['reward_type', 'reward_id', 'reward_value']
        return f(pb, attrs)
    
    if p == 'HeroAttr':
        attrs = ['attr_type', 'attr_value', 'is_ratio']
        return f(pb, attrs)
    
    if p == 'CSDT_EQUIPED_INFO':
        attrs = ['item_pos', 'base_id', 'cur_exp', 'level', 'wakeup', 'growup', 'purify_level', 'purify_exp']
        return f(pb, attrs)
    
    if p == 'ST_REWARD_RES':
        attrs = ['res_type', 'res_id', 'res_count']
        return f(pb, attrs)
    
    if p == 'ST_BLESS_INFO':
        attrs = ['bless_id', 'bless_info']
        return f(pb, attrs)
    
    if p == 'ST_BATTLE_HERO_ATTR_INFO':
        attrs = ['hero_id', 'grow_up', 'level', 'fight_capacity', 'max_hp', 'skill', 'attrs', 'equiped_equip_info', 'factor_skill_id']
        return f(pb, attrs)
    
    if p == 'TOP_BATTLE_DEFENSE_INFO':
        attrs = ['defense_hero_info']
        return f(pb, attrs)
    
    if p == 'TOP_BATTLE_ROLE_INFO':
        attrs = ['role_id', 'role_name', 'cumulate_recharge_id', 'defense_hero_info', 'head_photo', 'fight_capacity', 'rocket_total_send_cnt', 'rocket_total_been_got_cnt', 'rocket_today_send_cnt', 'can_get_times', 'last_refresh_time']
        return f(pb, attrs)
    
    if p == 'TOP_BATTLE_FIGHT_TARGET_INFO':
        attrs = ['target_info', 'rank_pos', 'world_id']
        return f(pb, attrs)
    
    if p == 'TOP_BATTLE_TOPTHREE_INFO':
        attrs = ['battle_id', 'world_id', 'rank_info']
        return f(pb, attrs)
    
    if p == 'TOP_BATTLE_QUALIFICATION_INFO':
        attrs = ['date', 'rank_pos', 'has_qualification', 'has_result']
        return f(pb, attrs)
    
    if p == 'TOP_BATTLE_ROCKET_INFO':
        attrs = ['uid', 'name', 'world_id', 'battle_zone_id', 'vip_level', 'top_battle_pos', 'rocket_id', 'last_refresh_time', 'rocket_total_send_cnt', 'rocket_total_been_got_cnt', 'rocket_today_send_cnt']
        return f(pb, attrs)
    
    if p == 'ResFriendInviteReward':
        attrs = ['reward_id', 'reward_type', 'friend_count', 'dungeon_id', 'reward']
        return f(pb, attrs)
    
    if p == 'ResCityReward':
        attrs = ['city_id', 'complete_star', 'reward_desc', 'reward']
        return f(pb, attrs)
    
    if p == 'ResMaterial':
        attrs = ['type', 'id', 'count']
        return f(pb, attrs)
    
    if p == 'ST_HERO_BATTLE_EMBLEM_INFO':
        attrs = ['emblem_id', 'emblem_lv']
        return f(pb, attrs)
    
    if p == 'ST_HERO_BATTLE_EQUIP_INFO':
        attrs = ['base_id', 'level', 'wake_up', 'grow_up', 'purify_level']
        return f(pb, attrs)
    
    if p == 'ST_HERO_BATTLE_TALENT_HIDE_INFO':
        attrs = ['hide_id', 'active_talent_id']
        return f(pb, attrs)
    
    if p == 'ST_HERO_BATTLE_INFO':
        attrs = ['hero_id', 'hero_lv', 'hero_grow_up', 'hero_relation_strength', 'hero_relation_stamina', 'hero_fight_capacity', 'emblem_info', 'equip_info', 'skill_id', 'talent_info', 'talent_hide_info', 'factor_id', 'total_fight_capacity', 'talent_lv_info']
        return f(pb, attrs)
    
    if p == 'ST_BOSSRUSH_HERO_HP_REMAIN':
        attrs = ['main_hero_hp_remain', 'partner_hero_hp_remain', 'friend_hero_hp_remain', 'partner_hero_left_count', 'friend_hero_left_count', 'hero_use']
        return f(pb, attrs)
    
    if p == 'CSDT_DUNGEON_COMBAT_BRIEF':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'ST_SHOP_GOODS_INFO':
        attrs = ['goods_id', 'can_buy_cnt', 'is_already_buy', 'goods_res_type', 'goods_res_id', 'price_type', 'price', 'discount', 'discount_begin_time', 'discount_end_time', 'vip_level_limit']
        return f(pb, attrs)
    
    if p == 'ST_SHOP_GOODS':
        attrs = ['goods_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_REFRESH_SHOP_GOODS_REQ':
        attrs = ['shop_type']
        return f(pb, attrs)
    
    if p == 'SCPKG_REFRESH_SHOP_GOODS_RES':
        attrs = ['result', 'shop_type', 'next_refresh_time', 'refresh_count', 'shop_goods_info', 'auto_refreshed', 'free_use_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_REFRESH_SHOP_COUNT_RES':
        attrs = ['shop_type', 'refresh_count', 'free_use_cnt']
        return f(pb, attrs)
    
    if p == 'CSPKG_BUY_SHOP_GOODS_REQ':
        attrs = ['goods_id', 'shop_type']
        return f(pb, attrs)
    
    if p == 'SCPKG_BUY_SHOP_GOODS_RES':
        attrs = ['result', 'shop_type', 'goods_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_SPECIAL_ACTIVITY_ITEM':
        attrs = ['id', 'progress', 'max', 'claimed']
        return f(pb, attrs)
    
    if p == 'SCPKG_SPECIAL_ACTIVITY_INFO':
        attrs = ['items']
        return f(pb, attrs)
    
    if p == 'CSPKG_SPECIAL_ACTIVITY_CLAIM_REQ':
        attrs = ['id']
        return f(pb, attrs)
    
    if p == 'SCPKG_SPECIAL_ACTIVITY_CLAIM_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'CSPKG_SPECIAL_ACTIVITY_SHARE_REQ':
        attrs = ['param']
        return f(pb, attrs)
    
    if p == 'SSDT_NOTIFY_MSG':
        attrs = ['msg_id', 'send_time', 'msg_type', 'sender']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_ONLINE':
        attrs = ['grow_up', 'level', 'money', 'cur_power', 'power_recover_beg_time', 'power_recover_total_time', 'power_last_refresh_time', 'buy_power_times', 'cur_achi_point', 'cur_crystal', 'cur_gold', 'cur_sp', 'cur_spborn_beg_time', 'cur_spborn_total_time', 'buy_sp_times', 'max_end_less_score', 'max_end_less_floor', 'cur_notify_beg_time', 'bit_mark', 'clt_bit_mark', 'grow_up_cnt', 'last_quit_gang_time', 'last_login_time', 'last_leave_time', 'last_logout_time', 'last_gang_battle_time', 'total_online_time', 'create_time', 'cur_rank_battle_score', 'buy_crystal_times', 'buy_gold_times', 'head_photo']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_QUEST':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_PACKAGE':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_SKILL':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_DUNGEON_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_MISC_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_DATASET_HERO':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_DATASET_BUILDING':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_DATASET_DUNDATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_NOTIFY_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ATTR_INFO':
        attrs = ['type', 'parm_1']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ITEM_EXTRA_INFO_RECOVER':
        attrs = ['recover_val']
        return f(pb, attrs)
    
    if p == 'DBBLOB_FIRSTPURCHASE_INFO':
        attrs = ['product_index', 'is_firstpurchase']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MONTHCARD_INFO':
        attrs = ['month_card_id', 'buy_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_SUPERVALUECARD_INFO':
        attrs = ['supervalue_card_id', 'buy_time', 'end_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_FIRSTPURCHASE_LIST':
        attrs = ['purchase_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_EQUIP_INFO':
        attrs = ['package_pos', 'equip_id', 'count', 'cur_exp', 'level', 'wakeup', 'growup', 'bind_to_hero']
        return f(pb, attrs)
    
    if p == 'DBBLOB_EQUIP_TAB':
        attrs = ['size', 'equips', 'got_record', 'got_record_used']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PACKAGE_OBJ':
        attrs = ['package_pos', 'type', 'stat', 'base_id', 'count', 'func_type']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PACKAGE_TAB':
        attrs = ['size', 'obj_info']
        return f(pb, attrs)
    
    if p == 'DBBLOBHERO_EQUIPED_INFO':
        attrs = ['hero_id', 'equiped_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DATA_HERO_FACTOR_DATA':
        attrs = ['hero_id', 'factor_slot_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_FACTOR_INFO':
        attrs = ['embed_factor_info', 'factor_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PACKAGE_INFO':
        attrs = ['tab_info', 'equip_tab', 'hero_equiped_info', 'factor_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_TIME_VALUE':
        attrs = ['time_second', 'time_milli_second']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_PRACTICEDUN_QUEST':
        attrs = ['practice_dun_quest_flags']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_ACHIEVEMENT':
        attrs = ['achievemented_flags', 'get_flags']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_FIRSTPURCHAE':
        attrs = ['firstpurchase_flags']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_DAILYTASK_ITEM':
        attrs = ['daily_task_id', 'daily_task_done', 'daily_task_get', 'daily_task_complete_count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_DAILYTASK':
        attrs = ['daily_task_items', 'daily_task_reset_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_MAIN_TASK_ITEM':
        attrs = ['group_id', 'id', 'seq_id', 'progress']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_MAIN_TASK':
        attrs = ['item', 'complete_flags', 'get_flags']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_SHOP':
        attrs = ['refresh_count', 'refresh_rankbattle_shop_count', 'normal_shop_free_use_cnt', 'rank_battle_shop_free_use_cnt', 'refresh_vip_shop_count', 'vip_shop_free_use_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_PRIZE_DRAW':
        attrs = ['coin_one_prize_draw_free_use_count', 'coin_one_prize_draw_free_last_use_time', 'coin_one_prize_draw_free_count_last_refresh_time', 'money_one_prize_draw_free_use_count', 'money_one_prize_draw_free_last_use_time', 'gang_bless_count', 'buy_gang_bless_count', 'last_buy_gang_bless_count_time', 'left_extern_gang_bless_count', 'coin_one_prize_draw_count', 'coin_ten_prize_draw_count', 'money_one_prize_draw_count', 'money_ten_prize_draw_count', 'super_money_five_prize_draw_count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_QUEST':
        attrs = ['practice_quest', 'achievement', 'daily_task', 'main_task', 'newbie_activity', 'special_activity']
        return f(pb, attrs)
    
    if p == 'DBBLOB_GIFT_ACCEPT_INFO':
        attrs = ['accept_count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_GIFT_CLAIM_ITEM_INFO':
        attrs = ['id', 'claim_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_GIFT_CLAIM_INFO':
        attrs = ['items']
        return f(pb, attrs)
    
    if p == 'DBBLOB_OFFLINE_BATTLE_DEFEATED_INFO':
        attrs = ['opponent_name', 'opponent_title_when_defeated', 'opponent_gold_medal_count_when_defeated', 'opponent_silver_medal_count_when_defeated', 'got_opponent_medal_bit', 'mode_bit']
        return f(pb, attrs)
    
    if p == 'DBBLOB_OFFLINE_BATTLE_INFO':
        attrs = ['offline_battle_defeated_info', 'my_gold_medal_holder_role_name', 'my_silver_medal_holder_role_name', 'title_index_selected', 'total_count', 'total_win_count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ONLINE_BATTLE_INFO':
        attrs = ['initialized', 'tickets', 'score', 'total_count', 'total_win_count', 'win_point', 'brought_times', 'tickets_max', 'next_refresh_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DAILYQUEST_INFO':
        attrs = ['quest_id', 'start_time', 'count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUNGEON_CHALLENGE_INFO':
        attrs = ['dungeon_id', 'challenge_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUNGEON_UNLOCK_INFO':
        attrs = ['dungeon_id', 'diffic_degree', 'unlock_type']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUNGEON_COUNT_INFO':
        attrs = ['dungeon_id', 'time', 'count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUNGEON_DATA_INFO':
        attrs = ['pvp_point', 'pvp_score', 'dun_id', 'camp_id', 'dungeon_challenge_data', 'dungeon_unlock_data', 'dungeon_count_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_HERO_STAT_DATA':
        attrs = ['stat', 'dun_id', 'enter_dun_time', 'lv_cdbeg_time', 'lv_cdtotal_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_SKILL_INFO_DATA':
        attrs = ['skill_index', 'skill_id']
        return f(pb, attrs)
    
    if p == 'DBBLOB_EMBLEMINFO_DATA':
        attrs = ['emblem_id', 'emblem_lv', 'emblem_exp']
        return f(pb, attrs)
    
    if p == 'DBBLOB_HERO_INFO_DATA':
        attrs = ['hero_id', 'grow_up', 'level', 'exp', 'cur_hp', 'cur_sp', 'max_hp', 'damage', 'skill_info', 'emblem_info', 'new_role_buff_cnt', 'greatest_dungeon_id_when_unlock', 'fight_capacity', 'talent_info', 'talent_hide_info', 'talent_lv_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_HERO_TRAININGSLOT_INFO':
        attrs = ['state', 'lv_up_hero_id']
        return f(pb, attrs)
    
    if p == 'DBBLOB_CHIP_INFO_DATA':
        attrs = ['chip_id', 'chip_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_HERO_DATA':
        attrs = ['hero_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_HERO_GANGBATTLE_DATA':
        attrs = ['gang_battle_win_cnt', 'gang_battle_lost_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_TOP_BATTLE_ROCKET':
        attrs = ['uid', 'rocket_id', 'got_reward_cnt', 'last_refresh_time', 'notify_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_RANK_BATTLE_DATA':
        attrs = ['last_rank_battle_time', 'left_rank_battle_count', 'buy_rank_battle_count', 'last_refresh_left_count_time', 'left_top_battle_count', 'buy_top_battle_count', 'last_refresh_top_battle_count_time', 'top_battle_rocket']
        return f(pb, attrs)
    
    if p == 'RANK_BATTLE_DEFENSE_DATA':
        attrs = ['hero_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MONSTER_STAT_DATA':
        attrs = ['stat', 'lv_cdbeg_time', 'lv_cdtotal_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MONSTER_INFO_DATA':
        attrs = ['monster_grp_id', 'grp_level', 'stat_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_MONSTER_DATA':
        attrs = ['monster_grp_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUN_UNLOCK_DATA':
        attrs = ['dungeon_id', 'dun_level', 'stat', 'challenge_time', 'challenge_cnt', 'story_bit', 'best_evaluation', 'elite_challenge_count', 'elite_drop_exp']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVE_CHALLENGE_DATA':
        attrs = ['npc_cnt', 'player_cnt', 'unlock_data', 'elite_buy_count']
        return f(pb, attrs)
    
    if p == 'DBBLOB_TOWER_HERO':
        attrs = ['hero_id', 'hero_grow_up', 'hero_lv', 'remain_hp', 'max_score', 'max_floor', 'max_score_ever', 'max_floor_ever', 'entered_today', 'wipeout_today', 'match_index']
        return f(pb, attrs)
    
    if p == 'DBBLOB_TOWER_HERO_INFO':
        attrs = ['hero_hp']
        return f(pb, attrs)
    
    if p == 'DBBLOB_TOWER_CHALLENGE_DATA':
        attrs = ['reset_cnt', 'hero_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_WORLD_BOSS_HERO_DATA':
        attrs = ['hero_id', 'hero_hp_remain_percent', 'remain_seconds', 'damage']
        return f(pb, attrs)
    
    if p == 'DBBLOB_WORLD_BOSS_CHALLENGE_DATA':
        attrs = ['last_refresh_time', 'world_boss_index', 'hero_index', 'hero_selected_cnt', 'hero_data', 'history_damage_highest', 'history_damage_sum', 'daily_damage']
        return f(pb, attrs)
    
    if p == 'SSPKG_CMD_UPDATE_WORLD_BOSS':
        attrs = ['uid', 'player_name', 'hero_id', 'boss_index', 'hero_hp_percent', 'hero_time_remain', 'boss_got_damage', 'hero_hp_remain_percent', 'zone_id', 'vip_level']
        return f(pb, attrs)
    
    if p == 'SSPKG_CMD_WORLD_BOSS_DEAD':
        attrs = ['week_day', 'boss_id', 'boss_index', 'killer_uid', 'killer_name', 'process_killer_reward', 'player_damage_info_cnt', 'lucky_reward_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_CMD_WORLD_BOSS_DEAD_PLAYER_DAMAGE_INFO':
        attrs = ['player_damage_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_CMD_WORLD_BOSS_HERO_DAMAGE_INFO':
        attrs = ['hero_id', 'damage']
        return f(pb, attrs)
    
    if p == 'SSPKG_CMD_WORLD_BOSS_PLAYER_DAMAGE_INFO':
        attrs = ['uid', 'rank', 'cur_boss_damage', 'hero_damage_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_CMD_WORLD_BOSS_DAMAGE_PLAYER':
        attrs = ['uid', 'name', 'cur_boss_damage', 'hero_damage_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_WORLD_BOSS_HERO_DAMAGE_INFO':
        attrs = ['hero_id', 'damage', 'time_remain']
        return f(pb, attrs)
    
    if p == 'DBBLOB_WORLD_BOSS_PLAYER_DAMAGE_INFO':
        attrs = ['uid', 'zone_id', 'cur_boss_index', 'name', 'hero_damage', 'total_damage']
        return f(pb, attrs)
    
    if p == 'SSPKG_CMD_WORLD_BOSS_DAMAGE_INFO':
        attrs = ['boss_index', 'player']
        return f(pb, attrs)
    
    if p == 'SSPKG_WORLD_BOSS_QUALIFIED_HERO_INFO':
        attrs = ['uid', 'qualified_hero_cnt']
        return f(pb, attrs)
    
    if p == 'SSPKG_CMD_WORLD_BOSS_RESET':
        attrs = ['boss_index']
        return f(pb, attrs)
    
    if p == 'SSPKG_WORLD_BOSS_KILLER_INFO_RES':
        attrs = ['uid', 'killer_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MULTIPLAYER_PVE_CHALLENGE_DATA':
        attrs = ['week_day', 'complete_dun_index', 'free_ticket_limit_time', 'ticket_brought_times', 'next_refresh_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_NEWBIE_ACTIVITY_ITEM':
        attrs = ['id', 'progress', 'is_claimed', 'claimed_time', 'is_completed', 'completed_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_NEWBIE_ACTIVITY_STATUS':
        attrs = ['limit_date', 'item_array']
        return f(pb, attrs)
    
    if p == 'DBBLOB_SPECIAL_ACTIVITY_ITEM':
        attrs = ['id', 'progress', 'is_completed', 'is_claimed', 'update_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_SPECIAL_ACTIVITY_INFO':
        attrs = ['items']
        return f(pb, attrs)
    
    if p == 'DBBLOB_SELFDUN_HERO_INFO':
        attrs = ['state', 'hero_id']
        return f(pb, attrs)
    
    if p == 'DBBLOB_SELF_DUN_DATA':
        attrs = ['defense_hero_info', 'attack_hero_info', 'top_battle_defense_hero_info', 'top_battle_attack_hero_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVPDUN_INFO':
        attrs = ['uid', 'name', 'level', 'online', 'gang_id', 'gang_name', 'is_done']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_PVPDUN_DATA':
        attrs = ['pvp_attack_win_cnt', 'pvp_total_cnt', 'pvp_gain_gold', 'pvp_gain_crystal', 'pvp_gain_money', 'pvp_gain_exp_item', 'steal_battle_times']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ENDLESS_HERO_INFO':
        attrs = ['hero_id', 'hero_lv']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ENDLESS_HERO_DATA':
        attrs = ['endless_hero']
        return f(pb, attrs)
    
    if p == 'DBBLOB_HERO_DATASET':
        attrs = ['hero_data', 'monster_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_BUILDING_BASE_INFO':
        attrs = ['building_id', 'building_lv', 'level_beg_time', 'level_total_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_RES_STORE_INFO':
        attrs = ['res_limit', 'res_type', 'building_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ISLAND_DEFEND_INFO':
        attrs = ['hero_id', 'hero_lv', 'monster_id', 'monster_lv', 'trap_id', 'trap_lv']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ISLAND_BORNINFO':
        attrs = ['born_speed', 'born_limit', 'last_born_time', 'cur_born_res', 'defend_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ISLAND_INFO':
        attrs = ['res_type', 'building_info', 'born_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ISLAND_GAININFO':
        attrs = ['pvp_gain_gold', 'pvp_gain_crystal', 'pvp_gain_money', 'pvp_gain_exp_item']
        return f(pb, attrs)
    
    if p == 'DBBLOB_BUILDING_INFO':
        attrs = ['hero_tower_data', 'res_store_data', 'island_data', 'island_gain']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVP_HERO_INFO':
        attrs = ['res_type', 'hero_info', 'monster_id', 'monster_lv', 'trap_id', 'trap_lv']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVP_ISLAND_DEFEND_INFO':
        attrs = ['island_defense_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVP_ISLAND_INFO':
        attrs = ['res_type', 'cur_born_res', 'last_born_time', 'born_speed', 'born_limit']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PVP_BUILD_INFO':
        attrs = ['island_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_BUILDING_DATASET':
        attrs = ['package_data', 'building_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_CITY_REWARD':
        attrs = ['cityId', 'complete_star']
        return f(pb, attrs)
    
    if p == 'DBBLOB_CITY_REWARD_SET':
        attrs = ['city_reward']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DUN_DATASET':
        attrs = ['pve_dun', 'tower_dun', 'self_dun', 'pvp_dun', 'gang_battle', 'rank_battle', 'city_reward_set', 'world_boss_challenge_data', 'bossrush_info', 'multiplayer_pve_challenge_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_BEHAVIOUR':
        attrs = ['total_skilllvup_cnt', 'total_archlvup_cnt', 'total_growup_cnt', 'total_endless_score', 'total_buildinglvup_cnt', 'try_to_pay', 'total_equip_level_up_level', 'total_equip_grow_up_cnt', 'total_equip_wake_up_cnt', 'total_endless_cnt', 'total_rankbattle_cnt', 'win_rankbattle_cnt', 'total_world_boss_damage']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MONTH_CARD_INFO':
        attrs = ['month_card_id', 'buy_time', 'last_reward_time', 'last_get_reward_time', 'total_get_reward_cnt', 'remain_days']
        return f(pb, attrs)
    
    if p == 'DBBLOB_SUPERVALUE_CARD_INFO':
        attrs = ['super_card_id', 'buy_time', 'last_reward_time', 'last_get_reward_time', 'total_get_reward_cnt', 'remain_days', 'end_time']
        return f(pb, attrs)
    
    if p == 'DBBLOB_CONTINUE_LOGIN_INFO':
        attrs = ['continue_days', 'last_record_time', 'login_bit', 'get_reward_bit', 're_signable_days', 're_sign_last_time', 'cur_month_num']
        return f(pb, attrs)
    
    if p == 'DBBLOB_GROWTH_FUND_INFO':
        attrs = ['buy_time', 'target_bit', 'reward_bit']
        return f(pb, attrs)
    
    if p == 'DBBLOB_CUMULATE_RECHARGE_INFO':
        attrs = ['cumulate_recharge_id', 'cumulate_recharge_cnt', 'last_reward_time', 'target_bit', 'reward_bit', 'daily_free_bit', 'daily_buy_bit']
        return f(pb, attrs)
    
    if p == 'DBBLOB_GROUP_BUY_INFO':
        attrs = ['last_buy_time', 'valid_group_buy_id', 'has_buy_group_id']
        return f(pb, attrs)
    
    if p == 'DBBLOB_FIRSTREWARD_INFO':
        attrs = ['is_get_reward', 'is_first_open', 'first_recharge_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_BUSINESS_INFO':
        attrs = ['month_card_info', 'con_login_7days_info', 'month_login_info', 'open_cumulate_login_info', 'growth_fund_info', 'cumulate_recharge_info', 'group_buy_info', 'first_purchase_info', 'first_reward_info', 'supervalue_card_info']
        return f(pb, attrs)
    
    if p == 'SSDT_PRIVATE_CHAT_INFO':
        attrs = ['msg_data', 'msg_time', 'from_name', 'from_role_id', 'from_vip_level', 'to_role_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_PRIVATE_CHAT_REQ':
        attrs = ['msg_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_PRIVATE_CHAT_RES':
        attrs = ['msg_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_OFFLINE_PRIVATE_CHAT_MSG':
        attrs = ['to_role_id', 'msg_target_role_id', 'msg_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_OFFLIEN_PRIVATE_CHAT':
        attrs = ['offline_private_chat_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_RANK_POS_INFO':
        attrs = ['history_high_endless_rank_pos', 'history_high_rank_battle_pos']
        return f(pb, attrs)
    
    if p == 'DBBLOB_MISC_DATA':
        attrs = ['quest_info', 'gift_accept_info', 'shop_info', 'behaviour_info', 'offline_battle_info', 'online_battle_info', 'business_info', 'prize_draw_info', 'offline_private_chat_info', 'rank_pos_info', 'rank_reset_info', 'multiplayer_pve_chat_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_NOTIFY_DATA':
        attrs = ['title', 'link', 'content']
        return f(pb, attrs)
    
    if p == 'DBBLOB_RANK_VALINFO':
        attrs = ['rank_val']
        return f(pb, attrs)
    
    if p == 'DBBLOB_RANK_DATA':
        attrs = ['rank_id', 'rank_val', 'time_stamp']
        return f(pb, attrs)
    
    if p == 'DBBLOG_RANK_STAT_INFO':
        attrs = ['role_name', 'gang_id', 'gang_name', 'gang_level', 'rank_data']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DIRHERO_INFO':
        attrs = ['heroid', 'herolv', 'herogrowup']
        return f(pb, attrs)
    
    if p == 'DBBLOB_WORLD_INFO':
        attrs = ['uid', 'role_name', 'worldid', 'zoneid', 'curpve', 'heroinfo']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DIR_WORLD_INFO':
        attrs = ['world_info']
        return f(pb, attrs)
    
    if p == 'SSDT_WHOLE_GAMEOBJ':
        attrs = ['player_online_info', 'hero_info', 'building_info', 'dun_info', 'misc_data', 'activity_data']
        return f(pb, attrs)
    
    if p == 'ERR_RESPONSE':
        attrs = ['err']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_BRIEF':
        attrs = ['uid', 'role_name', 'gender', 'main_level', 'map_id', 'body_info_data', 'create_time', 'bit_mark', 'clt_bit_mark', 'avatar_list', 'ban_time']
        return f(pb, attrs)
    
    if p == 'SUCC_ROLE_LIST_RES':
        attrs = ['unique_id', 'role_brief', 'set_time', 'world_id', 'last_role_uid']
        return f(pb, attrs)
    
    if p == 'SSDT_WHOLE_ACCOUNT':
        attrs = ['gmpermission', 'ban_time', 'ban_chat_time', 'schedule', 'active', 'act_create_time', 'acc_quest']
        return f(pb, attrs)
    
    if p == 'SSPKG_SHUTDOWN_ZONESVR':
        attrs = ['down_aft_sec']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_SELFDUN_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_PVEDUN_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_ENDLESS_HERO_DATA':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_PVPPLAYER_INFO':
        attrs = ['uid', 'level', 'gang_id', 'role_name', 'online', 'pvp_score', 'max_fight_capacity', 'cur_crystal', 'cur_gold', 'is_done', 'self_dun', 'pve_dun']
        return f(pb, attrs)
    
    if p == 'SSDT_PLAYER_LOGIN_PVPINFO':
        attrs = ['result', 'pvp_island_info']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_LOGIN_REQ':
        attrs = ['unique_id', 'uid', 'channel_id', 'pvp_login_info', 'ban_chat_time']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_LOGIN_RES':
        attrs = ['result', 'unique_id', 'uid', 'role_name', 'channel_id', 'whole_game_obj', 'pvp_login_info', 'left_ban_time', 'ban_chat_time']
        return f(pb, attrs)
    
    if p == 'PKG_VIEW_PLAYER_INFO_REQ':
        attrs = ['view_role_id', 'is_from_gang', 'vip_level']
        return f(pb, attrs)
    
    if p == 'PKG_VIEW_PLAYER_INFO_RSP_FROM_GANG_SVR':
        attrs = ['result', 'view_role_id', 'is_from_gang', 'gang_name', 'vip_level']
        return f(pb, attrs)
    
    if p == 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_BATTLE_SVR':
        attrs = ['result', 'view_role_id', 'is_from_gang', 'gang_name', 'rank_battle_pos', 'vip_level']
        return f(pb, attrs)
    
    if p == 'PKG_VIEW_PLAYER_INFO_RSP_FROM_RANK_SVR':
        attrs = ['result', 'view_role_id', 'is_from_gang', 'gang_name', 'rank_battle_pos', 'achievement_rank_pos', 'vip_level']
        return f(pb, attrs)
    
    if p == 'PKG_VIEW_PLAYER_INFO_RSP_FROM_ROLE_SVR':
        attrs = ['result', 'view_role_id', 'is_from_gang', 'gang_name', 'rank_battle_pos', 'achievement_rank_pos', 'role_name', 'endless_max_floor', 'dun_data_info', 'hero_info', 'misc_data', 'hero_equiped_info', 'vip_level', 'head_photo', 'hero_factor_info']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_LOGOUT_REQ':
        attrs = ['unique_id', 'uid']
        return f(pb, attrs)
    
    if p == 'PKG_REQ_PLAYER_LOGIN':
        attrs = ['unique_id', 'uid', 'channel_id', 'world_id', 'ban_chat_time']
        return f(pb, attrs)
    
    if p == 'PKG_RES_PLAYER_LOGIN':
        attrs = ['result', 'unique_id', 'uid', 'channel_id', 'pvp_login_info', 'ban_chat_time']
        return f(pb, attrs)
    
    if p == 'PKG_REQ_PLAYER_LOGOUT':
        attrs = ['uid', 'max_fight_capacity', 'role_name', 'pvp_island_info', 'pvp_island_defense_info', 'world_id']
        return f(pb, attrs)
    
    if p == 'PKG_ACCOUNT_LOGIN_REQ':
        attrs = ['log_type', 'log_plat', 'device_type', 'device_sys_ver', 'resolution_wide', 'resolution_high', 'anon_id', 'unique_id', 'channel_id', 'ip', 'world_id', 'zone_id', 're_connect', 'net_re_connect', 'device_id']
        return f(pb, attrs)
    
    if p == 'PKG_ACCOUNT_LOGIN_RES':
        attrs = ['result', 'net_re_connect', 'data']
        return f(pb, attrs)
    
    if p == 'PKG_ACCOUNT_LOGOUT_REQ':
        attrs = ['unique_id', 'role_name', 'zone_id']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_NAME':
        attrs = ['result', 'unique_id', 'role_name', 'uid', 'zone_id', 'world_id', 'create_time', 'head_photo', 'is_rename']
        return f(pb, attrs)
    
    if p == 'SSDT_RECOMMAND_NAME':
        attrs = ['name']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_NAME_RES':
        attrs = ['result', 'is_rename', 'unique_id', 'role_name', 'head_photo', 'uid', 'zone_id', 'world_id', 'recommand_name']
        return f(pb, attrs)
    
    if p == 'PKG_RANDOM_NAME_REQ':
        attrs = ['uid']
        return f(pb, attrs)
    
    if p == 'PKG_RANDOM_NAME_RES':
        attrs = ['uid', 'name']
        return f(pb, attrs)
    
    if p == 'PKG_VERIFY_NAME':
        attrs = ['result', 'unique_id', 'role_name', 'uid', 'zone_id', 'world_id', 'create_time', 'head_photo', 'recommand_name', 'is_rename']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_WORLDROLE':
        attrs = ['result', 'is_rename', 'unique_id', 'role_name', 'uid', 'world_id', 'create_time', 'head_photo']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_PLATACCOUNT_REQ':
        attrs = ['log_plat', 'anon_id', 'bind_id', 'world_id', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_PLATACCOUNT_RES':
        attrs = ['result', 'anon_id', 'bind_id']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_CLUSTER_PLATACCOUNT_REQ':
        attrs = ['log_plat', 'anon_id', 'bind_id', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_CLUSTER_PLATACCOUNT_RES':
        attrs = ['result', 'anon_id', 'bind_id']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_ROLE_PLATACCOUNT_REQ':
        attrs = ['log_plat', 'anon_id', 'bind_id', 'world_id', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_ROLE_PLATACCOUNT_RES':
        attrs = ['result', 'log_plat', 'world_id', 'anon_id', 'bind_id']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_ACCOUNTSVR_REQ':
        attrs = ['log_plat', 'anon_id', 'bind_id', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_BIND_ACCOUNTSVR_RES':
        attrs = ['result', 'anon_id', 'bind_id', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_GAMEOBJ_UPDATE_REQ':
        attrs = ['unique_id', 'uid', 'player_online_info', 'hero_info', 'building_info', 'dun_info', 'misc_data', 'activity_info']
        return f(pb, attrs)
    
    if p == 'PKG_GAMEOBJ_UPDATE_RSP':
        attrs = ['result', 'err']
        return f(pb, attrs)
    
    if p == 'SSDT_CMD_PLAYER_SELFDUNINFO':
        attrs = ['result', 'dun_id', 'is_online', 'other_unique_id', 'obtain_crystal', 'obtain_gold']
        return f(pb, attrs)
    
    if p == 'SSDT_ROOMMONSTER_INFO':
        attrs = ['monster_id', 'monster_cnt']
        return f(pb, attrs)
    
    if p == 'SSDT_ROOM_INFO':
        attrs = ['room_id', 'monster_info']
        return f(pb, attrs)
    
    if p == 'SSDT_DUNGEON_INFO':
        attrs = ['room_info']
        return f(pb, attrs)
    
    if p == 'SSDT_PLAYER_ENTERDUN_RES':
        attrs = ['unique_id', 'hero_id', 'dun_id', 'result', 'level', 'dun_info']
        return f(pb, attrs)
    
    if p == 'PKG_SELFDUN_ENTER_REQ':
        attrs = ['other_unique_id', 'unique_id', 'hero_id', 'dun_id', 'result', 'level']
        return f(pb, attrs)
    
    if p == 'PKG_SELFDUN_ENTER_RSP':
        attrs = ['result', 'err', 'enter_dun_res']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_DEL_ROLE_REQ':
        attrs = ['unique_id', 'uid']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_DEL_ROLE_RES':
        attrs = ['result', 'unique_id', 'uid', 'name']
        return f(pb, attrs)
    
    if p == 'PKG_KICK_PLAYER':
        attrs = ['unique_id', 'zone_id']
        return f(pb, attrs)
    
    if p == 'PKG_ACCOUNT_INFO_RES':
        attrs = ['log_type', 'log_plat', 'anon_id', 'unique_id', 'uid', 'channel_id', 'is_new_acc', 'whole_account']
        return f(pb, attrs)
    
    if p == 'PKG_NEW_ROLE_CLUSTER':
        attrs = ['unique_id', 'uid', 'role_name', 'world_id']
        return f(pb, attrs)
    
    if p == 'PKG_ROLE_DEL_NAME':
        attrs = ['role_name', 'uid', 'unique_id']
        return f(pb, attrs)
    
    if p == 'PKG_DISP_PACKAGE':
        attrs = ['uid', 'addr', 'type_hash', 'data']
        return f(pb, attrs)
    
    if p == 'SSDT_PVP_ISLAND_DEFENSE_INFO':
        attrs = ['res_type', 'robot_info', 'hero_info', 'monster_id', 'monster_lv', 'trap_id', 'trap_lv']
        return f(pb, attrs)
    
    if p == 'SSDT_PVP_ISLAND_INFO':
        attrs = ['building_id', 'res_type', 'can_steal_res']
        return f(pb, attrs)
    
    if p == 'SSDT_PVP_STEAL_ISLAND_INFO':
        attrs = ['role_id', 'role_name', 'role_fight_capacity', 'island_data', 'defense_info', 'is_robot']
        return f(pb, attrs)
    
    if p == 'SSDT_ONLINE_BATTLE_ROOM_ROLE_INFO':
        attrs = ['pos', 'role_id', 'role_lv', 'role_stamina', 'role_strength', 'role_ability', 'role_skills', 'factor_skill_id', 'hero_attr_info']
        return f(pb, attrs)
    
    if p == 'SSDT_ONLINE_BATTLE_ROOM_PLAYER_INFO':
        attrs = ['host', 'uid', 'name', 'score', 'win_number', 'ready', 'role_infos']
        return f(pb, attrs)
    
    if p == 'SSDT_ONLINE_BATTLE_ROOM_INFO':
        attrs = ['room_id', 'scene_index', 'player_infos']
        return f(pb, attrs)
    
    if p == 'SSDT_ONLINE_BATTLE_ROOM_COUNT_DOWN_TIME':
        attrs = ['zone_id', 'uid', 'count_down_time']
        return f(pb, attrs)
    
    if p == 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_REQ':
        attrs = ['world_id', 'zone_id', 'uid', 'online_battle_score', 'win_number', 'name', 'scene_index']
        return f(pb, attrs)
    
    if p == 'SSPKG_CREATE_ONLINE_BATTLE_ROOM_RES':
        attrs = ['zone_id', 'uid', 'result', 'room_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_REQ':
        attrs = ['room_id', 'uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_QUIT_ONLINE_BATTLE_ROOM_RES':
        attrs = ['zone_id', 'uid', 'result', 'param', 'player_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_LIST_ONLINE_BATTLE_ROOM_REQ':
        attrs = ['score']
        return f(pb, attrs)
    
    if p == 'SSPKG_LIST_ONLINE_BATTLE_ROOM_RES':
        attrs = ['result', 'rooms']
        return f(pb, attrs)
    
    if p == 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_REQ':
        attrs = ['world_id', 'zone_id', 'uid', 'online_battle_score', 'win_number', 'name', 'room_id', 'host_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_JOIN_ONLINE_BATTLE_ROOM_RES':
        attrs = ['zone_id', 'uid', 'result', 'room_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_REQ':
        attrs = ['room_id', 'player_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_ONLINE_BATTLE_ROOM_QUICK_MATCH_REQ':
        attrs = ['world_id', 'zone_id', 'uid', 'online_battle_score', 'win_number', 'name']
        return f(pb, attrs)
    
    if p == 'SSPKG_ONLINE_BATTLE_ROOM_KICK_GUEST_REQ':
        attrs = ['uid', 'room_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_ONLINE_BATTLE_ROOM_HEART_BEAT_REQ':
        attrs = ['uid', 'room_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_ONLINE_BATTLE_ROOM_RES':
        attrs = ['zone_id', 'uid', 'player_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_ONLINE_BATTLE_BEGIN':
        attrs = ['zone_id', 'uid', 'is_host', 'room_info']
        return f(pb, attrs)
    
    if p == 'PKG_SEARCH_PVP_PLAYER_REQ':
        attrs = ['uid', 'max_fight_capacity']
        return f(pb, attrs)
    
    if p == 'PKG_SEARCH_PVP_PLAYER_RES':
        attrs = ['result', 'target_info']
        return f(pb, attrs)
    
    if p == 'ST_WIPE_OUT_STEAL_BATTLE_RESULT':
        attrs = ['res_type', 'steal_res']
        return f(pb, attrs)
    
    if p == 'PKG_WIPE_OUT_STEAL_BATTLE_BALANCE_REQ':
        attrs = ['attacker_role_id', 'role_name', 'target_role_id', 'wipe_out_result']
        return f(pb, attrs)
    
    if p == 'PKG_BALANCE_STEAL_BATTLE_REQ':
        attrs = ['attacker_role_id', 'role_name', 'self_hero_id', 'self_hero_hp_percent', 'target_role_id', 'target_hero_id', 'target_hero_hp', 'res_type', 'island_data']
        return f(pb, attrs)
    
    if p == 'PKG_BALANCE_STEAL_BATTLE_RES':
        attrs = ['result', 'target_role_id', 'res_type', 'self_hero_id', 'self_hero_hp_percent', 'target_hero_id', 'target_hero_hp']
        return f(pb, attrs)
    
    if p == 'PKG_STEAL_BATTLE_RESULT_MAIL_REQ':
        attrs = ['defense_role_id', 'battle_result', 'atk_role_name', 'atk_role_id', 'lose_res_type', 'lose_res_id', 'lose_res_count']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_SYSTEM_ACC':
        attrs = ['res_type', 'res_id', 'res_cnt', 'chg_reason', 'res_extern_param_1', 'res_extern_param_2', 'res_extern_param_3']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_SYSTEM_ACC_INFO':
        attrs = ['acc_info']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_REVENGE_ACC_INFO':
        attrs = ['atk_role_name', 'atk_role_id', 'lose_res_type', 'lose_res_id', 'lose_res_count']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_ACC_INFO':
        attrs = ['type', 'mail_acc_info']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_INFO':
        attrs = ['send_rold_id', 'send_role_name', 'mail_id', 'mail_type', 'mail_status', 'mail_title', 'mail_content', 'mail_send_time', 'mail_end_time', 'mail_acc_type', 'mail_acc']
        return f(pb, attrs)
    
    if p == 'SSDT_BRIEF_MAIL_INFO':
        attrs = ['mail_id', 'mail_type', 'mail_status', 'mail_title', 'mail_send_time', 'mail_end_time', 'mail_acc_type']
        return f(pb, attrs)
    
    if p == 'PKG_ROLELOGIN_GET_MAIL_REQ':
        attrs = ['role_id', 'zone_id', 'channel_id', 'clt_version', 'is_new_player']
        return f(pb, attrs)
    
    if p == 'PKG_ROLELOGIN_GET_MAIL_RES':
        attrs = ['result', 'role_id', 'zone_id', 'system_mail_info', 'revenge_mail_info', 'system_mail_count', 'revenge_mail_count', 'channel_id', 'clt_version']
        return f(pb, attrs)
    
    if p == 'PKG_ROLELOGOUT_TO_MAILSVR':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'PKG_SEND_MAIL_REQ':
        attrs = ['recv_role_id', 'mail_info', 'need_first']
        return f(pb, attrs)
    
    if p == 'PKG_SEND_MAIL_RES':
        attrs = ['result', 'recv_role_id', 'mail_info', 'system_mail_count', 'revenge_mail_count']
        return f(pb, attrs)
    
    if p == 'SSDT_MAIL_CLR_INFO':
        attrs = ['mail_id', 'need_delete']
        return f(pb, attrs)
    
    if p == 'PKG_OVERTIME_MAIL_CLR_REQ':
        attrs = ['role_id', 'clr_info']
        return f(pb, attrs)
    
    if p == 'PKG_OVERTIME_MAIL_CLR_RES':
        attrs = ['role_id', 'system_mail_id_list', 'revenge_mail_id_list']
        return f(pb, attrs)
    
    if p == 'PKG_GET_MAIL_LIST_REQ':
        attrs = ['role_id', 'mail_type']
        return f(pb, attrs)
    
    if p == 'PKG_GET_MAIL_LIST_RES':
        attrs = ['result', 'role_id', 'mail_type', 'system_mail_info', 'revenge_mail_info']
        return f(pb, attrs)
    
    if p == 'PKG_GET_MAIL_DETAIL_REQ':
        attrs = ['role_id', 'mail_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_MAIL_DETAIL_RES':
        attrs = ['result', 'role_id', 'mail_id', 'mail_info']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_READ_REQ':
        attrs = ['role_id', 'mail_id', 'mail_type']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_READ_RES':
        attrs = ['result', 'role_id', 'mail_id', 'mail_type', 'mail_status']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_GET_ACC_REQ':
        attrs = ['role_id', 'mail_id']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_GET_ACC_RES':
        attrs = ['result', 'role_id', 'mail_id', 'mail_acc', 'is_have_new_mail_add', 'add_mail_info']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_DELETE_REQ':
        attrs = ['role_id', 'mail_id']
        return f(pb, attrs)
    
    if p == 'PKG_MAIL_DELETE_RES':
        attrs = ['result', 'role_id', 'mail_id', 'mail_type', 'mail_status', 'is_have_new_mail_add', 'add_mail_info']
        return f(pb, attrs)
    
    if p == 'SSDT_GANGSIMPLE_INFO':
        attrs = ['gang_name', 'gang_id', 'gang_leader_name', 'gang_apply_state', 'gang_level', 'gang_score', 'cond_rank_pos', 'gang_mem_count', 'gang_notify', 'is_auto_apply_battle']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_SELF_INFO':
        attrs = ['position', 'contribution']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_MEM_BLOB_INFO':
        attrs = ['gang_bless_info']
        return f(pb, attrs)
    
    if p == 'SSDT_GANGMEM_INFO':
        attrs = ['mem_role_id', 'mem_name', 'mem_postion', 'mem_gang_battle_win_score', 'mem_rank_pos', 'last_leave_time', 'cumulate_recharge_id', 'gang_bless_info', 'head_photo']
        return f(pb, attrs)
    
    if p == 'SSDT_GANGLIST_INFO':
        attrs = ['gang_id', 'gang_name', 'gang_leader_name', 'gang_apply_state', 'gang_level', 'is_in_apply_list', 'gang_score', 'gang_avg_rank_pos', 'gang_mem_count', 'gang_cond_rank_pos']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_APPLYLIST_INFO':
        attrs = ['mem_name', 'mem_role_id', 'apply_time', 'mem_rank_pos', 'applyer_gang_battle_win_cnt', 'cumulate_recharge_id', 'head_photo']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_APPLYLIST_DBINFO':
        attrs = ['mem_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANGLIST_REQ':
        attrs = ['role_id', 'role_rank_pos', 'page_start_id', 'page_count']
        return f(pb, attrs)
    
    if p == 'PKG_GANGLIST_RES':
        attrs = ['gang_list', 'total_count']
        return f(pb, attrs)
    
    if p == 'PKG_CMD_SEARCH_GANG_REQ':
        attrs = ['gang_id', 'role_id']
        return f(pb, attrs)
    
    if p == 'PKG_CMD_SEARCH_GANG_RES':
        attrs = ['result', 'gang_id', 'gang_info']
        return f(pb, attrs)
    
    if p == 'PKG_ROLELOGIN_GANG_REQ':
        attrs = ['role_id', 'gang_battle_win_score', 'zone_id', 'cumulate_recharge_id', 'head_photo', 'role_name']
        return f(pb, attrs)
    
    if p == 'PKG_ROLELOGIN_GANG_RES':
        attrs = ['gang_simple_info', 'self_info', 'apply_list_count', 'is_have_gang', 'last_leave_gang_time']
        return f(pb, attrs)
    
    if p == 'SSDT_CREATE_GANG_INFO':
        attrs = ['gang_name', 'gang_creator_name', 'gang_notify', 'gang_creator_role_id', 'is_auto_apply', 'cond_rank_pos', 'gang_create_time', 'cumulate_recharge_id', 'head_photo']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_GANG_REQ':
        attrs = ['create_gang_info']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_GANG_NAME_RSP_FROM_NAME_SVR':
        attrs = ['is_gang_name_exist', 'create_gang_info']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_GANG_NAME_RSP_FROM_ACCOUNT_SVR':
        attrs = ['result', 'gang_id_generate', 'create_gang_info']
        return f(pb, attrs)
    
    if p == 'PKG_CREATE_GANG_RES':
        attrs = ['result', 'gang_name']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_UPDATE_BASIC_INFO_REQ':
        attrs = ['role_id', 'gang_notify', 'is_auto_apply', 'cond_rank_pos']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_UPDATE_BASIC_INFO_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_REQ':
        attrs = ['gang_name', 'gang_id', 'applyer_unique_id', 'applyer_name', 'applyer_role_id', 'apply_time', 'applyer_rank_pos', 'applyer_gang_battle_win_cnt', 'cumulate_recharge_id', 'head_photo']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_RES':
        attrs = ['result', 'gang_id', 'leader_role_id', 'leader_zone_id', 'apply_list_count']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_AUTOJOIN_RES':
        attrs = ['result', 'gang_simple_info', 'self_info']
        return f(pb, attrs)
    
    if p == 'PKG_TRANSFER_GANG_LEADER_REQ':
        attrs = ['target_role_id', 'self_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_TRANSFER_GANG_LEADER_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'PKG_QUIT_GANG_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'PKG_QUIT_GANG_RES':
        attrs = ['result', 'role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEMLIST_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEMLIST_RES':
        attrs = ['result', 'gang_id', 'list_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_DETAIL_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_DETAIL_RES':
        attrs = ['result', 'gang_id', 'gang_simple_info', 'list_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEM_LIST_CHG_RES':
        attrs = ['del', 'del_type', 'add', 'mem_info', 'gang_mem_cnt']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BLESS_RANK_CLEAR_RES':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BASIC_INFO_CHG_RES':
        attrs = ['gang_notify', 'gang_apply_state', 'cond_rank_pos', 'gang_score', 'gang_level']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEM_INFO_CHG_REQ':
        attrs = ['role_id', 'type', 'reason', 'value_1', 'value_2', 'bless_reslut']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEMCHG_RES':
        attrs = ['result', 'type', 'value_1']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_APPLYLIST_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_APPLYLIST_RES':
        attrs = ['apply_list']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_APPROVE_REQ':
        attrs = ['iresult', 'role_id', 'mem_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_APPROVE_RES':
        attrs = ['result', 'mem_name', 'role_id', 'type', 'gang_simple_info', 'self_info', 'apply_list_count']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_APPROVETOMEM_RES':
        attrs = ['result', 'mem_name', 'gang_simple_info', 'self_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_CHAT_REQ':
        attrs = ['gang_id', 'role_id', 'from_name', 'msg', 'sender_cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_CHAT_RES':
        attrs = ['from_name', 'from_role_id', 'msg', 'send_time', 'sender_cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_KICK_MEM_REQ':
        attrs = ['role_id', 'kick_mem_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_KICK_MEM_RES':
        attrs = ['result', 'mem_role_id', 'mem_zone_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_SET_ELDER_REQ':
        attrs = ['role_id', 'mem_role_id', 'set_or_cancle']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_SET_ELDER_RES':
        attrs = ['result', 'mem_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_LOGOUT_UPDZONEID_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'MemZoneInfo':
        attrs = ['role_id', 'zone_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BLESS_CHECK_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BLESS_CHECK_RES':
        attrs = ['result', 'max_bless_count']
        return f(pb, attrs)
    
    if p == 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_REQ':
        attrs = ['mem_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_SET_GANG_AUTO_APPLY_GANG_BATTLE_RES':
        attrs = ['is_auto_apply_battle']
        return f(pb, attrs)
    
    if p == 'PKG_PLAYER_HERO_CHG_TO_GANG_REQ':
        attrs = ['role_id', 'hero_info']
        return f(pb, attrs)
    
    if p == 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_REQ':
        attrs = ['mem_role_id', 'chg_type', 'city_id', 'strong_point_index', 'hero_slot_index', 'hero_info']
        return f(pb, attrs)
    
    if p == 'PKG_SET_GANG_CITY_STRONG_POINT_HERO_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_CITY_STRONG_POINT_HERO_CHG_RES':
        attrs = ['chg_type', 'city_id', 'strong_point_index', 'hero_slot_index', 'hero_info']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_CITY_INFO_REQ':
        attrs = ['mem_role_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_CITY_INFO_RES':
        attrs = ['result', 'city_info']
        return f(pb, attrs)
    
    if p == 'PKG_BROAD_GANG_BATTTLE_STATE_TO_GANG_SVR':
        attrs = ['state']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_BATTLE_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_BATTLE_REQ_TO_GANG_BATTLE':
        attrs = ['gang_id', 'role_id', 'world_id', 'gang_name', 'gang_level', 'gang_score', 'mem_list', 'is_send_city', 'small_city_start_pos', 'moderate_city_start_pos', 'big_city_start_pos', 'city_info', 'is_send_city_end']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_BATTLE_RES_FROM_GANG_BATTLE':
        attrs = ['result', 'role_id', 'gang_id', 'state']
        return f(pb, attrs)
    
    if p == 'PKG_APPLY_GANG_BATTLE_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BATTLE_STATE_BROAD':
        attrs = ['state']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_CITY_REQ':
        attrs = ['gang_id', 'is_get_self']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_CITY_RES':
        attrs = ['result', 'is_get_self', 'self_score', 'target_score', 'target_gang_name', 'target_gang_level', 'city_info', 'target_gang_world_id']
        return f(pb, attrs)
    
    if p == 'ST_GANG_BATTLE_ATTACK_MEM_INFO':
        attrs = ['mem_role_id', 'fight_win_count', 'fight_total_count', 'pre_get_gold', 'pre_get_crystal']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BATTLE_TOTAL_BALANCE_REQ':
        attrs = ['gang_id', 'is_match', 'self_battle_score', 'target_battle_score', 'target_gang_score', 'mem_info']
        return f(pb, attrs)
    
    if p == 'PKG_BROAD_GANG_BATTTLE_POINT_CHG_TO_GANG_SVR':
        attrs = ['gang_id', 'self_score', 'target_score', 'city_id', 'strong_point_index', 'point_state', 'is_self_city']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BATTTLE_POINT_BROAD':
        attrs = ['self_score', 'target_score', 'is_self_city', 'city_id', 'strong_point_index', 'point_state']
        return f(pb, attrs)
    
    if p == 'PKG_ENTER_GANG_BATTLE_DUNGEON_REQ':
        attrs = ['gang_id', 'role_id', 'self_hero_id', 'target_city_id', 'target_strong_point_index']
        return f(pb, attrs)
    
    if p == 'PKG_ENTER_GANG_BATTLE_DUNGEON_RES':
        attrs = ['result', 'self_hero_id', 'target_gang_id', 'target_city_id', 'target_strong_point_index', 'target_strong_point_hero_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BATTLE_BALANCE_REQ':
        attrs = ['gang_id', 'role_id', 'self_hero_id', 'self_hero_lv', 'target_city_id', 'target_strong_point_index', 'is_win']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BATTLE_BALANCE_RES':
        attrs = ['result', 'reward_gold', 'reward_crystal']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_STRONG_POINT_CHG_TO_GANGBATTLE_REQ':
        attrs = ['gang_id', 'chg_type', 'city_id', 'strong_point_index', 'hero_slot_index', 'hero_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_MEM_CHG_TO_GANGBATTLE_REQ':
        attrs = ['gang_id', 'role_id', 'role_name', 'cumulate_recharge_id', 'is_add']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_MEM_ATTACK_INFO_RES':
        attrs = ['result', 'mem_attck_info']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_STATE_INFO_REQ':
        attrs = ['role_id', 'gang_id', 'hero_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_STATE_INFO_RES':
        attrs = ['is_battle_start', 'attack_hero_num', 'has_can_attack_point']
        return f(pb, attrs)
    
    if p == 'GANG_BROADCAST_DETAIL':
        attrs = ['gang_simple_info_chg', 'gang_mem_list_chg', 'gang_chat_msg', 'gang_city_chg', 'gang_auto_apply_battle_chg', 'gang_battle_state', 'gang_battle_point_state', 'gang_bless_rank_clear']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_BROADCAST':
        attrs = ['mem_name_list', 'msg_id', 'detail']
        return f(pb, attrs)
    
    if p == 'DB_GANG_BATTLE_MEM_ATTACK_HERO_INFO':
        attrs = ['hero_id']
        return f(pb, attrs)
    
    if p == 'DB_GANG_BATTLE_MEM_INFO':
        attrs = ['mem_role_id', 'mem_name', 'fight_win_count', 'fight_total_count', 'pre_get_gold', 'pre_get_crystal', 'cumulate_recharge_id', 'attack_hero', 'attack_point']
        return f(pb, attrs)
    
    if p == 'DB_GANG_BATTLE_MEM_LIST':
        attrs = ['mem_info']
        return f(pb, attrs)
    
    if p == 'DB_GANG_BATTLE_HISTORY_MEM_INFO':
        attrs = ['mem_role_id', 'mem_name', 'mem_win_cnt', 'mem_total_cnt', 'cumulate_recharge_id']
        return f(pb, attrs)
    
    if p == 'DB_GANG_BATTLE_HISTORY_MEM_LIST':
        attrs = ['gang_mem_list']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_BATTLE_HISTORY_INFO':
        attrs = ['battle_time', 'gang_level', 'defense_gang_id', 'defense_gang_name', 'defense_gang_level', 'self_battle_score', 'defense_battle_score', 'mem_list_info']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_STATE_REQ':
        attrs = ['role_id', 'gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_STATE_RES':
        attrs = ['state', 'sub_state', 'pre_get_gold', 'pre_get_crystal', 'attack_hero', 'attack_point']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_HISTORY_REQ':
        attrs = ['gang_id']
        return f(pb, attrs)
    
    if p == 'PKG_GET_GANG_BATTLE_HISTORY_RES':
        attrs = ['history_info']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_MEM_MAIL_USER_INFO':
        attrs = ['mem_role_id', 'acc_info']
        return f(pb, attrs)
    
    if p == 'PKG_GANG_SEND_MEM_MAIL_REQ':
        attrs = ['is_match', 'is_draw', 'is_win', 'is_lose', 'user_info']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_VAL':
        attrs = ['val_id', 'val']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_BATTLE_HERO_BRIEF':
        attrs = ['hero_id', 'hero_lv', 'fighting_capacity']
        return f(pb, attrs)
    
    if p == 'SSDT_PLAYER_BASE_INFO':
        attrs = ['role_id', 'role_name', 'role_level', 'cumulate_recharge_id', 'rank_battle_hero', 'is_robot', 'fight_capacity', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSDT_GANG_BASE_INFO':
        attrs = ['gang_id', 'gang_name', 'gang_level', 'leader_unique_id', 'leader_role_id', 'leader_name', 'leader_level']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_DATA':
        attrs = ['rank_base_type', 'rank_base_info', 'rank_trend', 'rank_val']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RANKLIST_REQ':
        attrs = ['flush_time', 'rank_id', 'rank_type', 'page_start_id', 'page_count', 'battle_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RANKLIST_RES':
        attrs = ['result', 'flush_time', 'rank_id', 'rank_type', 'rank_yday', 'total_count', 'page_start_id', 'max_show_count', 'rank_list', 'battle_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RANKPOS_REQ':
        attrs = ['rank_id', 'rank_type', 'search_type', 'search_key', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RANKPOS_RES':
        attrs = ['rank_id', 'rank_type', 'search_type', 'rank_yday', 'rank_pos', 'rank_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_ACHIEVEMENT_SCORE_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'achievement_finish_num', 'achievement_score']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_GANG_SCORE_REQ':
        attrs = ['uid', 'role_name', 'gang_id', 'gang_name', 'gang_lv', 'gang_score', 'gang_history_score']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_OFFLINE_BATTLE_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'offline_battle_title_lv', 'offline_battle_kill_num']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_ONLINE_BATTLE_RANK_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'online_battle_score', 'online_battle_win_count']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_WORLD_BOSS_DAMAGE_RANK_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'boss_index', 'damage']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_STEAL_BATTLE_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'steal_battle_win_cnt', 'steal_battle_total_cnt']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_ENDLESS_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'end_less_score', 'end_less_floor']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_PVE_EVALUATE_STATS_REQ':
        attrs = ['uid', 'role_name', 'role_level', 'cumulate_recharge_id', 'pve_evaluate_stars']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_CHANGE_NAME_REQ':
        attrs = ['uid', 'role_name']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_ONE_UPDATE':
        attrs = ['rank_id', 'flush_day_time', 'next_flush_day_time', 'flush_week_time', 'next_flush_week_time', 'flush_month_time', 'next_flush_month_time']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_UPDATE_INFO_REQ':
        attrs = ['op_type', 'param_int1', 'param_int2']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_UPDATE_INFO_RES':
        attrs = ['rank_one_update']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANKDATA_REPORT_REQ':
        attrs = ['rank_base_type', 'rank_base_info', 'rank_data']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_GANG_RANKSTAT_REQ':
        attrs = ['gang_id', 'rank_id', 'rank_base_type']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_GANG_RANKSTAT_RES':
        attrs = ['gang_id', 'rank_id', 'rank_base_type', 'rank_val']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_ROLELOGIN_REQ':
        attrs = ['role_id', 'can_join_rank_battle', 'role_name', 'cumulate_recharge_id', 'defense_hero_info', 'head_photo', 'fight_capacity']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_ROLELOGIN_RES':
        attrs = ['rank_pos', 'high_history_rank_pos']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_BATTLE_FIGHT_TARGET_INFO':
        attrs = ['role_id', 'role_name', 'rank_pos', 'defense_hero_info', 'head_photo', 'fight_capacity']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_GET_FIGHT_TARGET_RES':
        attrs = ['result', 'target_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_REQ':
        attrs = ['defense_role_id', 'attacker_role_id', 'dungeon_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_ENTER_DUNGEON_RES':
        attrs = ['result', 'dungeon_id', 'defense_role_id', 'defense_hero_info', 'attack_role_name']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_UNLOCK_REQ':
        attrs = ['attacker_role_id', 'defense_role_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_BALANCE_REQ':
        attrs = ['attacker_mem_role_id', 'attacker_mem_name', 'attacker_cumulate_recharge_id', 'attacker_mem_defense_hero_info', 'attacker_head_photo', 'defense_mem_role_id', 'battle_result', 'attacker_fight_capacity']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_BALANCE_RES':
        attrs = ['result', 'defense_mem_role_id', 'old_pos', 'new_pos', 'is_promote', 'history_pos', 'promote_reward']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_BATTLE_MAIL_USER_INFO':
        attrs = ['mem_role_id', 'rank_pos', 'reward']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_REWARD_EVERYDAY_REQ':
        attrs = ['user_info', 'activity_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_REWARD_PROMOTE_REQ':
        attrs = ['mem_role_id', 'rank_new_pos', 'rank_old_pos', 'promote_reward']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_POS_DOWN_NOTIFY_REQ':
        attrs = ['mem_role_id', 'atk_mem_name', 'atk_mem_role_id', 'rank_new_pos', 'rank_old_pos', 'is_win']
        return f(pb, attrs)
    
    if p == 'PKG_GET_NOTIFY_REQ':
        attrs = ['uid', 'cur_max_beg_time']
        return f(pb, attrs)
    
    if p == 'PKG_NOTIFY_DATA':
        attrs = ['title', 'link', 'content']
        return f(pb, attrs)
    
    if p == 'PKG_NOTIFY_INFO':
        attrs = ['notify_id', 'name', 'beg_time', 'end_time', 'is_display', 'notify']
        return f(pb, attrs)
    
    if p == 'PKG_GET_NOTIFY_RES':
        attrs = ['new_count', 'new_max_beg_time', 'notify_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_FINISH':
        attrs = ['result', 'uid', 'unique_id', 'http_handle', 'is_firstpurchase', 'product_id', 'trade_code', 'world_id', 'transaction_id', 'platform', 'extra_flag', 'is_first_reward', 'time', 'channel_id', 'any_purchase_cnt']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_FINISH_DISP':
        attrs = ['result', 'uid', 'unique_id', 'http_handle', 'product_id', 'trade_code', 'world_id', 'transaction_id', 'platform', 'extra_flag']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_REQ':
        attrs = ['transaction_id', 'uid', 'unique_id', 'praram', 'product_id', 'receipt']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_INFO':
        attrs = ['trade_code', 'transaction_id', 'platform', 'uin', 'uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_REQUEST_DELIVERY':
        attrs = ['info']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_REQUEST_DELIVERY_IAP':
        attrs = ['transaction_id', 'transaction_receipt', 'platform', 'uin', 'uid', 'trade_code']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_REQUEST_DELIVERY_IAP_CHECKED':
        attrs = ['req']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_IAP_FINISHED':
        attrs = ['transaction_id', 'uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_DONE':
        attrs = ['trade_code', 'uid', 'unique_id', 'product_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_RES':
        attrs = ['uid', 'unique_id', 'result', 'product_id', 'http_handle', 'is_firstpurchase', 'trade_code', 'cur_cumulate_recharge', 'transaction_id', 'platform', 'extra_flag', 'is_first_reward', 'time', 'newbie_activity_recharge', 'cur_first_recharge', 'gold_in_any_purchase']
        return f(pb, attrs)
    
    if p == 'SSPKG_PURCHASE_DISP_REQ':
        attrs = ['uid', 'unique_id', 'server_id', 'transaction_id', 'product_id', 'trade_code', 'coin', 'money', 'time', 'http_handle', 'platform', 'extra_flag', 'pid']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_PURCHASEACTIVITY_REQ':
        attrs = ['uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_PURCHASEACTIVITY_RES':
        attrs = ['uid', 'firstpurchase_list', 'monthcard_info', 'growthfund_buytime', 'cumulate_recharge', 'first_reward_time', 'is_first_reward', 'sect_recharge_time', 'sect_recharge_cnt', 'daily_recharge', 'daily_recharge_time', 'newbie_activity_recharge', 'first_recharge_cnt', 'supervaluecard_info', 'time_recharge_time', 'time_recharge_product_id', 'open_recharge_time', 'open_recharge_product_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_RECORD_TRADE_SUCCESS':
        attrs = ['trade_code', 'uid', 'unique_id', 'product_id', 'money', 'gold']
        return f(pb, attrs)
    
    if p == 'SSPKG_GIFT_CODE_REQ':
        attrs = ['uid', 'unique_id', 'gift_code', 'gift_id', 'channel_id', 'pre_condition_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_GIFT_UPDATE_ACCEPT_REQ':
        attrs = ['uid', 'unique_id', 'gift_code', 'gift_id', 'channel_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_GIFT_CODE_RES':
        attrs = ['uid', 'unique_id', 'result', 'gift_code', 'gift_id', 'channel_id']
        return f(pb, attrs)
    
    if p == 'SSDT_ROLE_LIST_RES':
        attrs = ['success', 'error', 'reserve']
        return f(pb, attrs)
    
    if p == 'UINON_MAIL_ACC_INFO':
        attrs = ['system_mail_acc', 'revenge_mail_acc']
        return f(pb, attrs)
    
    if p == 'SSDT_RANK_BASEINFO':
        attrs = ['player_base_info', 'gang_base_info']
        return f(pb, attrs)
    
    if p == 'SSDT_RANKPOS_SEARCH_KEY':
        attrs = ['uniq_id', 'rank_pos', 'uniq_name', 'reserve']
        return f(pb, attrs)
    
    if p == 'SSPKG_GAMESVR_STAT_INFO':
        attrs = ['worldid', 'zoneid', 'online_player_cnt']
        return f(pb, attrs)
    
    if p == 'SSPKG_GAMESVR_ACC_LOGIN':
        attrs = ['uniq_id', 'uid', 'name', 'worldid', 'zoneid']
        return f(pb, attrs)
    
    if p == 'SSPKG_GAMESVR_ACC_LOGOUT':
        attrs = ['uniq_id', 'world_info']
        return f(pb, attrs)
    
    if p == 'DB_PLAYER_SHOP_HERO_INFO':
        attrs = ['hero_id', 'hero_lv']
        return f(pb, attrs)
    
    if p == 'DB_PLAYER_SHOP_GOODS_INFO':
        attrs = ['goods_id', 'is_already_buy']
        return f(pb, attrs)
    
    if p == 'DB_PlAYER_SHOP_INFO_BLOB':
        attrs = ['player_shop_goods_info', 'player_rankbattle_shop_goods_info', 'player_vip_shop_goods_info']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_LOGIN_REQ':
        attrs = ['role_id', 'zone_id', 'hero_info']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_LOGOUT_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_LOGIN_RES':
        attrs = ['result', 'shop_type', 'next_refresh_time', 'shop_goods_info', 'auto_refreshed']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_REFRESH_GOODS_REQ':
        attrs = ['role_id', 'shop_type']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_REFRESH_GOODS_RES':
        attrs = ['shop_type', 'shop_goods_info', 'next_refresh_time', 'result', 'auto_refreshed']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_BUY_GOODS_CHECK_REQ':
        attrs = ['role_id', 'shop_type', 'goods_id', 'left_money', 'left_gold', 'left_crystal', 'left_rankbattle_score', 'vip_level']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PlAYER_BUY_GOODS_CHECK_RES':
        attrs = ['result', 'shop_type', 'role_id', 'cur_time', 'goods_info']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_UPDATE_HERO_REQ':
        attrs = ['role_id', 'hero_info']
        return f(pb, attrs)
    
    if p == 'SS_SHOP_PLAYER_BUY_GOODS_FAILE_ROLLBACK_REQ':
        attrs = ['role_id', 'shop_type', 'goods_id']
        return f(pb, attrs)
    
    if p == 'SSDT_FRIEND_CROSS_INFO':
        attrs = ['uid', 'uin', 'uin3rd', 'world_id', 'platform']
        return f(pb, attrs)
    
    if p == 'SSPKG_BIND_3RD_PLATFORM_ID':
        attrs = ['bind_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_BIND_3RD_PLATFORM_ID_TO_FRIEND':
        attrs = ['bind_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_INVITE_STATE_INFO':
        attrs = ['world_id', 'zone_id', 'uid', 'data']
        return f(pb, attrs)
    
    if p == 'SSPKG_HANDLE_INVITED_CODE_REWARD':
        attrs = ['result', 'role_id', 'zone_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_APPLY_INVITED_CODE':
        attrs = ['invited_code', 'uid', 'world_id', 'zone_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_APPLY_INVITED_CODE_TO_CROSS':
        attrs = ['world_id', 'msg']
        return f(pb, attrs)
    
    if p == 'SSPKG_APPLY_INVITED_CODE_CROSS_TO_FRIEND':
        attrs = ['world_id', 'msg']
        return f(pb, attrs)
    
    if p == 'SSPKG_APPLY_INVITED_CODE_RES_TO_CROSS':
        attrs = ['result', 'msg']
        return f(pb, attrs)
    
    if p == 'SSPKG_APPLY_INVITED_CODE_RES_TO_CROSS_TO_FRIEND':
        attrs = ['result', 'msg']
        return f(pb, attrs)
    
    if p == 'SSPKG_NTF_INVITED_ERROR':
        attrs = ['error_code', 'world_id', 'zone_id', 'uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_INVITED_FRIEND_INFO':
        attrs = ['time_stamp', 'uid', 'world_id', 'zone_id', 'social_friend']
        return f(pb, attrs)
    
    if p == 'SSPKG_REQUEST_INVITED_FRIEND':
        attrs = ['time_stamp', 'uid', 'world_id', 'zone_id']
        return f(pb, attrs)
    
    if p == 'SSDT_INVITED_INFO':
        attrs = ['state', 'from_world_id', 'from_uid', 'uid_of_code', 'world_id_of_code']
        return f(pb, attrs)
    
    if p == 'SSPKG_REQUEST_INVITED_TO_CROSS':
        attrs = ['req', 'friends']
        return f(pb, attrs)
    
    if p == 'SSPKG_REQUES_INVITED_CROSS_TO_FRIEND':
        attrs = ['req', 'friends']
        return f(pb, attrs)
    
    if p == 'SSPKG_RESPONSE_INVITED_FRIEND_TO_CROSS':
        attrs = ['req', 'friends']
        return f(pb, attrs)
    
    if p == 'SSPKG_RESPONSE_INVITED_CROSS_TO_FRIEND':
        attrs = ['req', 'friends']
        return f(pb, attrs)
    
    if p == 'SSDT_REQUEST_SOCIAL_FRIEND':
        attrs = ['time_stamp', 'uid', 'platform', 'world_id', 'uid_3rd']
        return f(pb, attrs)
    
    if p == 'SSPKG_REQUEST_SOCIAL_FRIEND':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSPKG_REQUEST_SOCIAL_FRIEND_CROSS':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSDT_FRIEND_INFO':
        attrs = ['base_info', 'receive_power_state', 'has_send_power']
        return f(pb, attrs)
    
    if p == 'SSDT_SOCIAL_FRIEND_INFO':
        attrs = ['cross_info', 'friend_info']
        return f(pb, attrs)
    
    if p == 'SSDT_FRIEND_INFO_CROSS':
        attrs = ['time_stamp', 'uid', 'world_id', 'social_friend_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_REQUEST_INVITE_REWARD':
        attrs = ['role_id', 'reward_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_RESPONSE_INVITE_REWARD':
        attrs = ['role_id', 'state_code', 'reward_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_NOTIFY_SOCIAL_FRIEND_ERROR':
        attrs = ['error_code']
        return f(pb, attrs)
    
    if p == 'SSDT_SOCIAL_FRIEND_ID':
        attrs = ['uid', 'uid_3rd', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_SEND_POWER_TO_SOCIAL_FRIEND':
        attrs = ['from', 'uid_3rd']
        return f(pb, attrs)
    
    if p == 'SSPKG_SEND_POWER_TO_SOCIAL_FRIEND_FROM_CROSS':
        attrs = ['from', 'to']
        return f(pb, attrs)
    
    if p == 'SSPKG_SEND_POWER_TO_SOCIAL_FRIEND_CROSS':
        attrs = ['from', 'to']
        return f(pb, attrs)
    
    if p == 'SSPKG_SOCIAL_FRIEND_POWER_ADD':
        attrs = ['uid', 'zone_id', 'uid_3rd_from']
        return f(pb, attrs)
    
    if p == 'SSDT_SEND_POSER_TO_SOCIAL_FRIEND':
        attrs = ['uid_from', 'uid_3rd_from', 'world_id_to', 'uid_3rd_to', 'uid_to']
        return f(pb, attrs)
    
    if p == 'SSPKG_RECV_POWER_FROM_SOCIAL_FRIEND':
        attrs = ['uid', 'uid_3rd']
        return f(pb, attrs)
    
    if p == 'SSPKG_SOCIAL_FRIEND_INFO_CHANGE':
        attrs = ['uid', 'zone_id', 'social_friend']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_INFO_REQUEST':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_CROSS_INFO_RESPONSE_TO_CROSS':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_CROSS_INFO_RESPONSE_TO_CROSS_TO_FRIEND':
        attrs = ['data']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_CROSS_INFO_RESPONSE':
        attrs = ['zone_id', 'data']
        return f(pb, attrs)
    
    if p == 'SSDT_FRIEND_APPLY_INFO':
        attrs = ['base_info', 'apply_time']
        return f(pb, attrs)
    
    if p == 'SSDT_FRIEND_RECOMMAND_INFO':
        attrs = ['base_info', 'is_applied']
        return f(pb, attrs)
    
    if p == 'SSDT_PLAYER_FRIEND_INFO':
        attrs = ['friend_info', 'apply_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_OPT_FRIEND_REQ':
        attrs = ['uid', 'opt_type', 'target_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_OPT_FRIEND_RES':
        attrs = ['result', 'uid', 'opt_type', 'target_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_LOGIN_FRIEND_SVR_REQ':
        attrs = ['uid', 'uin', 'hero_info', 'role_name', 'vip_level', 'head_photo', 'zone_id', 'endless_score', 'greatest_pve_dun_id', 'fight_capacity']
        return f(pb, attrs)
    
    if p == 'SSPKG_LOGIN_FRIEND_SVR_RES':
        attrs = ['result', 'recv_power_times_today', 'friend_info', 'self_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_INFO_CHG':
        attrs = ['uid', 'type', 'value', 'hero_info']
        return f(pb, attrs)
    
    if p == 'SSDT_RELATION_INFO':
        attrs = ['role_id', 'recv_power_from_this_friend_state', 'has_send_power_to_this_friend', 'agree_time']
        return f(pb, attrs)
    
    if p == 'SSDT_SOCIAL_RELATION_INFO':
        attrs = ['uid_3rd', 'recv_power_from_this_friend_state', 'has_send_power_to_this_friend']
        return f(pb, attrs)
    
    if p == 'SSDT_INVITED_REWARD_GOT':
        attrs = ['used_size', 'data']
        return f(pb, attrs)
    
    if p == 'SSDT_INVITED_FRIEND_INFO':
        attrs = ['role_id', 'world_id', 'max_pve_dun']
        return f(pb, attrs)
    
    if p == 'SSDT_INVITED_TOTAL_INFO':
        attrs = ['reward_info', 'apply_invited', 'invited_num', 'friend_info']
        return f(pb, attrs)
    
    if p == 'SSDT_ASSISTANT_HERO_INFO':
        attrs = ['hire_cnt_total', 'hire_cnt_not_get', 'assistant_hero_gold', 'assistant_calc_time']
        return f(pb, attrs)
    
    if p == 'SSDT_SEND_POWER_RECORD':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'DB_FRIEND_BLOB':
        attrs = ['apply_info', 'hero_info', 'relation_info', 'social_relation_info', 'send_power_record', 'invite_info', 'assistant_hero_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_NOTIFY_APPLYLIST_CHG':
        attrs = ['apply_info', 'zone_id', 'is_add', 'uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_NOTIFY_FRIEND_LIST_CHG':
        attrs = ['zone_id', 'is_add', 'friend_info', 'uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_NOTIFY_FRIEND_SEND_POWER':
        attrs = ['uid', 'zone_id', 'send_time', 'send_friend_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_NOTIFY_FRIEND_RECV_POWER':
        attrs = ['uid', 'zone_id', 'recv_power_times_today', 'recv_power_from_friend_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_NOTIFY_POWER_REFRESH_CROSS_DAY':
        attrs = ['uid', 'zone_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_RECV_POWER_ALL_REQ':
        attrs = ['uid', 'recv_power_friend_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_RECV_POWER_ALL_RES':
        attrs = ['recv_power_success_friend_uid', 'recv_power_faild_friend_uid', 'recv_power_times_today']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_SEND_POWER_ALL_REQ':
        attrs = ['uid', 'send_power_friend_uid']
        return f(pb, attrs)
    
    if p == 'SSPKG_FRIEND_SEND_POWER_ALL_RES':
        attrs = ['send_power_success_friend_uid', 'send_power_faild_friend_uid']
        return f(pb, attrs)
    
    if p == 'PKG_FRIEND_DISP_INFO_CHG':
        attrs = ['uid', 'last_logout_time', 'vip_level', 'head_photo', 'fighting_capacity', 'endless_score', 'greatest_pve_dun_id']
        return f(pb, attrs)
    
    if p == 'FRIEND_BROADCAST_DETAIL':
        attrs = ['friend_info_chg']
        return f(pb, attrs)
    
    if p == 'PKG_FRIEND_BROADCAST':
        attrs = ['mem_list', 'msg_id', 'detail']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RECOMMAND_FRIEND_REQ':
        attrs = ['uid', 'uid_to_be_find']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_RECOMMAND_FRIEND_RES':
        attrs = ['result', 'recommand_info', 'uid_to_be_find']
        return f(pb, attrs)
    
    if p == 'SSPKG_KICK_PLAYER_ALL_ZONE':
        attrs = ['unique_id']
        return f(pb, attrs)
    
    if p == 'DBBLOB_ACTIVITY_INFO':
        attrs = ['activity_control', 'activity_info']
        return f(pb, attrs)
    
    if p == 'SSDT_DAILY_RECHARGE_INFO':
        attrs = ['day_num', 'recharge_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_DAILY_RECHARGE_REWARD':
        attrs = ['daily_recharge_info']
        return f(pb, attrs)
    
    if p == 'SSDT_NEWBIE_ACTIVITY_RECHARGE_INFO':
        attrs = ['recharge_time', 'recharge_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_NEWBIE_ACTIVITY_RECHARGE':
        attrs = ['recharge_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_NTF_VIP_CHANGE':
        attrs = ['uid', 'recharge_cnt']
        return f(pb, attrs)
    
    if p == 'DBBLOB_FRIEND_ASSIST_HERO_INFO':
        attrs = ['friend_uid', 'gold', 'friend_hero_battle_info']
        return f(pb, attrs)
    
    if p == 'DBBLOB_PLAYER_BOSSRUSH_INFO':
        attrs = ['last_clear_time', 'cur_boss_rush_chaptor_id', 'cur_monster_id', 'cur_sequence', 'main_hero_id', 'partner_hero', 'hp_remain', 'friend_assist_hero_info', 'last_clear_chaptor_index']
        return f(pb, attrs)
    
    if p == 'SSPKG_CLAIM_ASSISTANT_HERO_REWARD':
        attrs = ['uid', 'gold']
        return f(pb, attrs)
    
    if p == 'SSPKG_BOSSRUSH_HIRE_HERO':
        attrs = ['uid', 'uid_friend', 'hero_id_friend', 'hero_fight_capacity']
        return f(pb, attrs)
    
    if p == 'SSDT_WORLD_ACTIVITY_INFO':
        attrs = ['activity_id', 'stat', 'last_trigger_time', 'trigger_times']
        return f(pb, attrs)
    
    if p == 'SSDT_WORLD_DROP_INFO':
        attrs = ['id', 'last_beg_time', 'already_drop_info']
        return f(pb, attrs)
    
    if p == 'SSDT_GAME_SERVER_MISC_INFO':
        attrs = ['world_activity_info', 'world_drop_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_UPDATE_GAME_SERVER_MISC_REQ':
        attrs = ['game_server_misc']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_GAMESVR_MISC_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_GAMESVR_MISC_RES':
        attrs = ['gamesvr_open_time', 'gamesvr_misc']
        return f(pb, attrs)
    
    if p == 'SSPKG_RANK_BATTLE_ACTIVITY_REQ':
        attrs = ['activity_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_REPORT_PLAYER_CHAT_REQ':
        attrs = ['role_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_REPORT_PLAYER_CHAT_RES':
        attrs = ['uid', 'world_id', 'ban_end_time']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_RANK_POS_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_RANK_POS_RES':
        attrs = ['qualification_rank_pos']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_BASE_INFO_REQ':
        attrs = ['world_id', 'qualification_rank_pos']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_BASE_INFO_RES':
        attrs = ['top_battle_begin_time', 'world_id', 'battle_zone_id', 'qualification_rank_pos', 'max_rank_pos']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_CHECK_QUALIFICATION_REQ':
        attrs = ['info', 'is_login']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_CHECK_QUALIFICATION_RES':
        attrs = ['result', 'info', 'is_login']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_TOP_BATTLE_STATE_REQ':
        attrs = ['info', 'world_id', 'is_login', 'is_has_qualification']
        return f(pb, attrs)
    
    if p == 'SSPKG_GET_TOP_BATTLE_STATE_RES':
        attrs = ['result', 'battle_score']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_APPLY_REQ':
        attrs = ['world_id', 'role_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_GET_FIGHT_TARGET_REQ':
        attrs = ['role_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_GET_FIGHT_TARGET_RES':
        attrs = ['result', 'target_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_ENTER_DUNGEON_REQ':
        attrs = ['defense_role_id', 'attacker_role_id', 'dungeon_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_ENTER_DUNGEON_RES':
        attrs = ['result', 'dungeon_id', 'defense_role_id', 'defense_hero_info', 'attack_role_name']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_UNLOCK_REQ':
        attrs = ['attacker_role_id', 'defense_role_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_BALANCE_REQ':
        attrs = ['attacker_info', 'defense_mem_role_id', 'battle_result', 'attacker_role_id', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_BALANCE_RES':
        attrs = ['result', 'defense_mem_role_id', 'old_pos', 'new_pos']
        return f(pb, attrs)
    
    if p == 'SSDT_TOP_BATTLE_REWARD_INFO':
        attrs = ['mem_role_id', 'rank_pos', 'reward_score', 'total_score', 'reward']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_REWARD_REQ':
        attrs = ['user_info', 'type']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_CHALLENGE_NOTIFY_REQ':
        attrs = ['mem_role_id', 'atk_mem_name', 'atk_mem_role_id', 'rank_new_pos', 'rank_old_pos', 'world_id', 'is_win', 'is_out_rank']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_REQ':
        attrs = ['role_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_RES':
        attrs = ['today_qualification_info', 'tomorrow_qualification_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_GET_TOPTHREE_REQ':
        attrs = ['reverse', 'is_login']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_GET_TOPTHREE_RES':
        attrs = ['result', 'battle_zone_rank', 'is_login']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_SEND_ROCKET_REQ':
        attrs = ['uid', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_SEND_ROCKET_RES':
        attrs = ['uid', 'top_battle_rocket_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_NTF_SEND_ROCKET':
        attrs = ['top_battle_rocket_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_GET_ROCKET_REWARD_REQ':
        attrs = ['uid', 'world_id']
        return f(pb, attrs)
    
    if p == 'SSPKG_TOP_BATTLE_GET_ROCKET_REWARD_RES':
        attrs = ['result', 'rocket_id', 'send_rocket_uid', 'last_refresh_time', 'top_battle_rocket_info']
        return f(pb, attrs)
    
    if p == 'SSPKG_NTF_TOP_BATTLE_ROCKET_RESET':
        attrs = ['last_refresh_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_TOP_BATTLE_GET_FIGHT_TARGET_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_GET_FIGHT_TARGET_RES':
        attrs = ['result', 'target_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_TOP_BATTLE_ENTER_DUNGEON_REQ':
        attrs = ['defense_role_id', 'dungeon_id']
        return f(pb, attrs)
    
    if p == 'CSDT_TOP_BATTLE_DEFENSE_HERO_ATTR':
        attrs = ['hero_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_ENTER_DUNGEON_RES':
        attrs = ['result', 'dungeon_id', 'dungeon_type', 'round_count', 'attack_hero_id', 'defense_hero_info', 'attack_role_name']
        return f(pb, attrs)
    
    if p == 'CSPKG_TOP_BATTLE_ROUND_BEGIN_REQ':
        attrs = ['dungeon_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_ROUND_BEGIN_RES':
        attrs = ['result', 'dungeon_id', 'round_no', 'round_begin_time', 'round_interval_time']
        return f(pb, attrs)
    
    if p == 'CSPKG_TOP_BATTLE_BALANCE_ONEROUND_REQ':
        attrs = ['dungeon_id', 'round_no', 'fight_result', 'defense_mem_role_id', 'brief']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_BALANCE_ONEROUND_RES':
        attrs = ['result']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_BALANCE_RES':
        attrs = ['result', 'defense_mem_role_id', 'attack_result', 'old_pos', 'new_pos', 'reward_gold', 'reward_crystal']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_BASE_INFO_RES':
        attrs = ['top_battle_begin_time', 'world_id', 'battle_zone_id', 'qualification_rank_pos', 'max_rank_pos']
        return f(pb, attrs)
    
    if p == 'CSPKG_GET_TOP_BATTLE_STATE_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_GET_TOP_BATTLE_STATE_RES':
        attrs = ['result', 'battle_score']
        return f(pb, attrs)
    
    if p == 'CSPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_GET_QUALIFICATION_INFO_RES':
        attrs = ['today_qualification_info', 'tomorrow_qualification_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_TOP_BATTLE_GET_TOPTHREE_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_GET_TOPTHREE_RES':
        attrs = ['result', 'battle_zone_rank']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_REFRESH_COUNT_RES':
        attrs = ['left_top_battle_count', 'buy_top_battle_count']
        return f(pb, attrs)
    
    if p == 'CSPKG_TOP_BATTLE_BUY_COUNT_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'CSPKG_TOP_BATTLE_SEND_ROCKET_REQ':
        attrs = ['reverse']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_SEND_ROCKET_RES':
        attrs = ['result', 'rocket_id', 'role_rocket_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_TOP_BATTLE_ROCKET':
        attrs = ['top_battle_rocket_info']
        return f(pb, attrs)
    
    if p == 'CSPKG_TOP_BATTLE_GET_ROCKET_REWARD':
        attrs = ['uid', 'rocket_id']
        return f(pb, attrs)
    
    if p == 'SCPKG_TOP_BATTLE_GET_ROCKET_REWARD':
        attrs = ['result', 'drop_info', 'role_rocket_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_TOP_BATTLE_ROCKET_CONF':
        attrs = ['top_battle_rocket_conf']
        return f(pb, attrs)
    
    if p == 'SCPKG_NTF_TOP_BATTLE_ROCKET_RESET':
        attrs = ['reserve']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_VIEW_PLAYER_INFO_REQ':
        attrs = ['view_role_id', 'vip_level', 'is_from_gang']
        return f(pb, attrs)
    
    if p == 'ST_VIEW_PlAYER_HERO_INFO':
        attrs = ['hero_id', 'hero_lv', 'hero_grow_up', 'emblem_info', 'equip_info', 'hero_attr', 'talent_info', 'talent_hide_info', 'talent_lv_info', 'equiped_factors']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_VIEW_PLAYER_INFO_RES':
        attrs = ['result', 'is_from_gang', 'view_role_id', 'view_role_name', 'pvp_win_cnt', 'pvp_total_cnt', 'greatest_dungeon_id', 'gang_name', 'rank_battle_pos', 'endless_floor', 'offline_battle_kill', 'achievement_rank_pos', 'gang_battle_info', 'hero_info', 'vip_level', 'head_photo', 'online_battle_win_cnt']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PLAYER_DUNBALANCE_WORLD_BOSS':
        attrs = ['reward_gold', 'reward_crystal']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_WORLD_BOSS_ERROR':
        attrs = ['error_no']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_PLAYER_WORLD_BOSS_KILL_REWARD':
        attrs = ['drop_info']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_WORLD_BOSS_DAMAGE_RANK_PLAYER':
        attrs = ['uid', 'name', 'damage_sum']
        return f(pb, attrs)
    
    if p == 'SCPKG_WORLD_BOSS_KILLER_INFO':
        attrs = ['index', 'uid', 'name', 'vip_level', 'damage']
        return f(pb, attrs)
    
    if p == 'CSPKG_WORLD_BOSS_KILLER_INFO_REQ':
        attrs = ['uid', 'boss_index']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_WORLD_BOSS_STATUS_REQ':
        attrs = ['param']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_WORLD_BOSS_CHANGE_HERO_REQ':
        attrs = ['param']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_WORLD_BOSS_CHANGE_HERO_RES':
        attrs = ['param', 'hero_id']
        return f(pb, attrs)
    
    if p == 'CSDT_WORLD_BOSS_HERO':
        attrs = ['hero_id', 'hero_remain_hp_percent', 'remain_seconds', 'damage']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_WORLD_BOSS_CHALLENGE_DATA':
        attrs = ['world_boss_index', 'hero_index', 'hero_array']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_WORLD_BOSS_STATUS':
        attrs = ['cur_boss_index', 'cur_boss_id', 'cur_boss_max_hp', 'cur_boss_cur_hp', 'cur_boss_refresh_seconds', 'week_day', 'sync_interval_sec_in_menu', 'sync_interval_sec_in_game']
        return f(pb, attrs)
    
    if p == 'CSPKG_CMD_UPDATE_WORLD_BOSS':
        attrs = ['boss_index', 'boss_got_damage', 'hero_hp_remain_percent', 'time_stamp']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_UPDATE_WORLD_BOSS':
        attrs = ['boss_hp', 'killer_player_role_id', 'killer_player_name']
        return f(pb, attrs)
    
    if p == 'SCPKG_CMD_WORLD_BOSS_DEAD':
        attrs = ['boss_index', 'killer_uid', 'killer_name']
        return f(pb, attrs)
    
    return None
